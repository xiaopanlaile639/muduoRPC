// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpcservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace muduo {
namespace net {

namespace {

const ::google::protobuf::Descriptor* ListRpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServiceResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpcservice_2eproto() {
  protobuf_AddDesc_rpcservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpcservice.proto");
  GOOGLE_CHECK(file != NULL);
  ListRpcRequest_descriptor_ = file->message_type(0);
  static const int ListRpcRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcRequest, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcRequest, list_method_),
  };
  ListRpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRpcRequest_descriptor_,
      ListRpcRequest::default_instance_,
      ListRpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRpcRequest));
  ListRpcResponse_descriptor_ = file->message_type(1);
  static const int ListRpcResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcResponse, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcResponse, method_name_),
  };
  ListRpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRpcResponse_descriptor_,
      ListRpcResponse::default_instance_,
      ListRpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRpcResponse));
  GetServiceRequest_descriptor_ = file->message_type(2);
  static const int GetServiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRequest, service_name_),
  };
  GetServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceRequest_descriptor_,
      GetServiceRequest::default_instance_,
      GetServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceRequest));
  GetServiceResponse_descriptor_ = file->message_type(3);
  static const int GetServiceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceResponse, proto_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceResponse, proto_file_name_),
  };
  GetServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServiceResponse_descriptor_,
      GetServiceResponse::default_instance_,
      GetServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServiceResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpcservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRpcRequest_descriptor_, &ListRpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRpcResponse_descriptor_, &ListRpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceRequest_descriptor_, &GetServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServiceResponse_descriptor_, &GetServiceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpcservice_2eproto() {
  delete ListRpcRequest::default_instance_;
  delete ListRpcRequest_reflection_;
  delete ListRpcResponse::default_instance_;
  delete ListRpcResponse_reflection_;
  delete GetServiceRequest::default_instance_;
  delete GetServiceRequest_reflection_;
  delete GetServiceResponse::default_instance_;
  delete GetServiceResponse_reflection_;
}

void protobuf_AddDesc_rpcservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::muduo::net::protobuf_AddDesc_rpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020rpcservice.proto\022\tmuduo.net\032\trpc.proto"
    "\";\n\016ListRpcRequest\022\024\n\014service_name\030\001 \001(\t"
    "\022\023\n\013list_method\030\002 \001(\010\"a\n\017ListRpcResponse"
    "\022#\n\005error\030\001 \002(\0162\024.muduo.net.ErrorCode\022\024\n"
    "\014service_name\030\002 \003(\t\022\023\n\013method_name\030\003 \003(\t"
    "\")\n\021GetServiceRequest\022\024\n\014service_name\030\001 "
    "\002(\t\"f\n\022GetServiceResponse\022#\n\005error\030\001 \002(\016"
    "2\024.muduo.net.ErrorCode\022\022\n\nproto_file\030\002 \003"
    "(\t\022\027\n\017proto_file_name\030\003 \003(\t2\231\001\n\nRpcServi"
    "ce\022@\n\007listRpc\022\031.muduo.net.ListRpcRequest"
    "\032\032.muduo.net.ListRpcResponse\022I\n\ngetServi"
    "ce\022\034.muduo.net.GetServiceRequest\032\035.muduo"
    ".net.GetServiceResponseB4\n\033com.chenshuo."
    "muduo.protorpcB\017RpcServiceProto\210\001\001\220\001\001", 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpcservice.proto", &protobuf_RegisterTypes);
  ListRpcRequest::default_instance_ = new ListRpcRequest();
  ListRpcResponse::default_instance_ = new ListRpcResponse();
  GetServiceRequest::default_instance_ = new GetServiceRequest();
  GetServiceResponse::default_instance_ = new GetServiceResponse();
  ListRpcRequest::default_instance_->InitAsDefaultInstance();
  ListRpcResponse::default_instance_->InitAsDefaultInstance();
  GetServiceRequest::default_instance_->InitAsDefaultInstance();
  GetServiceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpcservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpcservice_2eproto {
  StaticDescriptorInitializer_rpcservice_2eproto() {
    protobuf_AddDesc_rpcservice_2eproto();
  }
} static_descriptor_initializer_rpcservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ListRpcRequest::kServiceNameFieldNumber;
const int ListRpcRequest::kListMethodFieldNumber;
#endif  // !_MSC_VER

ListRpcRequest::ListRpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.ListRpcRequest)
}

void ListRpcRequest::InitAsDefaultInstance() {
}

ListRpcRequest::ListRpcRequest(const ListRpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:muduo.net.ListRpcRequest)
}

void ListRpcRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_method_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRpcRequest::~ListRpcRequest() {
  // @@protoc_insertion_point(destructor:muduo.net.ListRpcRequest)
  SharedDtor();
}

void ListRpcRequest::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void ListRpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRpcRequest_descriptor_;
}

const ListRpcRequest& ListRpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcservice_2eproto();
  return *default_instance_;
}

ListRpcRequest* ListRpcRequest::default_instance_ = NULL;

ListRpcRequest* ListRpcRequest::New() const {
  return new ListRpcRequest;
}

void ListRpcRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    list_method_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.ListRpcRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list_method;
        break;
      }

      // optional bool list_method = 2;
      case 2: {
        if (tag == 16) {
         parse_list_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &list_method_)));
          set_has_list_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.ListRpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.ListRpcRequest)
  return false;
#undef DO_
}

void ListRpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.ListRpcRequest)
  // optional string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // optional bool list_method = 2;
  if (has_list_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->list_method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.ListRpcRequest)
}

::google::protobuf::uint8* ListRpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.ListRpcRequest)
  // optional string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // optional bool list_method = 2;
  if (has_list_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->list_method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.ListRpcRequest)
  return target;
}

int ListRpcRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional bool list_method = 2;
    if (has_list_method()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRpcRequest::MergeFrom(const ListRpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_list_method()) {
      set_list_method(from.list_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpcRequest::CopyFrom(const ListRpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcRequest::IsInitialized() const {

  return true;
}

void ListRpcRequest::Swap(ListRpcRequest* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(list_method_, other->list_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRpcRequest_descriptor_;
  metadata.reflection = ListRpcRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListRpcResponse::kErrorFieldNumber;
const int ListRpcResponse::kServiceNameFieldNumber;
const int ListRpcResponse::kMethodNameFieldNumber;
#endif  // !_MSC_VER

ListRpcResponse::ListRpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.ListRpcResponse)
}

void ListRpcResponse::InitAsDefaultInstance() {
}

ListRpcResponse::ListRpcResponse(const ListRpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:muduo.net.ListRpcResponse)
}

void ListRpcResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRpcResponse::~ListRpcResponse() {
  // @@protoc_insertion_point(destructor:muduo.net.ListRpcResponse)
  SharedDtor();
}

void ListRpcResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRpcResponse_descriptor_;
}

const ListRpcResponse& ListRpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcservice_2eproto();
  return *default_instance_;
}

ListRpcResponse* ListRpcResponse::default_instance_ = NULL;

ListRpcResponse* ListRpcResponse::New() const {
  return new ListRpcResponse;
}

void ListRpcResponse::Clear() {
  error_ = 0;
  service_name_.Clear();
  method_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.ListRpcResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .muduo.net.ErrorCode error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::muduo::net::ErrorCode_IsValid(value)) {
            set_error(static_cast< ::muduo::net::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }

      // repeated string service_name = 2;
      case 2: {
        if (tag == 18) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name(this->service_name_size() - 1).data(),
            this->service_name(this->service_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        if (input->ExpectTag(26)) goto parse_method_name;
        break;
      }

      // repeated string method_name = 3;
      case 3: {
        if (tag == 26) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name(this->method_name_size() - 1).data(),
            this->method_name(this->method_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.ListRpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.ListRpcResponse)
  return false;
#undef DO_
}

void ListRpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.ListRpcResponse)
  // required .muduo.net.ErrorCode error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // repeated string service_name = 2;
  for (int i = 0; i < this->service_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->service_name(i).data(), this->service_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_name(i), output);
  }

  // repeated string method_name = 3;
  for (int i = 0; i < this->method_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->method_name(i).data(), this->method_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "method_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.ListRpcResponse)
}

::google::protobuf::uint8* ListRpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.ListRpcResponse)
  // required .muduo.net.ErrorCode error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // repeated string service_name = 2;
  for (int i = 0; i < this->service_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name(i).data(), this->service_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->service_name(i), target);
  }

  // repeated string method_name = 3;
  for (int i = 0; i < this->method_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name(i).data(), this->method_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->method_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.ListRpcResponse)
  return target;
}

int ListRpcResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .muduo.net.ErrorCode error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated string service_name = 2;
  total_size += 1 * this->service_name_size();
  for (int i = 0; i < this->service_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->service_name(i));
  }

  // repeated string method_name = 3;
  total_size += 1 * this->method_name_size();
  for (int i = 0; i < this->method_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->method_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRpcResponse::MergeFrom(const ListRpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  service_name_.MergeFrom(from.service_name_);
  method_name_.MergeFrom(from.method_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpcResponse::CopyFrom(const ListRpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListRpcResponse::Swap(ListRpcResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    service_name_.Swap(&other->service_name_);
    method_name_.Swap(&other->method_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRpcResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRpcResponse_descriptor_;
  metadata.reflection = ListRpcResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceRequest::kServiceNameFieldNumber;
#endif  // !_MSC_VER

GetServiceRequest::GetServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.GetServiceRequest)
}

void GetServiceRequest::InitAsDefaultInstance() {
}

GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:muduo.net.GetServiceRequest)
}

void GetServiceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:muduo.net.GetServiceRequest)
  SharedDtor();
}

void GetServiceRequest::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void GetServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceRequest_descriptor_;
}

const GetServiceRequest& GetServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcservice_2eproto();
  return *default_instance_;
}

GetServiceRequest* GetServiceRequest::default_instance_ = NULL;

GetServiceRequest* GetServiceRequest::New() const {
  return new GetServiceRequest;
}

void GetServiceRequest::Clear() {
  if (has_service_name()) {
    if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      service_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.GetServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.GetServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.GetServiceRequest)
  return false;
#undef DO_
}

void GetServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.GetServiceRequest)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.GetServiceRequest)
}

::google::protobuf::uint8* GetServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.GetServiceRequest)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.GetServiceRequest)
  return target;
}

int GetServiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceRequest::MergeFrom(const GetServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetServiceRequest::Swap(GetServiceRequest* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceRequest_descriptor_;
  metadata.reflection = GetServiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServiceResponse::kErrorFieldNumber;
const int GetServiceResponse::kProtoFileFieldNumber;
const int GetServiceResponse::kProtoFileNameFieldNumber;
#endif  // !_MSC_VER

GetServiceResponse::GetServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.GetServiceResponse)
}

void GetServiceResponse::InitAsDefaultInstance() {
}

GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:muduo.net.GetServiceResponse)
}

void GetServiceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:muduo.net.GetServiceResponse)
  SharedDtor();
}

void GetServiceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServiceResponse_descriptor_;
}

const GetServiceResponse& GetServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpcservice_2eproto();
  return *default_instance_;
}

GetServiceResponse* GetServiceResponse::default_instance_ = NULL;

GetServiceResponse* GetServiceResponse::New() const {
  return new GetServiceResponse;
}

void GetServiceResponse::Clear() {
  error_ = 0;
  proto_file_.Clear();
  proto_file_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.GetServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .muduo.net.ErrorCode error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::muduo::net::ErrorCode_IsValid(value)) {
            set_error(static_cast< ::muduo::net::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proto_file;
        break;
      }

      // repeated string proto_file = 2;
      case 2: {
        if (tag == 18) {
         parse_proto_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file(this->proto_file_size() - 1).data(),
            this->proto_file(this->proto_file_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proto_file;
        if (input->ExpectTag(26)) goto parse_proto_file_name;
        break;
      }

      // repeated string proto_file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_proto_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file_name(this->proto_file_name_size() - 1).data(),
            this->proto_file_name(this->proto_file_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proto_file_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.GetServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.GetServiceResponse)
  return false;
#undef DO_
}

void GetServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.GetServiceResponse)
  // required .muduo.net.ErrorCode error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // repeated string proto_file = 2;
  for (int i = 0; i < this->proto_file_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->proto_file(i).data(), this->proto_file(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "proto_file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->proto_file(i), output);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0; i < this->proto_file_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->proto_file_name(i).data(), this->proto_file_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "proto_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proto_file_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.GetServiceResponse)
}

::google::protobuf::uint8* GetServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.GetServiceResponse)
  // required .muduo.net.ErrorCode error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // repeated string proto_file = 2;
  for (int i = 0; i < this->proto_file_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file(i).data(), this->proto_file(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->proto_file(i), target);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0; i < this->proto_file_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file_name(i).data(), this->proto_file_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_file_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->proto_file_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.GetServiceResponse)
  return target;
}

int GetServiceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .muduo.net.ErrorCode error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated string proto_file = 2;
  total_size += 1 * this->proto_file_size();
  for (int i = 0; i < this->proto_file_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto_file(i));
  }

  // repeated string proto_file_name = 3;
  total_size += 1 * this->proto_file_name_size();
  for (int i = 0; i < this->proto_file_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto_file_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServiceResponse::MergeFrom(const GetServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  proto_file_.MergeFrom(from.proto_file_);
  proto_file_name_.MergeFrom(from.proto_file_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetServiceResponse::Swap(GetServiceResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    proto_file_.Swap(&other->proto_file_);
    proto_file_name_.Swap(&other->proto_file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServiceResponse_descriptor_;
  metadata.reflection = GetServiceResponse_reflection_;
  return metadata;
}


// ===================================================================

RpcService::~RpcService() {}

static const ::google::protobuf::ServiceDescriptor* RpcService_descriptor_ = NULL;

const ::google::protobuf::ServiceDescriptor* RpcService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  if (RpcService_descriptor_ == NULL)
    RpcService_descriptor_ = ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
        "rpcservice.proto")->service(0);
  return RpcService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::listRpc(const ::muduo::net::ListRpcRequestPtr&,
                         const ::muduo::net::ListRpcResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void RpcService::getService(const ::muduo::net::GetServiceRequestPtr&,
                         const ::muduo::net::GetServiceResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void RpcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::MessagePtr& request,
                             const ::google::protobuf::Message* responsePrototype,
                             const ::muduo::net::RpcDoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), RpcService_descriptor_);
  switch(method->index()) {
    case 0:
      listRpc(::google::protobuf::down_pointer_cast< ::muduo::net::ListRpcRequest>(request),
             ::google::protobuf::down_cast<const ::muduo::net::ListRpcResponse*>(responsePrototype),
             done);
      break;
    case 1:
      getService(::google::protobuf::down_pointer_cast< ::muduo::net::GetServiceRequest>(request),
             ::google::protobuf::down_cast<const ::muduo::net::GetServiceResponse*>(responsePrototype),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RpcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::muduo::net::ListRpcRequest::default_instance();
    case 1:
      return ::muduo::net::GetServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RpcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::muduo::net::ListRpcResponse::default_instance();
    case 1:
      return ::muduo::net::GetServiceResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

RpcService_Stub::RpcService_Stub(::muduo::net::RpcChannel* channel__)
  : channel_(channel__), owns_channel_(false) {}
RpcService_Stub::~RpcService_Stub() {
}

void RpcService_Stub::listRpc(const ::muduo::net::ListRpcRequest& request,
                              const ::std::function<void(const ::muduo::net::ListRpcResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(0),
                       request, &::muduo::net::ListRpcResponse::default_instance(), done);
}
void RpcService_Stub::getService(const ::muduo::net::GetServiceRequest& request,
                              const ::std::function<void(const ::muduo::net::GetServiceResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(1),
                       request, &::muduo::net::GetServiceResponse::default_instance(), done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace muduo

// @@protoc_insertion_point(global_scope)
