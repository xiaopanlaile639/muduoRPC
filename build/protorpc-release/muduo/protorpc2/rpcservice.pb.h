// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#ifndef PROTOBUF_rpcservice_2eproto__INCLUDED
#define PROTOBUF_rpcservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <muduo/net/protorpc/rpc.pb.h>
#include <muduo/protorpc2/service.h>
#include <memory>
// @@protoc_insertion_point(includes)

namespace muduo {
namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcservice_2eproto();
void protobuf_AssignDesc_rpcservice_2eproto();
void protobuf_ShutdownFile_rpcservice_2eproto();

class ListRpcRequest;
class ListRpcResponse;
class GetServiceRequest;
class GetServiceResponse;

// ===================================================================

class ListRpcRequest : public ::google::protobuf::Message {
 public:
  ListRpcRequest();
  virtual ~ListRpcRequest();

  ListRpcRequest(const ListRpcRequest& from);

  inline ListRpcRequest& operator=(const ListRpcRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRpcRequest& default_instance();

  void Swap(ListRpcRequest* other);

  // implements Message ----------------------------------------------

  ListRpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRpcRequest& from);
  void MergeFrom(const ListRpcRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // optional bool list_method = 2;
  inline bool has_list_method() const;
  inline void clear_list_method();
  static const int kListMethodFieldNumber = 2;
  inline bool list_method() const;
  inline void set_list_method(bool value);

  // @@protoc_insertion_point(class_scope:muduo.net.ListRpcRequest)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_list_method();
  inline void clear_has_list_method();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  bool list_method_;
  friend void  protobuf_AddDesc_rpcservice_2eproto();
  friend void protobuf_AssignDesc_rpcservice_2eproto();
  friend void protobuf_ShutdownFile_rpcservice_2eproto();

  void InitAsDefaultInstance();
  static ListRpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class ListRpcResponse : public ::google::protobuf::Message {
 public:
  ListRpcResponse();
  virtual ~ListRpcResponse();

  ListRpcResponse(const ListRpcResponse& from);

  inline ListRpcResponse& operator=(const ListRpcResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRpcResponse& default_instance();

  void Swap(ListRpcResponse* other);

  // implements Message ----------------------------------------------

  ListRpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRpcResponse& from);
  void MergeFrom(const ListRpcResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .muduo.net.ErrorCode error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::muduo::net::ErrorCode error() const;
  inline void set_error(::muduo::net::ErrorCode value);

  // repeated string service_name = 2;
  inline int service_name_size() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& service_name(int index) const;
  inline ::std::string* mutable_service_name(int index);
  inline void set_service_name(int index, const ::std::string& value);
  inline void set_service_name(int index, const char* value);
  inline void set_service_name(int index, const char* value, size_t size);
  inline ::std::string* add_service_name();
  inline void add_service_name(const ::std::string& value);
  inline void add_service_name(const char* value);
  inline void add_service_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& service_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service_name();

  // repeated string method_name = 3;
  inline int method_name_size() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 3;
  inline const ::std::string& method_name(int index) const;
  inline ::std::string* mutable_method_name(int index);
  inline void set_method_name(int index, const ::std::string& value);
  inline void set_method_name(int index, const char* value);
  inline void set_method_name(int index, const char* value, size_t size);
  inline ::std::string* add_method_name();
  inline void add_method_name(const ::std::string& value);
  inline void add_method_name(const char* value);
  inline void add_method_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& method_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_method_name();

  // @@protoc_insertion_point(class_scope:muduo.net.ListRpcResponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> service_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> method_name_;
  int error_;
  friend void  protobuf_AddDesc_rpcservice_2eproto();
  friend void protobuf_AssignDesc_rpcservice_2eproto();
  friend void protobuf_ShutdownFile_rpcservice_2eproto();

  void InitAsDefaultInstance();
  static ListRpcResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetServiceRequest : public ::google::protobuf::Message {
 public:
  GetServiceRequest();
  virtual ~GetServiceRequest();

  GetServiceRequest(const GetServiceRequest& from);

  inline GetServiceRequest& operator=(const GetServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceRequest& default_instance();

  void Swap(GetServiceRequest* other);

  // implements Message ----------------------------------------------

  GetServiceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceRequest& from);
  void MergeFrom(const GetServiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:muduo.net.GetServiceRequest)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  friend void  protobuf_AddDesc_rpcservice_2eproto();
  friend void protobuf_AssignDesc_rpcservice_2eproto();
  friend void protobuf_ShutdownFile_rpcservice_2eproto();

  void InitAsDefaultInstance();
  static GetServiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetServiceResponse : public ::google::protobuf::Message {
 public:
  GetServiceResponse();
  virtual ~GetServiceResponse();

  GetServiceResponse(const GetServiceResponse& from);

  inline GetServiceResponse& operator=(const GetServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceResponse& default_instance();

  void Swap(GetServiceResponse* other);

  // implements Message ----------------------------------------------

  GetServiceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServiceResponse& from);
  void MergeFrom(const GetServiceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .muduo.net.ErrorCode error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::muduo::net::ErrorCode error() const;
  inline void set_error(::muduo::net::ErrorCode value);

  // repeated string proto_file = 2;
  inline int proto_file_size() const;
  inline void clear_proto_file();
  static const int kProtoFileFieldNumber = 2;
  inline const ::std::string& proto_file(int index) const;
  inline ::std::string* mutable_proto_file(int index);
  inline void set_proto_file(int index, const ::std::string& value);
  inline void set_proto_file(int index, const char* value);
  inline void set_proto_file(int index, const char* value, size_t size);
  inline ::std::string* add_proto_file();
  inline void add_proto_file(const ::std::string& value);
  inline void add_proto_file(const char* value);
  inline void add_proto_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& proto_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_proto_file();

  // repeated string proto_file_name = 3;
  inline int proto_file_name_size() const;
  inline void clear_proto_file_name();
  static const int kProtoFileNameFieldNumber = 3;
  inline const ::std::string& proto_file_name(int index) const;
  inline ::std::string* mutable_proto_file_name(int index);
  inline void set_proto_file_name(int index, const ::std::string& value);
  inline void set_proto_file_name(int index, const char* value);
  inline void set_proto_file_name(int index, const char* value, size_t size);
  inline ::std::string* add_proto_file_name();
  inline void add_proto_file_name(const ::std::string& value);
  inline void add_proto_file_name(const char* value);
  inline void add_proto_file_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& proto_file_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_proto_file_name();

  // @@protoc_insertion_point(class_scope:muduo.net.GetServiceResponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> proto_file_;
  ::google::protobuf::RepeatedPtrField< ::std::string> proto_file_name_;
  int error_;
  friend void  protobuf_AddDesc_rpcservice_2eproto();
  friend void protobuf_AssignDesc_rpcservice_2eproto();
  friend void protobuf_ShutdownFile_rpcservice_2eproto();

  void InitAsDefaultInstance();
  static GetServiceResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ListRpcRequest

// optional string service_name = 1;
inline bool ListRpcRequest::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRpcRequest::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRpcRequest::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRpcRequest::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& ListRpcRequest::service_name() const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcRequest.service_name)
  return *service_name_;
}
inline void ListRpcRequest::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcRequest.service_name)
}
inline void ListRpcRequest::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.ListRpcRequest.service_name)
}
inline void ListRpcRequest::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.ListRpcRequest.service_name)
}
inline ::std::string* ListRpcRequest::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:muduo.net.ListRpcRequest.service_name)
  return service_name_;
}
inline ::std::string* ListRpcRequest::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListRpcRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:muduo.net.ListRpcRequest.service_name)
}

// optional bool list_method = 2;
inline bool ListRpcRequest::has_list_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListRpcRequest::set_has_list_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListRpcRequest::clear_has_list_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListRpcRequest::clear_list_method() {
  list_method_ = false;
  clear_has_list_method();
}
inline bool ListRpcRequest::list_method() const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcRequest.list_method)
  return list_method_;
}
inline void ListRpcRequest::set_list_method(bool value) {
  set_has_list_method();
  list_method_ = value;
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcRequest.list_method)
}

// -------------------------------------------------------------------

// ListRpcResponse

// required .muduo.net.ErrorCode error = 1;
inline bool ListRpcResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRpcResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRpcResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRpcResponse::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::muduo::net::ErrorCode ListRpcResponse::error() const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcResponse.error)
  return static_cast< ::muduo::net::ErrorCode >(error_);
}
inline void ListRpcResponse::set_error(::muduo::net::ErrorCode value) {
  assert(::muduo::net::ErrorCode_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.error)
}

// repeated string service_name = 2;
inline int ListRpcResponse::service_name_size() const {
  return service_name_.size();
}
inline void ListRpcResponse::clear_service_name() {
  service_name_.Clear();
}
inline const ::std::string& ListRpcResponse::service_name(int index) const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcResponse.service_name)
  return service_name_.Get(index);
}
inline ::std::string* ListRpcResponse::mutable_service_name(int index) {
  // @@protoc_insertion_point(field_mutable:muduo.net.ListRpcResponse.service_name)
  return service_name_.Mutable(index);
}
inline void ListRpcResponse::set_service_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.service_name)
  service_name_.Mutable(index)->assign(value);
}
inline void ListRpcResponse::set_service_name(int index, const char* value) {
  service_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, const char* value, size_t size) {
  service_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.ListRpcResponse.service_name)
}
inline ::std::string* ListRpcResponse::add_service_name() {
  return service_name_.Add();
}
inline void ListRpcResponse::add_service_name(const ::std::string& value) {
  service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const char* value) {
  service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const char* value, size_t size) {
  service_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muduo.net.ListRpcResponse.service_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListRpcResponse::service_name() const {
  // @@protoc_insertion_point(field_list:muduo.net.ListRpcResponse.service_name)
  return service_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListRpcResponse::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable_list:muduo.net.ListRpcResponse.service_name)
  return &service_name_;
}

// repeated string method_name = 3;
inline int ListRpcResponse::method_name_size() const {
  return method_name_.size();
}
inline void ListRpcResponse::clear_method_name() {
  method_name_.Clear();
}
inline const ::std::string& ListRpcResponse::method_name(int index) const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcResponse.method_name)
  return method_name_.Get(index);
}
inline ::std::string* ListRpcResponse::mutable_method_name(int index) {
  // @@protoc_insertion_point(field_mutable:muduo.net.ListRpcResponse.method_name)
  return method_name_.Mutable(index);
}
inline void ListRpcResponse::set_method_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.method_name)
  method_name_.Mutable(index)->assign(value);
}
inline void ListRpcResponse::set_method_name(int index, const char* value) {
  method_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, const char* value, size_t size) {
  method_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.ListRpcResponse.method_name)
}
inline ::std::string* ListRpcResponse::add_method_name() {
  return method_name_.Add();
}
inline void ListRpcResponse::add_method_name(const ::std::string& value) {
  method_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const char* value) {
  method_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const char* value, size_t size) {
  method_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muduo.net.ListRpcResponse.method_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListRpcResponse::method_name() const {
  // @@protoc_insertion_point(field_list:muduo.net.ListRpcResponse.method_name)
  return method_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListRpcResponse::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable_list:muduo.net.ListRpcResponse.method_name)
  return &method_name_;
}

// -------------------------------------------------------------------

// GetServiceRequest

// required string service_name = 1;
inline bool GetServiceRequest::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServiceRequest::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServiceRequest::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServiceRequest::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& GetServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceRequest.service_name)
  return *service_name_;
}
inline void GetServiceRequest::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceRequest.service_name)
}
inline void GetServiceRequest::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.GetServiceRequest.service_name)
}
inline void GetServiceRequest::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.GetServiceRequest.service_name)
}
inline ::std::string* GetServiceRequest::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:muduo.net.GetServiceRequest.service_name)
  return service_name_;
}
inline ::std::string* GetServiceRequest::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:muduo.net.GetServiceRequest.service_name)
}

// -------------------------------------------------------------------

// GetServiceResponse

// required .muduo.net.ErrorCode error = 1;
inline bool GetServiceResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServiceResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServiceResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServiceResponse::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::muduo::net::ErrorCode GetServiceResponse::error() const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceResponse.error)
  return static_cast< ::muduo::net::ErrorCode >(error_);
}
inline void GetServiceResponse::set_error(::muduo::net::ErrorCode value) {
  assert(::muduo::net::ErrorCode_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceResponse.error)
}

// repeated string proto_file = 2;
inline int GetServiceResponse::proto_file_size() const {
  return proto_file_.size();
}
inline void GetServiceResponse::clear_proto_file() {
  proto_file_.Clear();
}
inline const ::std::string& GetServiceResponse::proto_file(int index) const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceResponse.proto_file)
  return proto_file_.Get(index);
}
inline ::std::string* GetServiceResponse::mutable_proto_file(int index) {
  // @@protoc_insertion_point(field_mutable:muduo.net.GetServiceResponse.proto_file)
  return proto_file_.Mutable(index);
}
inline void GetServiceResponse::set_proto_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceResponse.proto_file)
  proto_file_.Mutable(index)->assign(value);
}
inline void GetServiceResponse::set_proto_file(int index, const char* value) {
  proto_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::set_proto_file(int index, const char* value, size_t size) {
  proto_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.GetServiceResponse.proto_file)
}
inline ::std::string* GetServiceResponse::add_proto_file() {
  return proto_file_.Add();
}
inline void GetServiceResponse::add_proto_file(const ::std::string& value) {
  proto_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muduo.net.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(const char* value) {
  proto_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muduo.net.GetServiceResponse.proto_file)
}
inline void GetServiceResponse::add_proto_file(const char* value, size_t size) {
  proto_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muduo.net.GetServiceResponse.proto_file)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetServiceResponse::proto_file() const {
  // @@protoc_insertion_point(field_list:muduo.net.GetServiceResponse.proto_file)
  return proto_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetServiceResponse::mutable_proto_file() {
  // @@protoc_insertion_point(field_mutable_list:muduo.net.GetServiceResponse.proto_file)
  return &proto_file_;
}

// repeated string proto_file_name = 3;
inline int GetServiceResponse::proto_file_name_size() const {
  return proto_file_name_.size();
}
inline void GetServiceResponse::clear_proto_file_name() {
  proto_file_name_.Clear();
}
inline const ::std::string& GetServiceResponse::proto_file_name(int index) const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceResponse.proto_file_name)
  return proto_file_name_.Get(index);
}
inline ::std::string* GetServiceResponse::mutable_proto_file_name(int index) {
  // @@protoc_insertion_point(field_mutable:muduo.net.GetServiceResponse.proto_file_name)
  return proto_file_name_.Mutable(index);
}
inline void GetServiceResponse::set_proto_file_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceResponse.proto_file_name)
  proto_file_name_.Mutable(index)->assign(value);
}
inline void GetServiceResponse::set_proto_file_name(int index, const char* value) {
  proto_file_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::set_proto_file_name(int index, const char* value, size_t size) {
  proto_file_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.GetServiceResponse.proto_file_name)
}
inline ::std::string* GetServiceResponse::add_proto_file_name() {
  return proto_file_name_.Add();
}
inline void GetServiceResponse::add_proto_file_name(const ::std::string& value) {
  proto_file_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muduo.net.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(const char* value) {
  proto_file_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muduo.net.GetServiceResponse.proto_file_name)
}
inline void GetServiceResponse::add_proto_file_name(const char* value, size_t size) {
  proto_file_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muduo.net.GetServiceResponse.proto_file_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetServiceResponse::proto_file_name() const {
  // @@protoc_insertion_point(field_list:muduo.net.GetServiceResponse.proto_file_name)
  return proto_file_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetServiceResponse::mutable_proto_file_name() {
  // @@protoc_insertion_point(field_mutable_list:muduo.net.GetServiceResponse.proto_file_name)
  return &proto_file_name_;
}



// ===================================================================

typedef ::std::shared_ptr<ListRpcRequest> ListRpcRequestPtr;
typedef ::std::shared_ptr<ListRpcResponse> ListRpcResponsePtr;
typedef ::std::shared_ptr<GetServiceRequest> GetServiceRequestPtr;
typedef ::std::shared_ptr<GetServiceResponse> GetServiceResponsePtr;

// -------------------------------------------------------------------

class RpcService_Stub;

class RpcService : public ::muduo::net::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RpcService() {};
 public:
  virtual ~RpcService();

  typedef RpcService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void listRpc(const ::muduo::net::ListRpcRequestPtr& request,
                       const ::muduo::net::ListRpcResponse* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void getService(const ::muduo::net::GetServiceRequestPtr& request,
                       const ::muduo::net::GetServiceResponse* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::MessagePtr& request,
                  const ::google::protobuf::Message* responsePrototype,
                  const ::muduo::net::RpcDoneCallback& done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService);
};

class RpcService_Stub : public RpcService {
 public:
  RpcService_Stub(::muduo::net::RpcChannel* channel);
  ~RpcService_Stub();

  inline ::muduo::net::RpcChannel* channel() { return channel_; }

  // implements RpcService ------------------------------------------

  using RpcService::listRpc;
  virtual void listRpc(const ::muduo::net::ListRpcRequest& request,
                       const ::std::function<void(const ::muduo::net::ListRpcResponsePtr&)>& done);
  using RpcService::getService;
  virtual void getService(const ::muduo::net::GetServiceRequest& request,
                       const ::std::function<void(const ::muduo::net::GetServiceResponsePtr&)>& done);
 private:
  ::muduo::net::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcService_Stub);
};

// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace muduo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcservice_2eproto__INCLUDED
