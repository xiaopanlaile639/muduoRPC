// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace collect {

namespace {

const ::google::protobuf::Descriptor* ThreadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessInfo_Basic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessInfo_Basic_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_Basic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_Basic_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_Performance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_Performance_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_Cpu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_Cpu_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SnapshotRequest_Level_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_collect_2eproto() {
  protobuf_AddDesc_collect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "collect.proto");
  GOOGLE_CHECK(file != NULL);
  ThreadInfo_descriptor_ = file->message_type(0);
  static const int ThreadInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, user_cpu_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, sys_cpu_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, last_processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, wait_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, starttime_),
  };
  ThreadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadInfo_descriptor_,
      ThreadInfo::default_instance_,
      ThreadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadInfo));
  ProcessInfo_descriptor_ = file->message_type(1);
  static const int ProcessInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, user_cpu_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, sys_cpu_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, last_processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, wait_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, vsize_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, rss_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, minor_page_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, major_page_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, threads_),
  };
  ProcessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessInfo_descriptor_,
      ProcessInfo::default_instance_,
      ProcessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessInfo));
  ProcessInfo_Basic_descriptor_ = ProcessInfo_descriptor_->nested_type(0);
  static const int ProcessInfo_Basic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, euid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, ppid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, cmdline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, executable_),
  };
  ProcessInfo_Basic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessInfo_Basic_descriptor_,
      ProcessInfo_Basic::default_instance_,
      ProcessInfo_Basic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessInfo_Basic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessInfo_Basic));
  SystemInfo_descriptor_ = file->message_type(2);
  static const int SystemInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, performance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, all_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, cpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, muduo_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, user_cpu_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, sys_cpu_ms_),
  };
  SystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_descriptor_,
      SystemInfo::default_instance_,
      SystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo));
  SystemInfo_Basic_descriptor_ = SystemInfo_descriptor_->nested_type(0);
  static const int SystemInfo_Basic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Basic, kernel_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Basic, kernel_cmdline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Basic, cpuinfo_),
  };
  SystemInfo_Basic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_Basic_descriptor_,
      SystemInfo_Basic::default_instance_,
      SystemInfo_Basic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Basic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Basic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo_Basic));
  SystemInfo_Performance_descriptor_ = SystemInfo_descriptor_->nested_type(1);
  static const int SystemInfo_Performance_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, loadavg_1m_milli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, loadavg_5m_milli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, loadavg_15m_milli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, running_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, total_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, last_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, boot_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, context_switches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, processes_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, processes_running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, processes_blocked_),
  };
  SystemInfo_Performance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_Performance_descriptor_,
      SystemInfo_Performance::default_instance_,
      SystemInfo_Performance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Performance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo_Performance));
  SystemInfo_Cpu_descriptor_ = SystemInfo_descriptor_->nested_type(2);
  static const int SystemInfo_Cpu_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, user_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, nice_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, sys_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, idle_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, iowait_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, irq_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, softirq_ms_),
  };
  SystemInfo_Cpu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_Cpu_descriptor_,
      SystemInfo_Cpu::default_instance_,
      SystemInfo_Cpu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Cpu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo_Cpu));
  SystemInfo_Memory_descriptor_ = SystemInfo_descriptor_->nested_type(3);
  static const int SystemInfo_Memory_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, total_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, free_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, buffers_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, cached_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, swap_total_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, swap_free_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, swap_cached_kb_),
  };
  SystemInfo_Memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_Memory_descriptor_,
      SystemInfo_Memory::default_instance_,
      SystemInfo_Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_Memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo_Memory));
  SnapshotRequest_descriptor_ = file->message_type(3);
  static const int SnapshotRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, level_),
  };
  SnapshotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapshotRequest_descriptor_,
      SnapshotRequest::default_instance_,
      SnapshotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapshotRequest));
  SnapshotRequest_Level_descriptor_ = SnapshotRequest_descriptor_->enum_type(0);
  Result_descriptor_ = file->message_type(4);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, succeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, message_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_collect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadInfo_descriptor_, &ThreadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessInfo_descriptor_, &ProcessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessInfo_Basic_descriptor_, &ProcessInfo_Basic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_descriptor_, &SystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_Basic_descriptor_, &SystemInfo_Basic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_Performance_descriptor_, &SystemInfo_Performance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_Cpu_descriptor_, &SystemInfo_Cpu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_Memory_descriptor_, &SystemInfo_Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapshotRequest_descriptor_, &SnapshotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_collect_2eproto() {
  delete ThreadInfo::default_instance_;
  delete ThreadInfo_reflection_;
  delete ProcessInfo::default_instance_;
  delete ProcessInfo_reflection_;
  delete ProcessInfo_Basic::default_instance_;
  delete ProcessInfo_Basic_reflection_;
  delete SystemInfo::default_instance_;
  delete SystemInfo_reflection_;
  delete SystemInfo_Basic::default_instance_;
  delete SystemInfo_Basic_reflection_;
  delete SystemInfo_Performance::default_instance_;
  delete SystemInfo_Performance_reflection_;
  delete SystemInfo_Cpu::default_instance_;
  delete SystemInfo_Cpu_reflection_;
  delete SystemInfo_Memory::default_instance_;
  delete SystemInfo_Memory_reflection_;
  delete SnapshotRequest::default_instance_;
  delete SnapshotRequest_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_collect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc2::protobuf_AddDesc_muduo_2fprotorpc2_2frpc2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcollect.proto\022\007collect\032\032muduo/protorpc"
    "2/rpc2.proto\"\221\001\n\nThreadInfo\022\013\n\003tid\030\001 \001(\005"
    "\022\023\n\013user_cpu_ms\030\003 \001(\003\022\022\n\nsys_cpu_ms\030\004 \001("
    "\003\022\026\n\016last_processor\030\005 \001(\005\022\024\n\014wait_channe"
    "l\030\006 \001(\003\022\014\n\004name\030\007 \001(\t\022\021\n\tstarttime\030\010 \001(\003"
    "\"\266\003\n\013ProcessInfo\022\013\n\003pid\030\001 \001(\005\022)\n\005basic\030\002"
    " \001(\0132\032.collect.ProcessInfo.Basic\022\023\n\013user"
    "_cpu_ms\030\003 \001(\003\022\022\n\nsys_cpu_ms\030\004 \001(\003\022\026\n\016las"
    "t_processor\030\005 \001(\005\022\024\n\014wait_channel\030\006 \001(\005\022"
    "\020\n\010vsize_kb\030\007 \001(\003\022\016\n\006rss_kb\030\010 \001(\003\022\r\n\005sta"
    "te\030\t \001(\005\022\031\n\021minor_page_faults\030\n \001(\003\022\031\n\021m"
    "ajor_page_faults\030\013 \001(\003\022\023\n\013num_threads\030\014 "
    "\001(\005\022$\n\007threads\030\r \003(\0132\023.collect.ThreadInf"
    "o\032v\n\005Basic\022\013\n\003uid\030\001 \001(\005\022\014\n\004euid\030\002 \001(\005\022\014\n"
    "\004ppid\030\003 \001(\005\022\021\n\tstarttime\030\004 \001(\003\022\014\n\004name\030\005"
    " \001(\t\022\017\n\007cmdline\030\006 \003(\t\022\022\n\nexecutable\030\007 \001("
    "\t\"\324\007\n\nSystemInfo\022(\n\005basic\030\001 \001(\0132\031.collec"
    "t.SystemInfo.Basic\0224\n\013performance\030\002 \001(\0132"
    "\037.collect.SystemInfo.Performance\022(\n\007all_"
    "cpu\030\003 \001(\0132\027.collect.SystemInfo.Cpu\022%\n\004cp"
    "us\030\004 \003(\0132\027.collect.SystemInfo.Cpu\022\027\n\017mud"
    "uo_timestamp\030\005 \001(\006\022*\n\006memory\030\010 \001(\0132\032.col"
    "lect.SystemInfo.Memory\022\'\n\tprocesses\030\016 \003("
    "\0132\024.collect.ProcessInfo\022\023\n\013user_cpu_ms\030\006"
    " \001(\003\022\022\n\nsys_cpu_ms\030\007 \001(\003\032H\n\005Basic\022\026\n\016ker"
    "nel_version\030\001 \001(\t\022\026\n\016kernel_cmdline\030\002 \001("
    "\t\022\017\n\007cpuinfo\030\003 \001(\t\032\230\002\n\013Performance\022\030\n\020lo"
    "adavg_1m_milli\030\002 \001(\005\022\030\n\020loadavg_5m_milli"
    "\030\003 \001(\005\022\031\n\021loadavg_15m_milli\030\004 \001(\005\022\025\n\rrun"
    "ning_tasks\030\005 \001(\005\022\023\n\013total_tasks\030\006 \001(\005\022\020\n"
    "\010last_pid\030\007 \001(\005\022\021\n\tboot_time\030\t \001(\003\022\030\n\020co"
    "ntext_switches\030\n \001(\003\022\031\n\021processes_create"
    "d\030\013 \001(\003\022\031\n\021processes_running\030\014 \001(\005\022\031\n\021pr"
    "ocesses_blocked\030\r \001(\005\032\177\n\003Cpu\022\017\n\007user_ms\030"
    "\001 \001(\003\022\017\n\007nice_ms\030\002 \001(\003\022\016\n\006sys_ms\030\003 \001(\003\022\017"
    "\n\007idle_ms\030\004 \001(\003\022\021\n\tiowait_ms\030\005 \001(\003\022\016\n\006ir"
    "q_ms\030\006 \001(\003\022\022\n\nsoftirq_ms\030\007 \001(\003\032\227\001\n\006Memor"
    "y\022\020\n\010total_kb\030\001 \001(\003\022\017\n\007free_kb\030\002 \001(\003\022\022\n\n"
    "buffers_kb\030\003 \001(\003\022\021\n\tcached_kb\030\004 \001(\003\022\025\n\rs"
    "wap_total_kb\030\005 \001(\003\022\024\n\014swap_free_kb\030\006 \001(\003"
    "\022\026\n\016swap_cached_kb\030\007 \001(\003\"\307\001\n\017SnapshotReq"
    "uest\022>\n\005level\030\001 \001(\0162\036.collect.SnapshotRe"
    "quest.Level:\017kSystemInfoOnly\"t\n\005Level\022\023\n"
    "\017kSystemInfoOnly\020\000\022\033\n\027kSystemInfoAndProc"
    "esses\020\001\022\031\n\025kSystemInfoAndThreads\020\002\022\036\n\032kS"
    "ystemInfoInitialSnapshot\020\003\"*\n\006Result\022\017\n\007"
    "succeed\030\001 \002(\010\022\017\n\007message\030\002 \001(\t2\227\002\n\016Colle"
    "ctService\022<\n\013getSnapshot\022\030.collect.Snaps"
    "hotRequest\032\023.collect.SystemInfo\022%\n\tflush"
    "File\022\013.rpc2.Empty\032\013.rpc2.Empty\022(\n\010rollFi"
    "le\022\013.rpc2.Empty\032\017.collect.Result\022\'\n\007vers"
    "ion\022\013.rpc2.Empty\032\017.collect.Result\022$\n\004qui"
    "t\022\013.rpc2.Empty\032\017.collect.Result\022\'\n\007resta"
    "rt\022\013.rpc2.Empty\032\017.collect.Result", 2152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collect.proto", &protobuf_RegisterTypes);
  ThreadInfo::default_instance_ = new ThreadInfo();
  ProcessInfo::default_instance_ = new ProcessInfo();
  ProcessInfo_Basic::default_instance_ = new ProcessInfo_Basic();
  SystemInfo::default_instance_ = new SystemInfo();
  SystemInfo_Basic::default_instance_ = new SystemInfo_Basic();
  SystemInfo_Performance::default_instance_ = new SystemInfo_Performance();
  SystemInfo_Cpu::default_instance_ = new SystemInfo_Cpu();
  SystemInfo_Memory::default_instance_ = new SystemInfo_Memory();
  SnapshotRequest::default_instance_ = new SnapshotRequest();
  Result::default_instance_ = new Result();
  ThreadInfo::default_instance_->InitAsDefaultInstance();
  ProcessInfo::default_instance_->InitAsDefaultInstance();
  ProcessInfo_Basic::default_instance_->InitAsDefaultInstance();
  SystemInfo::default_instance_->InitAsDefaultInstance();
  SystemInfo_Basic::default_instance_->InitAsDefaultInstance();
  SystemInfo_Performance::default_instance_->InitAsDefaultInstance();
  SystemInfo_Cpu::default_instance_->InitAsDefaultInstance();
  SystemInfo_Memory::default_instance_->InitAsDefaultInstance();
  SnapshotRequest::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_collect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_collect_2eproto {
  StaticDescriptorInitializer_collect_2eproto() {
    protobuf_AddDesc_collect_2eproto();
  }
} static_descriptor_initializer_collect_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ThreadInfo::kTidFieldNumber;
const int ThreadInfo::kUserCpuMsFieldNumber;
const int ThreadInfo::kSysCpuMsFieldNumber;
const int ThreadInfo::kLastProcessorFieldNumber;
const int ThreadInfo::kWaitChannelFieldNumber;
const int ThreadInfo::kNameFieldNumber;
const int ThreadInfo::kStarttimeFieldNumber;
#endif  // !_MSC_VER

ThreadInfo::ThreadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.ThreadInfo)
}

void ThreadInfo::InitAsDefaultInstance() {
}

ThreadInfo::ThreadInfo(const ThreadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.ThreadInfo)
}

void ThreadInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tid_ = 0;
  user_cpu_ms_ = GOOGLE_LONGLONG(0);
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  last_processor_ = 0;
  wait_channel_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadInfo::~ThreadInfo() {
  // @@protoc_insertion_point(destructor:collect.ThreadInfo)
  SharedDtor();
}

void ThreadInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ThreadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadInfo_descriptor_;
}

const ThreadInfo& ThreadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

ThreadInfo* ThreadInfo::default_instance_ = NULL;

ThreadInfo* ThreadInfo::New() const {
  return new ThreadInfo;
}

void ThreadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ThreadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_cpu_ms_, wait_channel_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    starttime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.ThreadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_cpu_ms;
        break;
      }

      // optional int64 user_cpu_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_user_cpu_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_cpu_ms_)));
          set_has_user_cpu_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sys_cpu_ms;
        break;
      }

      // optional int64 sys_cpu_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_sys_cpu_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_cpu_ms_)));
          set_has_sys_cpu_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_processor;
        break;
      }

      // optional int32 last_processor = 5;
      case 5: {
        if (tag == 40) {
         parse_last_processor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_processor_)));
          set_has_last_processor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wait_channel;
        break;
      }

      // optional int64 wait_channel = 6;
      case 6: {
        if (tag == 48) {
         parse_wait_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wait_channel_)));
          set_has_wait_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starttime;
        break;
      }

      // optional int64 starttime = 8;
      case 8: {
        if (tag == 64) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.ThreadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.ThreadInfo)
  return false;
#undef DO_
}

void ThreadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.ThreadInfo)
  // optional int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int64 user_cpu_ms = 3;
  if (has_user_cpu_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_cpu_ms(), output);
  }

  // optional int64 sys_cpu_ms = 4;
  if (has_sys_cpu_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sys_cpu_ms(), output);
  }

  // optional int32 last_processor = 5;
  if (has_last_processor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->last_processor(), output);
  }

  // optional int64 wait_channel = 6;
  if (has_wait_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->wait_channel(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional int64 starttime = 8;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.ThreadInfo)
}

::google::protobuf::uint8* ThreadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.ThreadInfo)
  // optional int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int64 user_cpu_ms = 3;
  if (has_user_cpu_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_cpu_ms(), target);
  }

  // optional int64 sys_cpu_ms = 4;
  if (has_sys_cpu_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sys_cpu_ms(), target);
  }

  // optional int32 last_processor = 5;
  if (has_last_processor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->last_processor(), target);
  }

  // optional int64 wait_channel = 6;
  if (has_wait_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->wait_channel(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional int64 starttime = 8;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.ThreadInfo)
  return target;
}

int ThreadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int64 user_cpu_ms = 3;
    if (has_user_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_cpu_ms());
    }

    // optional int64 sys_cpu_ms = 4;
    if (has_sys_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_cpu_ms());
    }

    // optional int32 last_processor = 5;
    if (has_last_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_processor());
    }

    // optional int64 wait_channel = 6;
    if (has_wait_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wait_channel());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 starttime = 8;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadInfo::MergeFrom(const ThreadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_user_cpu_ms()) {
      set_user_cpu_ms(from.user_cpu_ms());
    }
    if (from.has_sys_cpu_ms()) {
      set_sys_cpu_ms(from.sys_cpu_ms());
    }
    if (from.has_last_processor()) {
      set_last_processor(from.last_processor());
    }
    if (from.has_wait_channel()) {
      set_wait_channel(from.wait_channel());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadInfo::CopyFrom(const ThreadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadInfo::IsInitialized() const {

  return true;
}

void ThreadInfo::Swap(ThreadInfo* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(user_cpu_ms_, other->user_cpu_ms_);
    std::swap(sys_cpu_ms_, other->sys_cpu_ms_);
    std::swap(last_processor_, other->last_processor_);
    std::swap(wait_channel_, other->wait_channel_);
    std::swap(name_, other->name_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadInfo_descriptor_;
  metadata.reflection = ThreadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessInfo_Basic::kUidFieldNumber;
const int ProcessInfo_Basic::kEuidFieldNumber;
const int ProcessInfo_Basic::kPpidFieldNumber;
const int ProcessInfo_Basic::kStarttimeFieldNumber;
const int ProcessInfo_Basic::kNameFieldNumber;
const int ProcessInfo_Basic::kCmdlineFieldNumber;
const int ProcessInfo_Basic::kExecutableFieldNumber;
#endif  // !_MSC_VER

ProcessInfo_Basic::ProcessInfo_Basic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.ProcessInfo.Basic)
}

void ProcessInfo_Basic::InitAsDefaultInstance() {
}

ProcessInfo_Basic::ProcessInfo_Basic(const ProcessInfo_Basic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.ProcessInfo.Basic)
}

void ProcessInfo_Basic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  euid_ = 0;
  ppid_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessInfo_Basic::~ProcessInfo_Basic() {
  // @@protoc_insertion_point(destructor:collect.ProcessInfo.Basic)
  SharedDtor();
}

void ProcessInfo_Basic::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (executable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete executable_;
  }
  if (this != default_instance_) {
  }
}

void ProcessInfo_Basic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInfo_Basic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessInfo_Basic_descriptor_;
}

const ProcessInfo_Basic& ProcessInfo_Basic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

ProcessInfo_Basic* ProcessInfo_Basic::default_instance_ = NULL;

ProcessInfo_Basic* ProcessInfo_Basic::New() const {
  return new ProcessInfo_Basic;
}

void ProcessInfo_Basic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessInfo_Basic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(uid_, starttime_);
    ppid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_executable()) {
      if (executable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        executable_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cmdline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessInfo_Basic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.ProcessInfo.Basic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_euid;
        break;
      }

      // optional int32 euid = 2;
      case 2: {
        if (tag == 16) {
         parse_euid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &euid_)));
          set_has_euid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ppid;
        break;
      }

      // optional int32 ppid = 3;
      case 3: {
        if (tag == 24) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starttime;
        break;
      }

      // optional int64 starttime = 4;
      case 4: {
        if (tag == 32) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cmdline;
        break;
      }

      // repeated string cmdline = 6;
      case 6: {
        if (tag == 50) {
         parse_cmdline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmdline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdline(this->cmdline_size() - 1).data(),
            this->cmdline(this->cmdline_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmdline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cmdline;
        if (input->ExpectTag(58)) goto parse_executable;
        break;
      }

      // optional string executable = 7;
      case 7: {
        if (tag == 58) {
         parse_executable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->executable().data(), this->executable().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "executable");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.ProcessInfo.Basic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.ProcessInfo.Basic)
  return false;
#undef DO_
}

void ProcessInfo_Basic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.ProcessInfo.Basic)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 euid = 2;
  if (has_euid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->euid(), output);
  }

  // optional int32 ppid = 3;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ppid(), output);
  }

  // optional int64 starttime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->starttime(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // repeated string cmdline = 6;
  for (int i = 0; i < this->cmdline_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cmdline(i).data(), this->cmdline(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cmdline");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cmdline(i), output);
  }

  // optional string executable = 7;
  if (has_executable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->executable().data(), this->executable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "executable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->executable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.ProcessInfo.Basic)
}

::google::protobuf::uint8* ProcessInfo_Basic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.ProcessInfo.Basic)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 euid = 2;
  if (has_euid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->euid(), target);
  }

  // optional int32 ppid = 3;
  if (has_ppid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ppid(), target);
  }

  // optional int64 starttime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->starttime(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // repeated string cmdline = 6;
  for (int i = 0; i < this->cmdline_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdline(i).data(), this->cmdline(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmdline");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->cmdline(i), target);
  }

  // optional string executable = 7;
  if (has_executable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->executable().data(), this->executable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "executable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->executable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.ProcessInfo.Basic)
  return target;
}

int ProcessInfo_Basic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 euid = 2;
    if (has_euid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->euid());
    }

    // optional int32 ppid = 3;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid());
    }

    // optional int64 starttime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string executable = 7;
    if (has_executable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executable());
    }

  }
  // repeated string cmdline = 6;
  total_size += 1 * this->cmdline_size();
  for (int i = 0; i < this->cmdline_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmdline(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInfo_Basic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessInfo_Basic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessInfo_Basic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessInfo_Basic::MergeFrom(const ProcessInfo_Basic& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmdline_.MergeFrom(from.cmdline_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_euid()) {
      set_euid(from.euid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_executable()) {
      set_executable(from.executable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessInfo_Basic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo_Basic::CopyFrom(const ProcessInfo_Basic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo_Basic::IsInitialized() const {

  return true;
}

void ProcessInfo_Basic::Swap(ProcessInfo_Basic* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(euid_, other->euid_);
    std::swap(ppid_, other->ppid_);
    std::swap(starttime_, other->starttime_);
    std::swap(name_, other->name_);
    cmdline_.Swap(&other->cmdline_);
    std::swap(executable_, other->executable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessInfo_Basic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessInfo_Basic_descriptor_;
  metadata.reflection = ProcessInfo_Basic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProcessInfo::kPidFieldNumber;
const int ProcessInfo::kBasicFieldNumber;
const int ProcessInfo::kUserCpuMsFieldNumber;
const int ProcessInfo::kSysCpuMsFieldNumber;
const int ProcessInfo::kLastProcessorFieldNumber;
const int ProcessInfo::kWaitChannelFieldNumber;
const int ProcessInfo::kVsizeKbFieldNumber;
const int ProcessInfo::kRssKbFieldNumber;
const int ProcessInfo::kStateFieldNumber;
const int ProcessInfo::kMinorPageFaultsFieldNumber;
const int ProcessInfo::kMajorPageFaultsFieldNumber;
const int ProcessInfo::kNumThreadsFieldNumber;
const int ProcessInfo::kThreadsFieldNumber;
#endif  // !_MSC_VER

ProcessInfo::ProcessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.ProcessInfo)
}

void ProcessInfo::InitAsDefaultInstance() {
  basic_ = const_cast< ::collect::ProcessInfo_Basic*>(&::collect::ProcessInfo_Basic::default_instance());
}

ProcessInfo::ProcessInfo(const ProcessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.ProcessInfo)
}

void ProcessInfo::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  basic_ = NULL;
  user_cpu_ms_ = GOOGLE_LONGLONG(0);
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  last_processor_ = 0;
  wait_channel_ = 0;
  vsize_kb_ = GOOGLE_LONGLONG(0);
  rss_kb_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  minor_page_faults_ = GOOGLE_LONGLONG(0);
  major_page_faults_ = GOOGLE_LONGLONG(0);
  num_threads_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessInfo::~ProcessInfo() {
  // @@protoc_insertion_point(destructor:collect.ProcessInfo)
  SharedDtor();
}

void ProcessInfo::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void ProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessInfo_descriptor_;
}

const ProcessInfo& ProcessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

ProcessInfo* ProcessInfo::default_instance_ = NULL;

ProcessInfo* ProcessInfo::New() const {
  return new ProcessInfo;
}

void ProcessInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProcessInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_cpu_ms_, wait_channel_);
    if (has_basic()) {
      if (basic_ != NULL) basic_->::collect::ProcessInfo_Basic::Clear();
    }
    rss_kb_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(minor_page_faults_, major_page_faults_);
    state_ = 0;
    num_threads_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  threads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.ProcessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basic;
        break;
      }

      // optional .collect.ProcessInfo.Basic basic = 2;
      case 2: {
        if (tag == 18) {
         parse_basic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_cpu_ms;
        break;
      }

      // optional int64 user_cpu_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_user_cpu_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_cpu_ms_)));
          set_has_user_cpu_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sys_cpu_ms;
        break;
      }

      // optional int64 sys_cpu_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_sys_cpu_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_cpu_ms_)));
          set_has_sys_cpu_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_processor;
        break;
      }

      // optional int32 last_processor = 5;
      case 5: {
        if (tag == 40) {
         parse_last_processor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_processor_)));
          set_has_last_processor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wait_channel;
        break;
      }

      // optional int32 wait_channel = 6;
      case 6: {
        if (tag == 48) {
         parse_wait_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_channel_)));
          set_has_wait_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vsize_kb;
        break;
      }

      // optional int64 vsize_kb = 7;
      case 7: {
        if (tag == 56) {
         parse_vsize_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vsize_kb_)));
          set_has_vsize_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rss_kb;
        break;
      }

      // optional int64 rss_kb = 8;
      case 8: {
        if (tag == 64) {
         parse_rss_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rss_kb_)));
          set_has_rss_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional int32 state = 9;
      case 9: {
        if (tag == 72) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_minor_page_faults;
        break;
      }

      // optional int64 minor_page_faults = 10;
      case 10: {
        if (tag == 80) {
         parse_minor_page_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minor_page_faults_)));
          set_has_minor_page_faults();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_major_page_faults;
        break;
      }

      // optional int64 major_page_faults = 11;
      case 11: {
        if (tag == 88) {
         parse_major_page_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &major_page_faults_)));
          set_has_major_page_faults();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 12;
      case 12: {
        if (tag == 96) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_threads;
        break;
      }

      // repeated .collect.ThreadInfo threads = 13;
      case 13: {
        if (tag == 106) {
         parse_threads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_threads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_threads;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.ProcessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.ProcessInfo)
  return false;
#undef DO_
}

void ProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.ProcessInfo)
  // optional int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional .collect.ProcessInfo.Basic basic = 2;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basic(), output);
  }

  // optional int64 user_cpu_ms = 3;
  if (has_user_cpu_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_cpu_ms(), output);
  }

  // optional int64 sys_cpu_ms = 4;
  if (has_sys_cpu_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sys_cpu_ms(), output);
  }

  // optional int32 last_processor = 5;
  if (has_last_processor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->last_processor(), output);
  }

  // optional int32 wait_channel = 6;
  if (has_wait_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wait_channel(), output);
  }

  // optional int64 vsize_kb = 7;
  if (has_vsize_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vsize_kb(), output);
  }

  // optional int64 rss_kb = 8;
  if (has_rss_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->rss_kb(), output);
  }

  // optional int32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->state(), output);
  }

  // optional int64 minor_page_faults = 10;
  if (has_minor_page_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->minor_page_faults(), output);
  }

  // optional int64 major_page_faults = 11;
  if (has_major_page_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->major_page_faults(), output);
  }

  // optional int32 num_threads = 12;
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->num_threads(), output);
  }

  // repeated .collect.ThreadInfo threads = 13;
  for (int i = 0; i < this->threads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->threads(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.ProcessInfo)
}

::google::protobuf::uint8* ProcessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.ProcessInfo)
  // optional int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional .collect.ProcessInfo.Basic basic = 2;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basic(), target);
  }

  // optional int64 user_cpu_ms = 3;
  if (has_user_cpu_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_cpu_ms(), target);
  }

  // optional int64 sys_cpu_ms = 4;
  if (has_sys_cpu_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sys_cpu_ms(), target);
  }

  // optional int32 last_processor = 5;
  if (has_last_processor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->last_processor(), target);
  }

  // optional int32 wait_channel = 6;
  if (has_wait_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wait_channel(), target);
  }

  // optional int64 vsize_kb = 7;
  if (has_vsize_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vsize_kb(), target);
  }

  // optional int64 rss_kb = 8;
  if (has_rss_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->rss_kb(), target);
  }

  // optional int32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->state(), target);
  }

  // optional int64 minor_page_faults = 10;
  if (has_minor_page_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->minor_page_faults(), target);
  }

  // optional int64 major_page_faults = 11;
  if (has_major_page_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->major_page_faults(), target);
  }

  // optional int32 num_threads = 12;
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->num_threads(), target);
  }

  // repeated .collect.ThreadInfo threads = 13;
  for (int i = 0; i < this->threads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->threads(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.ProcessInfo)
  return target;
}

int ProcessInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional .collect.ProcessInfo.Basic basic = 2;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional int64 user_cpu_ms = 3;
    if (has_user_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_cpu_ms());
    }

    // optional int64 sys_cpu_ms = 4;
    if (has_sys_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_cpu_ms());
    }

    // optional int32 last_processor = 5;
    if (has_last_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_processor());
    }

    // optional int32 wait_channel = 6;
    if (has_wait_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_channel());
    }

    // optional int64 vsize_kb = 7;
    if (has_vsize_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vsize_kb());
    }

    // optional int64 rss_kb = 8;
    if (has_rss_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rss_kb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int64 minor_page_faults = 10;
    if (has_minor_page_faults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minor_page_faults());
    }

    // optional int64 major_page_faults = 11;
    if (has_major_page_faults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->major_page_faults());
    }

    // optional int32 num_threads = 12;
    if (has_num_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

  }
  // repeated .collect.ThreadInfo threads = 13;
  total_size += 1 * this->threads_size();
  for (int i = 0; i < this->threads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->threads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessInfo::MergeFrom(const ProcessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  threads_.MergeFrom(from.threads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_basic()) {
      mutable_basic()->::collect::ProcessInfo_Basic::MergeFrom(from.basic());
    }
    if (from.has_user_cpu_ms()) {
      set_user_cpu_ms(from.user_cpu_ms());
    }
    if (from.has_sys_cpu_ms()) {
      set_sys_cpu_ms(from.sys_cpu_ms());
    }
    if (from.has_last_processor()) {
      set_last_processor(from.last_processor());
    }
    if (from.has_wait_channel()) {
      set_wait_channel(from.wait_channel());
    }
    if (from.has_vsize_kb()) {
      set_vsize_kb(from.vsize_kb());
    }
    if (from.has_rss_kb()) {
      set_rss_kb(from.rss_kb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_minor_page_faults()) {
      set_minor_page_faults(from.minor_page_faults());
    }
    if (from.has_major_page_faults()) {
      set_major_page_faults(from.major_page_faults());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessInfo::CopyFrom(const ProcessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessInfo::IsInitialized() const {

  return true;
}

void ProcessInfo::Swap(ProcessInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(basic_, other->basic_);
    std::swap(user_cpu_ms_, other->user_cpu_ms_);
    std::swap(sys_cpu_ms_, other->sys_cpu_ms_);
    std::swap(last_processor_, other->last_processor_);
    std::swap(wait_channel_, other->wait_channel_);
    std::swap(vsize_kb_, other->vsize_kb_);
    std::swap(rss_kb_, other->rss_kb_);
    std::swap(state_, other->state_);
    std::swap(minor_page_faults_, other->minor_page_faults_);
    std::swap(major_page_faults_, other->major_page_faults_);
    std::swap(num_threads_, other->num_threads_);
    threads_.Swap(&other->threads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessInfo_descriptor_;
  metadata.reflection = ProcessInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemInfo_Basic::kKernelVersionFieldNumber;
const int SystemInfo_Basic::kKernelCmdlineFieldNumber;
const int SystemInfo_Basic::kCpuinfoFieldNumber;
#endif  // !_MSC_VER

SystemInfo_Basic::SystemInfo_Basic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.SystemInfo.Basic)
}

void SystemInfo_Basic::InitAsDefaultInstance() {
}

SystemInfo_Basic::SystemInfo_Basic(const SystemInfo_Basic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.SystemInfo.Basic)
}

void SystemInfo_Basic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kernel_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kernel_cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo_Basic::~SystemInfo_Basic() {
  // @@protoc_insertion_point(destructor:collect.SystemInfo.Basic)
  SharedDtor();
}

void SystemInfo_Basic::SharedDtor() {
  if (kernel_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kernel_version_;
  }
  if (kernel_cmdline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kernel_cmdline_;
  }
  if (cpuinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cpuinfo_;
  }
  if (this != default_instance_) {
  }
}

void SystemInfo_Basic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo_Basic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_Basic_descriptor_;
}

const SystemInfo_Basic& SystemInfo_Basic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

SystemInfo_Basic* SystemInfo_Basic::default_instance_ = NULL;

SystemInfo_Basic* SystemInfo_Basic::New() const {
  return new SystemInfo_Basic;
}

void SystemInfo_Basic::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_kernel_version()) {
      if (kernel_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kernel_version_->clear();
      }
    }
    if (has_kernel_cmdline()) {
      if (kernel_cmdline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kernel_cmdline_->clear();
      }
    }
    if (has_cpuinfo()) {
      if (cpuinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cpuinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo_Basic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.SystemInfo.Basic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string kernel_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kernel_version().data(), this->kernel_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kernel_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kernel_cmdline;
        break;
      }

      // optional string kernel_cmdline = 2;
      case 2: {
        if (tag == 18) {
         parse_kernel_cmdline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_cmdline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kernel_cmdline().data(), this->kernel_cmdline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kernel_cmdline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cpuinfo;
        break;
      }

      // optional string cpuinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_cpuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cpuinfo().data(), this->cpuinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cpuinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.SystemInfo.Basic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.SystemInfo.Basic)
  return false;
#undef DO_
}

void SystemInfo_Basic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.SystemInfo.Basic)
  // optional string kernel_version = 1;
  if (has_kernel_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kernel_version().data(), this->kernel_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kernel_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kernel_version(), output);
  }

  // optional string kernel_cmdline = 2;
  if (has_kernel_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kernel_cmdline().data(), this->kernel_cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kernel_cmdline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kernel_cmdline(), output);
  }

  // optional string cpuinfo = 3;
  if (has_cpuinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpuinfo().data(), this->cpuinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cpuinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cpuinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.SystemInfo.Basic)
}

::google::protobuf::uint8* SystemInfo_Basic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.SystemInfo.Basic)
  // optional string kernel_version = 1;
  if (has_kernel_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kernel_version().data(), this->kernel_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kernel_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kernel_version(), target);
  }

  // optional string kernel_cmdline = 2;
  if (has_kernel_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kernel_cmdline().data(), this->kernel_cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kernel_cmdline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kernel_cmdline(), target);
  }

  // optional string cpuinfo = 3;
  if (has_cpuinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpuinfo().data(), this->cpuinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cpuinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cpuinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.SystemInfo.Basic)
  return target;
}

int SystemInfo_Basic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string kernel_version = 1;
    if (has_kernel_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kernel_version());
    }

    // optional string kernel_cmdline = 2;
    if (has_kernel_cmdline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kernel_cmdline());
    }

    // optional string cpuinfo = 3;
    if (has_cpuinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo_Basic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo_Basic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo_Basic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo_Basic::MergeFrom(const SystemInfo_Basic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kernel_version()) {
      set_kernel_version(from.kernel_version());
    }
    if (from.has_kernel_cmdline()) {
      set_kernel_cmdline(from.kernel_cmdline());
    }
    if (from.has_cpuinfo()) {
      set_cpuinfo(from.cpuinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo_Basic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo_Basic::CopyFrom(const SystemInfo_Basic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo_Basic::IsInitialized() const {

  return true;
}

void SystemInfo_Basic::Swap(SystemInfo_Basic* other) {
  if (other != this) {
    std::swap(kernel_version_, other->kernel_version_);
    std::swap(kernel_cmdline_, other->kernel_cmdline_);
    std::swap(cpuinfo_, other->cpuinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo_Basic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_Basic_descriptor_;
  metadata.reflection = SystemInfo_Basic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SystemInfo_Performance::kLoadavg1MMilliFieldNumber;
const int SystemInfo_Performance::kLoadavg5MMilliFieldNumber;
const int SystemInfo_Performance::kLoadavg15MMilliFieldNumber;
const int SystemInfo_Performance::kRunningTasksFieldNumber;
const int SystemInfo_Performance::kTotalTasksFieldNumber;
const int SystemInfo_Performance::kLastPidFieldNumber;
const int SystemInfo_Performance::kBootTimeFieldNumber;
const int SystemInfo_Performance::kContextSwitchesFieldNumber;
const int SystemInfo_Performance::kProcessesCreatedFieldNumber;
const int SystemInfo_Performance::kProcessesRunningFieldNumber;
const int SystemInfo_Performance::kProcessesBlockedFieldNumber;
#endif  // !_MSC_VER

SystemInfo_Performance::SystemInfo_Performance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.SystemInfo.Performance)
}

void SystemInfo_Performance::InitAsDefaultInstance() {
}

SystemInfo_Performance::SystemInfo_Performance(const SystemInfo_Performance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.SystemInfo.Performance)
}

void SystemInfo_Performance::SharedCtor() {
  _cached_size_ = 0;
  loadavg_1m_milli_ = 0;
  loadavg_5m_milli_ = 0;
  loadavg_15m_milli_ = 0;
  running_tasks_ = 0;
  total_tasks_ = 0;
  last_pid_ = 0;
  boot_time_ = GOOGLE_LONGLONG(0);
  context_switches_ = GOOGLE_LONGLONG(0);
  processes_created_ = GOOGLE_LONGLONG(0);
  processes_running_ = 0;
  processes_blocked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo_Performance::~SystemInfo_Performance() {
  // @@protoc_insertion_point(destructor:collect.SystemInfo.Performance)
  SharedDtor();
}

void SystemInfo_Performance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemInfo_Performance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo_Performance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_Performance_descriptor_;
}

const SystemInfo_Performance& SystemInfo_Performance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

SystemInfo_Performance* SystemInfo_Performance::default_instance_ = NULL;

SystemInfo_Performance* SystemInfo_Performance::New() const {
  return new SystemInfo_Performance;
}

void SystemInfo_Performance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SystemInfo_Performance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(loadavg_1m_milli_, context_switches_);
  }
  ZR_(processes_created_, processes_blocked_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo_Performance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.SystemInfo.Performance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 loadavg_1m_milli = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadavg_1m_milli_)));
          set_has_loadavg_1m_milli();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loadavg_5m_milli;
        break;
      }

      // optional int32 loadavg_5m_milli = 3;
      case 3: {
        if (tag == 24) {
         parse_loadavg_5m_milli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadavg_5m_milli_)));
          set_has_loadavg_5m_milli();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_loadavg_15m_milli;
        break;
      }

      // optional int32 loadavg_15m_milli = 4;
      case 4: {
        if (tag == 32) {
         parse_loadavg_15m_milli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loadavg_15m_milli_)));
          set_has_loadavg_15m_milli();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_running_tasks;
        break;
      }

      // optional int32 running_tasks = 5;
      case 5: {
        if (tag == 40) {
         parse_running_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_tasks_)));
          set_has_running_tasks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_tasks;
        break;
      }

      // optional int32 total_tasks = 6;
      case 6: {
        if (tag == 48) {
         parse_total_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_tasks_)));
          set_has_total_tasks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_last_pid;
        break;
      }

      // optional int32 last_pid = 7;
      case 7: {
        if (tag == 56) {
         parse_last_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_pid_)));
          set_has_last_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_boot_time;
        break;
      }

      // optional int64 boot_time = 9;
      case 9: {
        if (tag == 72) {
         parse_boot_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boot_time_)));
          set_has_boot_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_context_switches;
        break;
      }

      // optional int64 context_switches = 10;
      case 10: {
        if (tag == 80) {
         parse_context_switches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &context_switches_)));
          set_has_context_switches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_processes_created;
        break;
      }

      // optional int64 processes_created = 11;
      case 11: {
        if (tag == 88) {
         parse_processes_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processes_created_)));
          set_has_processes_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_processes_running;
        break;
      }

      // optional int32 processes_running = 12;
      case 12: {
        if (tag == 96) {
         parse_processes_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processes_running_)));
          set_has_processes_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_processes_blocked;
        break;
      }

      // optional int32 processes_blocked = 13;
      case 13: {
        if (tag == 104) {
         parse_processes_blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processes_blocked_)));
          set_has_processes_blocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.SystemInfo.Performance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.SystemInfo.Performance)
  return false;
#undef DO_
}

void SystemInfo_Performance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.SystemInfo.Performance)
  // optional int32 loadavg_1m_milli = 2;
  if (has_loadavg_1m_milli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loadavg_1m_milli(), output);
  }

  // optional int32 loadavg_5m_milli = 3;
  if (has_loadavg_5m_milli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loadavg_5m_milli(), output);
  }

  // optional int32 loadavg_15m_milli = 4;
  if (has_loadavg_15m_milli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loadavg_15m_milli(), output);
  }

  // optional int32 running_tasks = 5;
  if (has_running_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->running_tasks(), output);
  }

  // optional int32 total_tasks = 6;
  if (has_total_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_tasks(), output);
  }

  // optional int32 last_pid = 7;
  if (has_last_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->last_pid(), output);
  }

  // optional int64 boot_time = 9;
  if (has_boot_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->boot_time(), output);
  }

  // optional int64 context_switches = 10;
  if (has_context_switches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->context_switches(), output);
  }

  // optional int64 processes_created = 11;
  if (has_processes_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->processes_created(), output);
  }

  // optional int32 processes_running = 12;
  if (has_processes_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->processes_running(), output);
  }

  // optional int32 processes_blocked = 13;
  if (has_processes_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->processes_blocked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.SystemInfo.Performance)
}

::google::protobuf::uint8* SystemInfo_Performance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.SystemInfo.Performance)
  // optional int32 loadavg_1m_milli = 2;
  if (has_loadavg_1m_milli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loadavg_1m_milli(), target);
  }

  // optional int32 loadavg_5m_milli = 3;
  if (has_loadavg_5m_milli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loadavg_5m_milli(), target);
  }

  // optional int32 loadavg_15m_milli = 4;
  if (has_loadavg_15m_milli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loadavg_15m_milli(), target);
  }

  // optional int32 running_tasks = 5;
  if (has_running_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->running_tasks(), target);
  }

  // optional int32 total_tasks = 6;
  if (has_total_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_tasks(), target);
  }

  // optional int32 last_pid = 7;
  if (has_last_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->last_pid(), target);
  }

  // optional int64 boot_time = 9;
  if (has_boot_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->boot_time(), target);
  }

  // optional int64 context_switches = 10;
  if (has_context_switches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->context_switches(), target);
  }

  // optional int64 processes_created = 11;
  if (has_processes_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->processes_created(), target);
  }

  // optional int32 processes_running = 12;
  if (has_processes_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->processes_running(), target);
  }

  // optional int32 processes_blocked = 13;
  if (has_processes_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->processes_blocked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.SystemInfo.Performance)
  return target;
}

int SystemInfo_Performance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 loadavg_1m_milli = 2;
    if (has_loadavg_1m_milli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loadavg_1m_milli());
    }

    // optional int32 loadavg_5m_milli = 3;
    if (has_loadavg_5m_milli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loadavg_5m_milli());
    }

    // optional int32 loadavg_15m_milli = 4;
    if (has_loadavg_15m_milli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loadavg_15m_milli());
    }

    // optional int32 running_tasks = 5;
    if (has_running_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->running_tasks());
    }

    // optional int32 total_tasks = 6;
    if (has_total_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_tasks());
    }

    // optional int32 last_pid = 7;
    if (has_last_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_pid());
    }

    // optional int64 boot_time = 9;
    if (has_boot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boot_time());
    }

    // optional int64 context_switches = 10;
    if (has_context_switches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->context_switches());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 processes_created = 11;
    if (has_processes_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->processes_created());
    }

    // optional int32 processes_running = 12;
    if (has_processes_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processes_running());
    }

    // optional int32 processes_blocked = 13;
    if (has_processes_blocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processes_blocked());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo_Performance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo_Performance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo_Performance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo_Performance::MergeFrom(const SystemInfo_Performance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loadavg_1m_milli()) {
      set_loadavg_1m_milli(from.loadavg_1m_milli());
    }
    if (from.has_loadavg_5m_milli()) {
      set_loadavg_5m_milli(from.loadavg_5m_milli());
    }
    if (from.has_loadavg_15m_milli()) {
      set_loadavg_15m_milli(from.loadavg_15m_milli());
    }
    if (from.has_running_tasks()) {
      set_running_tasks(from.running_tasks());
    }
    if (from.has_total_tasks()) {
      set_total_tasks(from.total_tasks());
    }
    if (from.has_last_pid()) {
      set_last_pid(from.last_pid());
    }
    if (from.has_boot_time()) {
      set_boot_time(from.boot_time());
    }
    if (from.has_context_switches()) {
      set_context_switches(from.context_switches());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_processes_created()) {
      set_processes_created(from.processes_created());
    }
    if (from.has_processes_running()) {
      set_processes_running(from.processes_running());
    }
    if (from.has_processes_blocked()) {
      set_processes_blocked(from.processes_blocked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo_Performance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo_Performance::CopyFrom(const SystemInfo_Performance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo_Performance::IsInitialized() const {

  return true;
}

void SystemInfo_Performance::Swap(SystemInfo_Performance* other) {
  if (other != this) {
    std::swap(loadavg_1m_milli_, other->loadavg_1m_milli_);
    std::swap(loadavg_5m_milli_, other->loadavg_5m_milli_);
    std::swap(loadavg_15m_milli_, other->loadavg_15m_milli_);
    std::swap(running_tasks_, other->running_tasks_);
    std::swap(total_tasks_, other->total_tasks_);
    std::swap(last_pid_, other->last_pid_);
    std::swap(boot_time_, other->boot_time_);
    std::swap(context_switches_, other->context_switches_);
    std::swap(processes_created_, other->processes_created_);
    std::swap(processes_running_, other->processes_running_);
    std::swap(processes_blocked_, other->processes_blocked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo_Performance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_Performance_descriptor_;
  metadata.reflection = SystemInfo_Performance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SystemInfo_Cpu::kUserMsFieldNumber;
const int SystemInfo_Cpu::kNiceMsFieldNumber;
const int SystemInfo_Cpu::kSysMsFieldNumber;
const int SystemInfo_Cpu::kIdleMsFieldNumber;
const int SystemInfo_Cpu::kIowaitMsFieldNumber;
const int SystemInfo_Cpu::kIrqMsFieldNumber;
const int SystemInfo_Cpu::kSoftirqMsFieldNumber;
#endif  // !_MSC_VER

SystemInfo_Cpu::SystemInfo_Cpu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.SystemInfo.Cpu)
}

void SystemInfo_Cpu::InitAsDefaultInstance() {
}

SystemInfo_Cpu::SystemInfo_Cpu(const SystemInfo_Cpu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.SystemInfo.Cpu)
}

void SystemInfo_Cpu::SharedCtor() {
  _cached_size_ = 0;
  user_ms_ = GOOGLE_LONGLONG(0);
  nice_ms_ = GOOGLE_LONGLONG(0);
  sys_ms_ = GOOGLE_LONGLONG(0);
  idle_ms_ = GOOGLE_LONGLONG(0);
  iowait_ms_ = GOOGLE_LONGLONG(0);
  irq_ms_ = GOOGLE_LONGLONG(0);
  softirq_ms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo_Cpu::~SystemInfo_Cpu() {
  // @@protoc_insertion_point(destructor:collect.SystemInfo.Cpu)
  SharedDtor();
}

void SystemInfo_Cpu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemInfo_Cpu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo_Cpu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_Cpu_descriptor_;
}

const SystemInfo_Cpu& SystemInfo_Cpu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

SystemInfo_Cpu* SystemInfo_Cpu::default_instance_ = NULL;

SystemInfo_Cpu* SystemInfo_Cpu::New() const {
  return new SystemInfo_Cpu;
}

void SystemInfo_Cpu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SystemInfo_Cpu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_ms_, softirq_ms_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo_Cpu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.SystemInfo.Cpu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_ms_)));
          set_has_user_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nice_ms;
        break;
      }

      // optional int64 nice_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_nice_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nice_ms_)));
          set_has_nice_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sys_ms;
        break;
      }

      // optional int64 sys_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_sys_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_ms_)));
          set_has_sys_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_idle_ms;
        break;
      }

      // optional int64 idle_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_idle_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idle_ms_)));
          set_has_idle_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iowait_ms;
        break;
      }

      // optional int64 iowait_ms = 5;
      case 5: {
        if (tag == 40) {
         parse_iowait_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iowait_ms_)));
          set_has_iowait_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_irq_ms;
        break;
      }

      // optional int64 irq_ms = 6;
      case 6: {
        if (tag == 48) {
         parse_irq_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &irq_ms_)));
          set_has_irq_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_softirq_ms;
        break;
      }

      // optional int64 softirq_ms = 7;
      case 7: {
        if (tag == 56) {
         parse_softirq_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &softirq_ms_)));
          set_has_softirq_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.SystemInfo.Cpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.SystemInfo.Cpu)
  return false;
#undef DO_
}

void SystemInfo_Cpu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.SystemInfo.Cpu)
  // optional int64 user_ms = 1;
  if (has_user_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_ms(), output);
  }

  // optional int64 nice_ms = 2;
  if (has_nice_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nice_ms(), output);
  }

  // optional int64 sys_ms = 3;
  if (has_sys_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sys_ms(), output);
  }

  // optional int64 idle_ms = 4;
  if (has_idle_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->idle_ms(), output);
  }

  // optional int64 iowait_ms = 5;
  if (has_iowait_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->iowait_ms(), output);
  }

  // optional int64 irq_ms = 6;
  if (has_irq_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->irq_ms(), output);
  }

  // optional int64 softirq_ms = 7;
  if (has_softirq_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->softirq_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.SystemInfo.Cpu)
}

::google::protobuf::uint8* SystemInfo_Cpu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.SystemInfo.Cpu)
  // optional int64 user_ms = 1;
  if (has_user_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_ms(), target);
  }

  // optional int64 nice_ms = 2;
  if (has_nice_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nice_ms(), target);
  }

  // optional int64 sys_ms = 3;
  if (has_sys_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sys_ms(), target);
  }

  // optional int64 idle_ms = 4;
  if (has_idle_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->idle_ms(), target);
  }

  // optional int64 iowait_ms = 5;
  if (has_iowait_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->iowait_ms(), target);
  }

  // optional int64 irq_ms = 6;
  if (has_irq_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->irq_ms(), target);
  }

  // optional int64 softirq_ms = 7;
  if (has_softirq_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->softirq_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.SystemInfo.Cpu)
  return target;
}

int SystemInfo_Cpu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 user_ms = 1;
    if (has_user_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_ms());
    }

    // optional int64 nice_ms = 2;
    if (has_nice_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nice_ms());
    }

    // optional int64 sys_ms = 3;
    if (has_sys_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_ms());
    }

    // optional int64 idle_ms = 4;
    if (has_idle_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idle_ms());
    }

    // optional int64 iowait_ms = 5;
    if (has_iowait_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iowait_ms());
    }

    // optional int64 irq_ms = 6;
    if (has_irq_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->irq_ms());
    }

    // optional int64 softirq_ms = 7;
    if (has_softirq_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->softirq_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo_Cpu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo_Cpu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo_Cpu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo_Cpu::MergeFrom(const SystemInfo_Cpu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_ms()) {
      set_user_ms(from.user_ms());
    }
    if (from.has_nice_ms()) {
      set_nice_ms(from.nice_ms());
    }
    if (from.has_sys_ms()) {
      set_sys_ms(from.sys_ms());
    }
    if (from.has_idle_ms()) {
      set_idle_ms(from.idle_ms());
    }
    if (from.has_iowait_ms()) {
      set_iowait_ms(from.iowait_ms());
    }
    if (from.has_irq_ms()) {
      set_irq_ms(from.irq_ms());
    }
    if (from.has_softirq_ms()) {
      set_softirq_ms(from.softirq_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo_Cpu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo_Cpu::CopyFrom(const SystemInfo_Cpu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo_Cpu::IsInitialized() const {

  return true;
}

void SystemInfo_Cpu::Swap(SystemInfo_Cpu* other) {
  if (other != this) {
    std::swap(user_ms_, other->user_ms_);
    std::swap(nice_ms_, other->nice_ms_);
    std::swap(sys_ms_, other->sys_ms_);
    std::swap(idle_ms_, other->idle_ms_);
    std::swap(iowait_ms_, other->iowait_ms_);
    std::swap(irq_ms_, other->irq_ms_);
    std::swap(softirq_ms_, other->softirq_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo_Cpu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_Cpu_descriptor_;
  metadata.reflection = SystemInfo_Cpu_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SystemInfo_Memory::kTotalKbFieldNumber;
const int SystemInfo_Memory::kFreeKbFieldNumber;
const int SystemInfo_Memory::kBuffersKbFieldNumber;
const int SystemInfo_Memory::kCachedKbFieldNumber;
const int SystemInfo_Memory::kSwapTotalKbFieldNumber;
const int SystemInfo_Memory::kSwapFreeKbFieldNumber;
const int SystemInfo_Memory::kSwapCachedKbFieldNumber;
#endif  // !_MSC_VER

SystemInfo_Memory::SystemInfo_Memory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.SystemInfo.Memory)
}

void SystemInfo_Memory::InitAsDefaultInstance() {
}

SystemInfo_Memory::SystemInfo_Memory(const SystemInfo_Memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.SystemInfo.Memory)
}

void SystemInfo_Memory::SharedCtor() {
  _cached_size_ = 0;
  total_kb_ = GOOGLE_LONGLONG(0);
  free_kb_ = GOOGLE_LONGLONG(0);
  buffers_kb_ = GOOGLE_LONGLONG(0);
  cached_kb_ = GOOGLE_LONGLONG(0);
  swap_total_kb_ = GOOGLE_LONGLONG(0);
  swap_free_kb_ = GOOGLE_LONGLONG(0);
  swap_cached_kb_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo_Memory::~SystemInfo_Memory() {
  // @@protoc_insertion_point(destructor:collect.SystemInfo.Memory)
  SharedDtor();
}

void SystemInfo_Memory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemInfo_Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo_Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_Memory_descriptor_;
}

const SystemInfo_Memory& SystemInfo_Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

SystemInfo_Memory* SystemInfo_Memory::default_instance_ = NULL;

SystemInfo_Memory* SystemInfo_Memory::New() const {
  return new SystemInfo_Memory;
}

void SystemInfo_Memory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SystemInfo_Memory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(total_kb_, swap_cached_kb_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo_Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.SystemInfo.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 total_kb = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_kb_)));
          set_has_total_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_free_kb;
        break;
      }

      // optional int64 free_kb = 2;
      case 2: {
        if (tag == 16) {
         parse_free_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_kb_)));
          set_has_free_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buffers_kb;
        break;
      }

      // optional int64 buffers_kb = 3;
      case 3: {
        if (tag == 24) {
         parse_buffers_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buffers_kb_)));
          set_has_buffers_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cached_kb;
        break;
      }

      // optional int64 cached_kb = 4;
      case 4: {
        if (tag == 32) {
         parse_cached_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cached_kb_)));
          set_has_cached_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_swap_total_kb;
        break;
      }

      // optional int64 swap_total_kb = 5;
      case 5: {
        if (tag == 40) {
         parse_swap_total_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &swap_total_kb_)));
          set_has_swap_total_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_swap_free_kb;
        break;
      }

      // optional int64 swap_free_kb = 6;
      case 6: {
        if (tag == 48) {
         parse_swap_free_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &swap_free_kb_)));
          set_has_swap_free_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_swap_cached_kb;
        break;
      }

      // optional int64 swap_cached_kb = 7;
      case 7: {
        if (tag == 56) {
         parse_swap_cached_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &swap_cached_kb_)));
          set_has_swap_cached_kb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.SystemInfo.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.SystemInfo.Memory)
  return false;
#undef DO_
}

void SystemInfo_Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.SystemInfo.Memory)
  // optional int64 total_kb = 1;
  if (has_total_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total_kb(), output);
  }

  // optional int64 free_kb = 2;
  if (has_free_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->free_kb(), output);
  }

  // optional int64 buffers_kb = 3;
  if (has_buffers_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->buffers_kb(), output);
  }

  // optional int64 cached_kb = 4;
  if (has_cached_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cached_kb(), output);
  }

  // optional int64 swap_total_kb = 5;
  if (has_swap_total_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->swap_total_kb(), output);
  }

  // optional int64 swap_free_kb = 6;
  if (has_swap_free_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->swap_free_kb(), output);
  }

  // optional int64 swap_cached_kb = 7;
  if (has_swap_cached_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->swap_cached_kb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.SystemInfo.Memory)
}

::google::protobuf::uint8* SystemInfo_Memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.SystemInfo.Memory)
  // optional int64 total_kb = 1;
  if (has_total_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->total_kb(), target);
  }

  // optional int64 free_kb = 2;
  if (has_free_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->free_kb(), target);
  }

  // optional int64 buffers_kb = 3;
  if (has_buffers_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->buffers_kb(), target);
  }

  // optional int64 cached_kb = 4;
  if (has_cached_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cached_kb(), target);
  }

  // optional int64 swap_total_kb = 5;
  if (has_swap_total_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->swap_total_kb(), target);
  }

  // optional int64 swap_free_kb = 6;
  if (has_swap_free_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->swap_free_kb(), target);
  }

  // optional int64 swap_cached_kb = 7;
  if (has_swap_cached_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->swap_cached_kb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.SystemInfo.Memory)
  return target;
}

int SystemInfo_Memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 total_kb = 1;
    if (has_total_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_kb());
    }

    // optional int64 free_kb = 2;
    if (has_free_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->free_kb());
    }

    // optional int64 buffers_kb = 3;
    if (has_buffers_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buffers_kb());
    }

    // optional int64 cached_kb = 4;
    if (has_cached_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cached_kb());
    }

    // optional int64 swap_total_kb = 5;
    if (has_swap_total_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->swap_total_kb());
    }

    // optional int64 swap_free_kb = 6;
    if (has_swap_free_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->swap_free_kb());
    }

    // optional int64 swap_cached_kb = 7;
    if (has_swap_cached_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->swap_cached_kb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo_Memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo_Memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo_Memory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo_Memory::MergeFrom(const SystemInfo_Memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_kb()) {
      set_total_kb(from.total_kb());
    }
    if (from.has_free_kb()) {
      set_free_kb(from.free_kb());
    }
    if (from.has_buffers_kb()) {
      set_buffers_kb(from.buffers_kb());
    }
    if (from.has_cached_kb()) {
      set_cached_kb(from.cached_kb());
    }
    if (from.has_swap_total_kb()) {
      set_swap_total_kb(from.swap_total_kb());
    }
    if (from.has_swap_free_kb()) {
      set_swap_free_kb(from.swap_free_kb());
    }
    if (from.has_swap_cached_kb()) {
      set_swap_cached_kb(from.swap_cached_kb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo_Memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo_Memory::CopyFrom(const SystemInfo_Memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo_Memory::IsInitialized() const {

  return true;
}

void SystemInfo_Memory::Swap(SystemInfo_Memory* other) {
  if (other != this) {
    std::swap(total_kb_, other->total_kb_);
    std::swap(free_kb_, other->free_kb_);
    std::swap(buffers_kb_, other->buffers_kb_);
    std::swap(cached_kb_, other->cached_kb_);
    std::swap(swap_total_kb_, other->swap_total_kb_);
    std::swap(swap_free_kb_, other->swap_free_kb_);
    std::swap(swap_cached_kb_, other->swap_cached_kb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo_Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_Memory_descriptor_;
  metadata.reflection = SystemInfo_Memory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SystemInfo::kBasicFieldNumber;
const int SystemInfo::kPerformanceFieldNumber;
const int SystemInfo::kAllCpuFieldNumber;
const int SystemInfo::kCpusFieldNumber;
const int SystemInfo::kMuduoTimestampFieldNumber;
const int SystemInfo::kMemoryFieldNumber;
const int SystemInfo::kProcessesFieldNumber;
const int SystemInfo::kUserCpuMsFieldNumber;
const int SystemInfo::kSysCpuMsFieldNumber;
#endif  // !_MSC_VER

SystemInfo::SystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.SystemInfo)
}

void SystemInfo::InitAsDefaultInstance() {
  basic_ = const_cast< ::collect::SystemInfo_Basic*>(&::collect::SystemInfo_Basic::default_instance());
  performance_ = const_cast< ::collect::SystemInfo_Performance*>(&::collect::SystemInfo_Performance::default_instance());
  all_cpu_ = const_cast< ::collect::SystemInfo_Cpu*>(&::collect::SystemInfo_Cpu::default_instance());
  memory_ = const_cast< ::collect::SystemInfo_Memory*>(&::collect::SystemInfo_Memory::default_instance());
}

SystemInfo::SystemInfo(const SystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.SystemInfo)
}

void SystemInfo::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  performance_ = NULL;
  all_cpu_ = NULL;
  muduo_timestamp_ = GOOGLE_ULONGLONG(0);
  memory_ = NULL;
  user_cpu_ms_ = GOOGLE_LONGLONG(0);
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:collect.SystemInfo)
  SharedDtor();
}

void SystemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
    delete performance_;
    delete all_cpu_;
    delete memory_;
  }
}

void SystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_descriptor_;
}

const SystemInfo& SystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

SystemInfo* SystemInfo::default_instance_ = NULL;

SystemInfo* SystemInfo::New() const {
  return new SystemInfo;
}

void SystemInfo::Clear() {
  if (_has_bits_[0 / 32] & 183) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::collect::SystemInfo_Basic::Clear();
    }
    if (has_performance()) {
      if (performance_ != NULL) performance_->::collect::SystemInfo_Performance::Clear();
    }
    if (has_all_cpu()) {
      if (all_cpu_ != NULL) all_cpu_->::collect::SystemInfo_Cpu::Clear();
    }
    muduo_timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_memory()) {
      if (memory_ != NULL) memory_->::collect::SystemInfo_Memory::Clear();
    }
    user_cpu_ms_ = GOOGLE_LONGLONG(0);
  }
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  cpus_.Clear();
  processes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.SystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .collect.SystemInfo.Basic basic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_performance;
        break;
      }

      // optional .collect.SystemInfo.Performance performance = 2;
      case 2: {
        if (tag == 18) {
         parse_performance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_performance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_all_cpu;
        break;
      }

      // optional .collect.SystemInfo.Cpu all_cpu = 3;
      case 3: {
        if (tag == 26) {
         parse_all_cpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_cpu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cpus;
        break;
      }

      // repeated .collect.SystemInfo.Cpu cpus = 4;
      case 4: {
        if (tag == 34) {
         parse_cpus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cpus;
        if (input->ExpectTag(41)) goto parse_muduo_timestamp;
        break;
      }

      // optional fixed64 muduo_timestamp = 5;
      case 5: {
        if (tag == 41) {
         parse_muduo_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &muduo_timestamp_)));
          set_has_muduo_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_cpu_ms;
        break;
      }

      // optional int64 user_cpu_ms = 6;
      case 6: {
        if (tag == 48) {
         parse_user_cpu_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_cpu_ms_)));
          set_has_user_cpu_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sys_cpu_ms;
        break;
      }

      // optional int64 sys_cpu_ms = 7;
      case 7: {
        if (tag == 56) {
         parse_sys_cpu_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_cpu_ms_)));
          set_has_sys_cpu_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_memory;
        break;
      }

      // optional .collect.SystemInfo.Memory memory = 8;
      case 8: {
        if (tag == 66) {
         parse_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_processes;
        break;
      }

      // repeated .collect.ProcessInfo processes = 14;
      case 14: {
        if (tag == 114) {
         parse_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_processes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.SystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.SystemInfo)
  return false;
#undef DO_
}

void SystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.SystemInfo)
  // optional .collect.SystemInfo.Basic basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }

  // optional .collect.SystemInfo.Performance performance = 2;
  if (has_performance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->performance(), output);
  }

  // optional .collect.SystemInfo.Cpu all_cpu = 3;
  if (has_all_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->all_cpu(), output);
  }

  // repeated .collect.SystemInfo.Cpu cpus = 4;
  for (int i = 0; i < this->cpus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cpus(i), output);
  }

  // optional fixed64 muduo_timestamp = 5;
  if (has_muduo_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->muduo_timestamp(), output);
  }

  // optional int64 user_cpu_ms = 6;
  if (has_user_cpu_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->user_cpu_ms(), output);
  }

  // optional int64 sys_cpu_ms = 7;
  if (has_sys_cpu_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sys_cpu_ms(), output);
  }

  // optional .collect.SystemInfo.Memory memory = 8;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->memory(), output);
  }

  // repeated .collect.ProcessInfo processes = 14;
  for (int i = 0; i < this->processes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->processes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.SystemInfo)
}

::google::protobuf::uint8* SystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.SystemInfo)
  // optional .collect.SystemInfo.Basic basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }

  // optional .collect.SystemInfo.Performance performance = 2;
  if (has_performance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->performance(), target);
  }

  // optional .collect.SystemInfo.Cpu all_cpu = 3;
  if (has_all_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->all_cpu(), target);
  }

  // repeated .collect.SystemInfo.Cpu cpus = 4;
  for (int i = 0; i < this->cpus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cpus(i), target);
  }

  // optional fixed64 muduo_timestamp = 5;
  if (has_muduo_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->muduo_timestamp(), target);
  }

  // optional int64 user_cpu_ms = 6;
  if (has_user_cpu_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->user_cpu_ms(), target);
  }

  // optional int64 sys_cpu_ms = 7;
  if (has_sys_cpu_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sys_cpu_ms(), target);
  }

  // optional .collect.SystemInfo.Memory memory = 8;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->memory(), target);
  }

  // repeated .collect.ProcessInfo processes = 14;
  for (int i = 0; i < this->processes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->processes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.SystemInfo)
  return target;
}

int SystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .collect.SystemInfo.Basic basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional .collect.SystemInfo.Performance performance = 2;
    if (has_performance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->performance());
    }

    // optional .collect.SystemInfo.Cpu all_cpu = 3;
    if (has_all_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_cpu());
    }

    // optional fixed64 muduo_timestamp = 5;
    if (has_muduo_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .collect.SystemInfo.Memory memory = 8;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory());
    }

    // optional int64 user_cpu_ms = 6;
    if (has_user_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_cpu_ms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 sys_cpu_ms = 7;
    if (has_sys_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_cpu_ms());
    }

  }
  // repeated .collect.SystemInfo.Cpu cpus = 4;
  total_size += 1 * this->cpus_size();
  for (int i = 0; i < this->cpus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpus(i));
  }

  // repeated .collect.ProcessInfo processes = 14;
  total_size += 1 * this->processes_size();
  for (int i = 0; i < this->processes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo::MergeFrom(const SystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpus_.MergeFrom(from.cpus_);
  processes_.MergeFrom(from.processes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::collect::SystemInfo_Basic::MergeFrom(from.basic());
    }
    if (from.has_performance()) {
      mutable_performance()->::collect::SystemInfo_Performance::MergeFrom(from.performance());
    }
    if (from.has_all_cpu()) {
      mutable_all_cpu()->::collect::SystemInfo_Cpu::MergeFrom(from.all_cpu());
    }
    if (from.has_muduo_timestamp()) {
      set_muduo_timestamp(from.muduo_timestamp());
    }
    if (from.has_memory()) {
      mutable_memory()->::collect::SystemInfo_Memory::MergeFrom(from.memory());
    }
    if (from.has_user_cpu_ms()) {
      set_user_cpu_ms(from.user_cpu_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sys_cpu_ms()) {
      set_sys_cpu_ms(from.sys_cpu_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {

  return true;
}

void SystemInfo::Swap(SystemInfo* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(performance_, other->performance_);
    std::swap(all_cpu_, other->all_cpu_);
    cpus_.Swap(&other->cpus_);
    std::swap(muduo_timestamp_, other->muduo_timestamp_);
    std::swap(memory_, other->memory_);
    processes_.Swap(&other->processes_);
    std::swap(user_cpu_ms_, other->user_cpu_ms_);
    std::swap(sys_cpu_ms_, other->sys_cpu_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_descriptor_;
  metadata.reflection = SystemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SnapshotRequest_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRequest_Level_descriptor_;
}
bool SnapshotRequest_Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SnapshotRequest_Level SnapshotRequest::kSystemInfoOnly;
const SnapshotRequest_Level SnapshotRequest::kSystemInfoAndProcesses;
const SnapshotRequest_Level SnapshotRequest::kSystemInfoAndThreads;
const SnapshotRequest_Level SnapshotRequest::kSystemInfoInitialSnapshot;
const SnapshotRequest_Level SnapshotRequest::Level_MIN;
const SnapshotRequest_Level SnapshotRequest::Level_MAX;
const int SnapshotRequest::Level_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SnapshotRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

SnapshotRequest::SnapshotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.SnapshotRequest)
}

void SnapshotRequest::InitAsDefaultInstance() {
}

SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.SnapshotRequest)
}

void SnapshotRequest::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapshotRequest::~SnapshotRequest() {
  // @@protoc_insertion_point(destructor:collect.SnapshotRequest)
  SharedDtor();
}

void SnapshotRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotRequest_descriptor_;
}

const SnapshotRequest& SnapshotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

SnapshotRequest* SnapshotRequest::default_instance_ = NULL;

SnapshotRequest* SnapshotRequest::New() const {
  return new SnapshotRequest;
}

void SnapshotRequest::Clear() {
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.SnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .collect.SnapshotRequest.Level level = 1 [default = kSystemInfoOnly];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::collect::SnapshotRequest_Level_IsValid(value)) {
            set_level(static_cast< ::collect::SnapshotRequest_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.SnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.SnapshotRequest)
  return false;
#undef DO_
}

void SnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.SnapshotRequest)
  // optional .collect.SnapshotRequest.Level level = 1 [default = kSystemInfoOnly];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.SnapshotRequest)
}

::google::protobuf::uint8* SnapshotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.SnapshotRequest)
  // optional .collect.SnapshotRequest.Level level = 1 [default = kSystemInfoOnly];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.SnapshotRequest)
  return target;
}

int SnapshotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .collect.SnapshotRequest.Level level = 1 [default = kSystemInfoOnly];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapshotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapshotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapshotRequest::MergeFrom(const SnapshotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {

  return true;
}

void SnapshotRequest::Swap(SnapshotRequest* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapshotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotRequest_descriptor_;
  metadata.reflection = SnapshotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kSucceedFieldNumber;
const int Result::kMessageFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:collect.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:collect.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeed_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:collect.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collect_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeed_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collect.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool succeed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeed_)));
          set_has_succeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collect.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collect.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collect.Result)
  // required bool succeed = 1;
  if (has_succeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeed(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collect.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:collect.Result)
  // required bool succeed = 1;
  if (has_succeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeed(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collect.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool succeed = 1;
    if (has_succeed()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeed()) {
      set_succeed(from.succeed());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(succeed_, other->succeed_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

CollectService::~CollectService() {}

static const ::google::protobuf::ServiceDescriptor* CollectService_descriptor_ = NULL;

const ::google::protobuf::ServiceDescriptor* CollectService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  if (CollectService_descriptor_ == NULL)
    CollectService_descriptor_ = ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
        "collect.proto")->service(0);
  return CollectService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* CollectService::GetDescriptor() {
  return descriptor();
}

void CollectService::getSnapshot(const ::collect::SnapshotRequestPtr&,
                         const ::collect::SystemInfo*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void CollectService::flushFile(const ::rpc2::EmptyPtr&,
                         const ::rpc2::Empty*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void CollectService::rollFile(const ::rpc2::EmptyPtr&,
                         const ::collect::Result*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void CollectService::version(const ::rpc2::EmptyPtr&,
                         const ::collect::Result*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void CollectService::quit(const ::rpc2::EmptyPtr&,
                         const ::collect::Result*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void CollectService::restart(const ::rpc2::EmptyPtr&,
                         const ::collect::Result*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void CollectService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::MessagePtr& request,
                             const ::google::protobuf::Message* responsePrototype,
                             const ::muduo::net::RpcDoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), CollectService_descriptor_);
  switch(method->index()) {
    case 0:
      getSnapshot(::google::protobuf::down_pointer_cast< ::collect::SnapshotRequest>(request),
             ::google::protobuf::down_cast<const ::collect::SystemInfo*>(responsePrototype),
             done);
      break;
    case 1:
      flushFile(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::rpc2::Empty*>(responsePrototype),
             done);
      break;
    case 2:
      rollFile(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::collect::Result*>(responsePrototype),
             done);
      break;
    case 3:
      version(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::collect::Result*>(responsePrototype),
             done);
      break;
    case 4:
      quit(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::collect::Result*>(responsePrototype),
             done);
      break;
    case 5:
      restart(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::collect::Result*>(responsePrototype),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CollectService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::collect::SnapshotRequest::default_instance();
    case 1:
      return ::rpc2::Empty::default_instance();
    case 2:
      return ::rpc2::Empty::default_instance();
    case 3:
      return ::rpc2::Empty::default_instance();
    case 4:
      return ::rpc2::Empty::default_instance();
    case 5:
      return ::rpc2::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& CollectService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::collect::SystemInfo::default_instance();
    case 1:
      return ::rpc2::Empty::default_instance();
    case 2:
      return ::collect::Result::default_instance();
    case 3:
      return ::collect::Result::default_instance();
    case 4:
      return ::collect::Result::default_instance();
    case 5:
      return ::collect::Result::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

CollectService_Stub::CollectService_Stub(::muduo::net::RpcChannel* channel__)
  : channel_(channel__), owns_channel_(false) {}
CollectService_Stub::~CollectService_Stub() {
}

void CollectService_Stub::getSnapshot(const ::collect::SnapshotRequest& request,
                              const ::std::function<void(const ::collect::SystemInfoPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(0),
                       request, &::collect::SystemInfo::default_instance(), done);
}
void CollectService_Stub::flushFile(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::rpc2::EmptyPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(1),
                       request, &::rpc2::Empty::default_instance(), done);
}
void CollectService_Stub::rollFile(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::collect::ResultPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(2),
                       request, &::collect::Result::default_instance(), done);
}
void CollectService_Stub::version(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::collect::ResultPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(3),
                       request, &::collect::Result::default_instance(), done);
}
void CollectService_Stub::quit(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::collect::ResultPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(4),
                       request, &::collect::Result::default_instance(), done);
}
void CollectService_Stub::restart(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::collect::ResultPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(5),
                       request, &::collect::Result::default_instance(), done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace collect

// @@protoc_insertion_point(global_scope)
