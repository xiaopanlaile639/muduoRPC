// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collect.proto

#ifndef PROTOBUF_collect_2eproto__INCLUDED
#define PROTOBUF_collect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "muduo/protorpc2/rpc2.pb.h"
#include <muduo/protorpc2/service.h>
#include <memory>
// @@protoc_insertion_point(includes)

namespace collect {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_collect_2eproto();
void protobuf_AssignDesc_collect_2eproto();
void protobuf_ShutdownFile_collect_2eproto();

class ThreadInfo;
class ProcessInfo;
class ProcessInfo_Basic;
class SystemInfo;
class SystemInfo_Basic;
class SystemInfo_Performance;
class SystemInfo_Cpu;
class SystemInfo_Memory;
class SnapshotRequest;
class Result;

enum SnapshotRequest_Level {
  SnapshotRequest_Level_kSystemInfoOnly = 0,
  SnapshotRequest_Level_kSystemInfoAndProcesses = 1,
  SnapshotRequest_Level_kSystemInfoAndThreads = 2,
  SnapshotRequest_Level_kSystemInfoInitialSnapshot = 3
};
bool SnapshotRequest_Level_IsValid(int value);
const SnapshotRequest_Level SnapshotRequest_Level_Level_MIN = SnapshotRequest_Level_kSystemInfoOnly;
const SnapshotRequest_Level SnapshotRequest_Level_Level_MAX = SnapshotRequest_Level_kSystemInfoInitialSnapshot;
const int SnapshotRequest_Level_Level_ARRAYSIZE = SnapshotRequest_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* SnapshotRequest_Level_descriptor();
inline const ::std::string& SnapshotRequest_Level_Name(SnapshotRequest_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    SnapshotRequest_Level_descriptor(), value);
}
inline bool SnapshotRequest_Level_Parse(
    const ::std::string& name, SnapshotRequest_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SnapshotRequest_Level>(
    SnapshotRequest_Level_descriptor(), name, value);
}
// ===================================================================

class ThreadInfo : public ::google::protobuf::Message {
 public:
  ThreadInfo();
  virtual ~ThreadInfo();

  ThreadInfo(const ThreadInfo& from);

  inline ThreadInfo& operator=(const ThreadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadInfo& default_instance();

  void Swap(ThreadInfo* other);

  // implements Message ----------------------------------------------

  ThreadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThreadInfo& from);
  void MergeFrom(const ThreadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int64 user_cpu_ms = 3;
  inline bool has_user_cpu_ms() const;
  inline void clear_user_cpu_ms();
  static const int kUserCpuMsFieldNumber = 3;
  inline ::google::protobuf::int64 user_cpu_ms() const;
  inline void set_user_cpu_ms(::google::protobuf::int64 value);

  // optional int64 sys_cpu_ms = 4;
  inline bool has_sys_cpu_ms() const;
  inline void clear_sys_cpu_ms();
  static const int kSysCpuMsFieldNumber = 4;
  inline ::google::protobuf::int64 sys_cpu_ms() const;
  inline void set_sys_cpu_ms(::google::protobuf::int64 value);

  // optional int32 last_processor = 5;
  inline bool has_last_processor() const;
  inline void clear_last_processor();
  static const int kLastProcessorFieldNumber = 5;
  inline ::google::protobuf::int32 last_processor() const;
  inline void set_last_processor(::google::protobuf::int32 value);

  // optional int64 wait_channel = 6;
  inline bool has_wait_channel() const;
  inline void clear_wait_channel();
  static const int kWaitChannelFieldNumber = 6;
  inline ::google::protobuf::int64 wait_channel() const;
  inline void set_wait_channel(::google::protobuf::int64 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 starttime = 8;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 8;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:collect.ThreadInfo)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_user_cpu_ms();
  inline void clear_has_user_cpu_ms();
  inline void set_has_sys_cpu_ms();
  inline void clear_has_sys_cpu_ms();
  inline void set_has_last_processor();
  inline void clear_has_last_processor();
  inline void set_has_wait_channel();
  inline void clear_has_wait_channel();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 user_cpu_ms_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 last_processor_;
  ::google::protobuf::int64 sys_cpu_ms_;
  ::google::protobuf::int64 wait_channel_;
  ::std::string* name_;
  ::google::protobuf::int64 starttime_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static ThreadInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProcessInfo_Basic : public ::google::protobuf::Message {
 public:
  ProcessInfo_Basic();
  virtual ~ProcessInfo_Basic();

  ProcessInfo_Basic(const ProcessInfo_Basic& from);

  inline ProcessInfo_Basic& operator=(const ProcessInfo_Basic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessInfo_Basic& default_instance();

  void Swap(ProcessInfo_Basic* other);

  // implements Message ----------------------------------------------

  ProcessInfo_Basic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessInfo_Basic& from);
  void MergeFrom(const ProcessInfo_Basic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 euid = 2;
  inline bool has_euid() const;
  inline void clear_euid();
  static const int kEuidFieldNumber = 2;
  inline ::google::protobuf::int32 euid() const;
  inline void set_euid(::google::protobuf::int32 value);

  // optional int32 ppid = 3;
  inline bool has_ppid() const;
  inline void clear_ppid();
  static const int kPpidFieldNumber = 3;
  inline ::google::protobuf::int32 ppid() const;
  inline void set_ppid(::google::protobuf::int32 value);

  // optional int64 starttime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 4;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string cmdline = 6;
  inline int cmdline_size() const;
  inline void clear_cmdline();
  static const int kCmdlineFieldNumber = 6;
  inline const ::std::string& cmdline(int index) const;
  inline ::std::string* mutable_cmdline(int index);
  inline void set_cmdline(int index, const ::std::string& value);
  inline void set_cmdline(int index, const char* value);
  inline void set_cmdline(int index, const char* value, size_t size);
  inline ::std::string* add_cmdline();
  inline void add_cmdline(const ::std::string& value);
  inline void add_cmdline(const char* value);
  inline void add_cmdline(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cmdline() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmdline();

  // optional string executable = 7;
  inline bool has_executable() const;
  inline void clear_executable();
  static const int kExecutableFieldNumber = 7;
  inline const ::std::string& executable() const;
  inline void set_executable(const ::std::string& value);
  inline void set_executable(const char* value);
  inline void set_executable(const char* value, size_t size);
  inline ::std::string* mutable_executable();
  inline ::std::string* release_executable();
  inline void set_allocated_executable(::std::string* executable);

  // @@protoc_insertion_point(class_scope:collect.ProcessInfo.Basic)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_euid();
  inline void clear_has_euid();
  inline void set_has_ppid();
  inline void clear_has_ppid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_executable();
  inline void clear_has_executable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 euid_;
  ::google::protobuf::int64 starttime_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmdline_;
  ::std::string* executable_;
  ::google::protobuf::int32 ppid_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static ProcessInfo_Basic* default_instance_;
};
// -------------------------------------------------------------------

class ProcessInfo : public ::google::protobuf::Message {
 public:
  ProcessInfo();
  virtual ~ProcessInfo();

  ProcessInfo(const ProcessInfo& from);

  inline ProcessInfo& operator=(const ProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessInfo& default_instance();

  void Swap(ProcessInfo* other);

  // implements Message ----------------------------------------------

  ProcessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessInfo& from);
  void MergeFrom(const ProcessInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProcessInfo_Basic Basic;

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional .collect.ProcessInfo.Basic basic = 2;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 2;
  inline const ::collect::ProcessInfo_Basic& basic() const;
  inline ::collect::ProcessInfo_Basic* mutable_basic();
  inline ::collect::ProcessInfo_Basic* release_basic();
  inline void set_allocated_basic(::collect::ProcessInfo_Basic* basic);

  // optional int64 user_cpu_ms = 3;
  inline bool has_user_cpu_ms() const;
  inline void clear_user_cpu_ms();
  static const int kUserCpuMsFieldNumber = 3;
  inline ::google::protobuf::int64 user_cpu_ms() const;
  inline void set_user_cpu_ms(::google::protobuf::int64 value);

  // optional int64 sys_cpu_ms = 4;
  inline bool has_sys_cpu_ms() const;
  inline void clear_sys_cpu_ms();
  static const int kSysCpuMsFieldNumber = 4;
  inline ::google::protobuf::int64 sys_cpu_ms() const;
  inline void set_sys_cpu_ms(::google::protobuf::int64 value);

  // optional int32 last_processor = 5;
  inline bool has_last_processor() const;
  inline void clear_last_processor();
  static const int kLastProcessorFieldNumber = 5;
  inline ::google::protobuf::int32 last_processor() const;
  inline void set_last_processor(::google::protobuf::int32 value);

  // optional int32 wait_channel = 6;
  inline bool has_wait_channel() const;
  inline void clear_wait_channel();
  static const int kWaitChannelFieldNumber = 6;
  inline ::google::protobuf::int32 wait_channel() const;
  inline void set_wait_channel(::google::protobuf::int32 value);

  // optional int64 vsize_kb = 7;
  inline bool has_vsize_kb() const;
  inline void clear_vsize_kb();
  static const int kVsizeKbFieldNumber = 7;
  inline ::google::protobuf::int64 vsize_kb() const;
  inline void set_vsize_kb(::google::protobuf::int64 value);

  // optional int64 rss_kb = 8;
  inline bool has_rss_kb() const;
  inline void clear_rss_kb();
  static const int kRssKbFieldNumber = 8;
  inline ::google::protobuf::int64 rss_kb() const;
  inline void set_rss_kb(::google::protobuf::int64 value);

  // optional int32 state = 9;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 9;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int64 minor_page_faults = 10;
  inline bool has_minor_page_faults() const;
  inline void clear_minor_page_faults();
  static const int kMinorPageFaultsFieldNumber = 10;
  inline ::google::protobuf::int64 minor_page_faults() const;
  inline void set_minor_page_faults(::google::protobuf::int64 value);

  // optional int64 major_page_faults = 11;
  inline bool has_major_page_faults() const;
  inline void clear_major_page_faults();
  static const int kMajorPageFaultsFieldNumber = 11;
  inline ::google::protobuf::int64 major_page_faults() const;
  inline void set_major_page_faults(::google::protobuf::int64 value);

  // optional int32 num_threads = 12;
  inline bool has_num_threads() const;
  inline void clear_num_threads();
  static const int kNumThreadsFieldNumber = 12;
  inline ::google::protobuf::int32 num_threads() const;
  inline void set_num_threads(::google::protobuf::int32 value);

  // repeated .collect.ThreadInfo threads = 13;
  inline int threads_size() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 13;
  inline const ::collect::ThreadInfo& threads(int index) const;
  inline ::collect::ThreadInfo* mutable_threads(int index);
  inline ::collect::ThreadInfo* add_threads();
  inline const ::google::protobuf::RepeatedPtrField< ::collect::ThreadInfo >&
      threads() const;
  inline ::google::protobuf::RepeatedPtrField< ::collect::ThreadInfo >*
      mutable_threads();

  // @@protoc_insertion_point(class_scope:collect.ProcessInfo)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_user_cpu_ms();
  inline void clear_has_user_cpu_ms();
  inline void set_has_sys_cpu_ms();
  inline void clear_has_sys_cpu_ms();
  inline void set_has_last_processor();
  inline void clear_has_last_processor();
  inline void set_has_wait_channel();
  inline void clear_has_wait_channel();
  inline void set_has_vsize_kb();
  inline void clear_has_vsize_kb();
  inline void set_has_rss_kb();
  inline void clear_has_rss_kb();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_minor_page_faults();
  inline void clear_has_minor_page_faults();
  inline void set_has_major_page_faults();
  inline void clear_has_major_page_faults();
  inline void set_has_num_threads();
  inline void clear_has_num_threads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::collect::ProcessInfo_Basic* basic_;
  ::google::protobuf::int64 user_cpu_ms_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 last_processor_;
  ::google::protobuf::int64 sys_cpu_ms_;
  ::google::protobuf::int64 vsize_kb_;
  ::google::protobuf::int32 wait_channel_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 rss_kb_;
  ::google::protobuf::int64 minor_page_faults_;
  ::google::protobuf::int64 major_page_faults_;
  ::google::protobuf::RepeatedPtrField< ::collect::ThreadInfo > threads_;
  ::google::protobuf::int32 num_threads_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static ProcessInfo* default_instance_;
};
// -------------------------------------------------------------------

class SystemInfo_Basic : public ::google::protobuf::Message {
 public:
  SystemInfo_Basic();
  virtual ~SystemInfo_Basic();

  SystemInfo_Basic(const SystemInfo_Basic& from);

  inline SystemInfo_Basic& operator=(const SystemInfo_Basic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo_Basic& default_instance();

  void Swap(SystemInfo_Basic* other);

  // implements Message ----------------------------------------------

  SystemInfo_Basic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInfo_Basic& from);
  void MergeFrom(const SystemInfo_Basic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string kernel_version = 1;
  inline bool has_kernel_version() const;
  inline void clear_kernel_version();
  static const int kKernelVersionFieldNumber = 1;
  inline const ::std::string& kernel_version() const;
  inline void set_kernel_version(const ::std::string& value);
  inline void set_kernel_version(const char* value);
  inline void set_kernel_version(const char* value, size_t size);
  inline ::std::string* mutable_kernel_version();
  inline ::std::string* release_kernel_version();
  inline void set_allocated_kernel_version(::std::string* kernel_version);

  // optional string kernel_cmdline = 2;
  inline bool has_kernel_cmdline() const;
  inline void clear_kernel_cmdline();
  static const int kKernelCmdlineFieldNumber = 2;
  inline const ::std::string& kernel_cmdline() const;
  inline void set_kernel_cmdline(const ::std::string& value);
  inline void set_kernel_cmdline(const char* value);
  inline void set_kernel_cmdline(const char* value, size_t size);
  inline ::std::string* mutable_kernel_cmdline();
  inline ::std::string* release_kernel_cmdline();
  inline void set_allocated_kernel_cmdline(::std::string* kernel_cmdline);

  // optional string cpuinfo = 3;
  inline bool has_cpuinfo() const;
  inline void clear_cpuinfo();
  static const int kCpuinfoFieldNumber = 3;
  inline const ::std::string& cpuinfo() const;
  inline void set_cpuinfo(const ::std::string& value);
  inline void set_cpuinfo(const char* value);
  inline void set_cpuinfo(const char* value, size_t size);
  inline ::std::string* mutable_cpuinfo();
  inline ::std::string* release_cpuinfo();
  inline void set_allocated_cpuinfo(::std::string* cpuinfo);

  // @@protoc_insertion_point(class_scope:collect.SystemInfo.Basic)
 private:
  inline void set_has_kernel_version();
  inline void clear_has_kernel_version();
  inline void set_has_kernel_cmdline();
  inline void clear_has_kernel_cmdline();
  inline void set_has_cpuinfo();
  inline void clear_has_cpuinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* kernel_version_;
  ::std::string* kernel_cmdline_;
  ::std::string* cpuinfo_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static SystemInfo_Basic* default_instance_;
};
// -------------------------------------------------------------------

class SystemInfo_Performance : public ::google::protobuf::Message {
 public:
  SystemInfo_Performance();
  virtual ~SystemInfo_Performance();

  SystemInfo_Performance(const SystemInfo_Performance& from);

  inline SystemInfo_Performance& operator=(const SystemInfo_Performance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo_Performance& default_instance();

  void Swap(SystemInfo_Performance* other);

  // implements Message ----------------------------------------------

  SystemInfo_Performance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInfo_Performance& from);
  void MergeFrom(const SystemInfo_Performance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 loadavg_1m_milli = 2;
  inline bool has_loadavg_1m_milli() const;
  inline void clear_loadavg_1m_milli();
  static const int kLoadavg1MMilliFieldNumber = 2;
  inline ::google::protobuf::int32 loadavg_1m_milli() const;
  inline void set_loadavg_1m_milli(::google::protobuf::int32 value);

  // optional int32 loadavg_5m_milli = 3;
  inline bool has_loadavg_5m_milli() const;
  inline void clear_loadavg_5m_milli();
  static const int kLoadavg5MMilliFieldNumber = 3;
  inline ::google::protobuf::int32 loadavg_5m_milli() const;
  inline void set_loadavg_5m_milli(::google::protobuf::int32 value);

  // optional int32 loadavg_15m_milli = 4;
  inline bool has_loadavg_15m_milli() const;
  inline void clear_loadavg_15m_milli();
  static const int kLoadavg15MMilliFieldNumber = 4;
  inline ::google::protobuf::int32 loadavg_15m_milli() const;
  inline void set_loadavg_15m_milli(::google::protobuf::int32 value);

  // optional int32 running_tasks = 5;
  inline bool has_running_tasks() const;
  inline void clear_running_tasks();
  static const int kRunningTasksFieldNumber = 5;
  inline ::google::protobuf::int32 running_tasks() const;
  inline void set_running_tasks(::google::protobuf::int32 value);

  // optional int32 total_tasks = 6;
  inline bool has_total_tasks() const;
  inline void clear_total_tasks();
  static const int kTotalTasksFieldNumber = 6;
  inline ::google::protobuf::int32 total_tasks() const;
  inline void set_total_tasks(::google::protobuf::int32 value);

  // optional int32 last_pid = 7;
  inline bool has_last_pid() const;
  inline void clear_last_pid();
  static const int kLastPidFieldNumber = 7;
  inline ::google::protobuf::int32 last_pid() const;
  inline void set_last_pid(::google::protobuf::int32 value);

  // optional int64 boot_time = 9;
  inline bool has_boot_time() const;
  inline void clear_boot_time();
  static const int kBootTimeFieldNumber = 9;
  inline ::google::protobuf::int64 boot_time() const;
  inline void set_boot_time(::google::protobuf::int64 value);

  // optional int64 context_switches = 10;
  inline bool has_context_switches() const;
  inline void clear_context_switches();
  static const int kContextSwitchesFieldNumber = 10;
  inline ::google::protobuf::int64 context_switches() const;
  inline void set_context_switches(::google::protobuf::int64 value);

  // optional int64 processes_created = 11;
  inline bool has_processes_created() const;
  inline void clear_processes_created();
  static const int kProcessesCreatedFieldNumber = 11;
  inline ::google::protobuf::int64 processes_created() const;
  inline void set_processes_created(::google::protobuf::int64 value);

  // optional int32 processes_running = 12;
  inline bool has_processes_running() const;
  inline void clear_processes_running();
  static const int kProcessesRunningFieldNumber = 12;
  inline ::google::protobuf::int32 processes_running() const;
  inline void set_processes_running(::google::protobuf::int32 value);

  // optional int32 processes_blocked = 13;
  inline bool has_processes_blocked() const;
  inline void clear_processes_blocked();
  static const int kProcessesBlockedFieldNumber = 13;
  inline ::google::protobuf::int32 processes_blocked() const;
  inline void set_processes_blocked(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:collect.SystemInfo.Performance)
 private:
  inline void set_has_loadavg_1m_milli();
  inline void clear_has_loadavg_1m_milli();
  inline void set_has_loadavg_5m_milli();
  inline void clear_has_loadavg_5m_milli();
  inline void set_has_loadavg_15m_milli();
  inline void clear_has_loadavg_15m_milli();
  inline void set_has_running_tasks();
  inline void clear_has_running_tasks();
  inline void set_has_total_tasks();
  inline void clear_has_total_tasks();
  inline void set_has_last_pid();
  inline void clear_has_last_pid();
  inline void set_has_boot_time();
  inline void clear_has_boot_time();
  inline void set_has_context_switches();
  inline void clear_has_context_switches();
  inline void set_has_processes_created();
  inline void clear_has_processes_created();
  inline void set_has_processes_running();
  inline void clear_has_processes_running();
  inline void set_has_processes_blocked();
  inline void clear_has_processes_blocked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 loadavg_1m_milli_;
  ::google::protobuf::int32 loadavg_5m_milli_;
  ::google::protobuf::int32 loadavg_15m_milli_;
  ::google::protobuf::int32 running_tasks_;
  ::google::protobuf::int32 total_tasks_;
  ::google::protobuf::int32 last_pid_;
  ::google::protobuf::int64 boot_time_;
  ::google::protobuf::int64 context_switches_;
  ::google::protobuf::int64 processes_created_;
  ::google::protobuf::int32 processes_running_;
  ::google::protobuf::int32 processes_blocked_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static SystemInfo_Performance* default_instance_;
};
// -------------------------------------------------------------------

class SystemInfo_Cpu : public ::google::protobuf::Message {
 public:
  SystemInfo_Cpu();
  virtual ~SystemInfo_Cpu();

  SystemInfo_Cpu(const SystemInfo_Cpu& from);

  inline SystemInfo_Cpu& operator=(const SystemInfo_Cpu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo_Cpu& default_instance();

  void Swap(SystemInfo_Cpu* other);

  // implements Message ----------------------------------------------

  SystemInfo_Cpu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInfo_Cpu& from);
  void MergeFrom(const SystemInfo_Cpu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 user_ms = 1;
  inline bool has_user_ms() const;
  inline void clear_user_ms();
  static const int kUserMsFieldNumber = 1;
  inline ::google::protobuf::int64 user_ms() const;
  inline void set_user_ms(::google::protobuf::int64 value);

  // optional int64 nice_ms = 2;
  inline bool has_nice_ms() const;
  inline void clear_nice_ms();
  static const int kNiceMsFieldNumber = 2;
  inline ::google::protobuf::int64 nice_ms() const;
  inline void set_nice_ms(::google::protobuf::int64 value);

  // optional int64 sys_ms = 3;
  inline bool has_sys_ms() const;
  inline void clear_sys_ms();
  static const int kSysMsFieldNumber = 3;
  inline ::google::protobuf::int64 sys_ms() const;
  inline void set_sys_ms(::google::protobuf::int64 value);

  // optional int64 idle_ms = 4;
  inline bool has_idle_ms() const;
  inline void clear_idle_ms();
  static const int kIdleMsFieldNumber = 4;
  inline ::google::protobuf::int64 idle_ms() const;
  inline void set_idle_ms(::google::protobuf::int64 value);

  // optional int64 iowait_ms = 5;
  inline bool has_iowait_ms() const;
  inline void clear_iowait_ms();
  static const int kIowaitMsFieldNumber = 5;
  inline ::google::protobuf::int64 iowait_ms() const;
  inline void set_iowait_ms(::google::protobuf::int64 value);

  // optional int64 irq_ms = 6;
  inline bool has_irq_ms() const;
  inline void clear_irq_ms();
  static const int kIrqMsFieldNumber = 6;
  inline ::google::protobuf::int64 irq_ms() const;
  inline void set_irq_ms(::google::protobuf::int64 value);

  // optional int64 softirq_ms = 7;
  inline bool has_softirq_ms() const;
  inline void clear_softirq_ms();
  static const int kSoftirqMsFieldNumber = 7;
  inline ::google::protobuf::int64 softirq_ms() const;
  inline void set_softirq_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:collect.SystemInfo.Cpu)
 private:
  inline void set_has_user_ms();
  inline void clear_has_user_ms();
  inline void set_has_nice_ms();
  inline void clear_has_nice_ms();
  inline void set_has_sys_ms();
  inline void clear_has_sys_ms();
  inline void set_has_idle_ms();
  inline void clear_has_idle_ms();
  inline void set_has_iowait_ms();
  inline void clear_has_iowait_ms();
  inline void set_has_irq_ms();
  inline void clear_has_irq_ms();
  inline void set_has_softirq_ms();
  inline void clear_has_softirq_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 user_ms_;
  ::google::protobuf::int64 nice_ms_;
  ::google::protobuf::int64 sys_ms_;
  ::google::protobuf::int64 idle_ms_;
  ::google::protobuf::int64 iowait_ms_;
  ::google::protobuf::int64 irq_ms_;
  ::google::protobuf::int64 softirq_ms_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static SystemInfo_Cpu* default_instance_;
};
// -------------------------------------------------------------------

class SystemInfo_Memory : public ::google::protobuf::Message {
 public:
  SystemInfo_Memory();
  virtual ~SystemInfo_Memory();

  SystemInfo_Memory(const SystemInfo_Memory& from);

  inline SystemInfo_Memory& operator=(const SystemInfo_Memory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo_Memory& default_instance();

  void Swap(SystemInfo_Memory* other);

  // implements Message ----------------------------------------------

  SystemInfo_Memory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInfo_Memory& from);
  void MergeFrom(const SystemInfo_Memory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 total_kb = 1;
  inline bool has_total_kb() const;
  inline void clear_total_kb();
  static const int kTotalKbFieldNumber = 1;
  inline ::google::protobuf::int64 total_kb() const;
  inline void set_total_kb(::google::protobuf::int64 value);

  // optional int64 free_kb = 2;
  inline bool has_free_kb() const;
  inline void clear_free_kb();
  static const int kFreeKbFieldNumber = 2;
  inline ::google::protobuf::int64 free_kb() const;
  inline void set_free_kb(::google::protobuf::int64 value);

  // optional int64 buffers_kb = 3;
  inline bool has_buffers_kb() const;
  inline void clear_buffers_kb();
  static const int kBuffersKbFieldNumber = 3;
  inline ::google::protobuf::int64 buffers_kb() const;
  inline void set_buffers_kb(::google::protobuf::int64 value);

  // optional int64 cached_kb = 4;
  inline bool has_cached_kb() const;
  inline void clear_cached_kb();
  static const int kCachedKbFieldNumber = 4;
  inline ::google::protobuf::int64 cached_kb() const;
  inline void set_cached_kb(::google::protobuf::int64 value);

  // optional int64 swap_total_kb = 5;
  inline bool has_swap_total_kb() const;
  inline void clear_swap_total_kb();
  static const int kSwapTotalKbFieldNumber = 5;
  inline ::google::protobuf::int64 swap_total_kb() const;
  inline void set_swap_total_kb(::google::protobuf::int64 value);

  // optional int64 swap_free_kb = 6;
  inline bool has_swap_free_kb() const;
  inline void clear_swap_free_kb();
  static const int kSwapFreeKbFieldNumber = 6;
  inline ::google::protobuf::int64 swap_free_kb() const;
  inline void set_swap_free_kb(::google::protobuf::int64 value);

  // optional int64 swap_cached_kb = 7;
  inline bool has_swap_cached_kb() const;
  inline void clear_swap_cached_kb();
  static const int kSwapCachedKbFieldNumber = 7;
  inline ::google::protobuf::int64 swap_cached_kb() const;
  inline void set_swap_cached_kb(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:collect.SystemInfo.Memory)
 private:
  inline void set_has_total_kb();
  inline void clear_has_total_kb();
  inline void set_has_free_kb();
  inline void clear_has_free_kb();
  inline void set_has_buffers_kb();
  inline void clear_has_buffers_kb();
  inline void set_has_cached_kb();
  inline void clear_has_cached_kb();
  inline void set_has_swap_total_kb();
  inline void clear_has_swap_total_kb();
  inline void set_has_swap_free_kb();
  inline void clear_has_swap_free_kb();
  inline void set_has_swap_cached_kb();
  inline void clear_has_swap_cached_kb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 total_kb_;
  ::google::protobuf::int64 free_kb_;
  ::google::protobuf::int64 buffers_kb_;
  ::google::protobuf::int64 cached_kb_;
  ::google::protobuf::int64 swap_total_kb_;
  ::google::protobuf::int64 swap_free_kb_;
  ::google::protobuf::int64 swap_cached_kb_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static SystemInfo_Memory* default_instance_;
};
// -------------------------------------------------------------------

class SystemInfo : public ::google::protobuf::Message {
 public:
  SystemInfo();
  virtual ~SystemInfo();

  SystemInfo(const SystemInfo& from);

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo& default_instance();

  void Swap(SystemInfo* other);

  // implements Message ----------------------------------------------

  SystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SystemInfo_Basic Basic;
  typedef SystemInfo_Performance Performance;
  typedef SystemInfo_Cpu Cpu;
  typedef SystemInfo_Memory Memory;

  // accessors -------------------------------------------------------

  // optional .collect.SystemInfo.Basic basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::collect::SystemInfo_Basic& basic() const;
  inline ::collect::SystemInfo_Basic* mutable_basic();
  inline ::collect::SystemInfo_Basic* release_basic();
  inline void set_allocated_basic(::collect::SystemInfo_Basic* basic);

  // optional .collect.SystemInfo.Performance performance = 2;
  inline bool has_performance() const;
  inline void clear_performance();
  static const int kPerformanceFieldNumber = 2;
  inline const ::collect::SystemInfo_Performance& performance() const;
  inline ::collect::SystemInfo_Performance* mutable_performance();
  inline ::collect::SystemInfo_Performance* release_performance();
  inline void set_allocated_performance(::collect::SystemInfo_Performance* performance);

  // optional .collect.SystemInfo.Cpu all_cpu = 3;
  inline bool has_all_cpu() const;
  inline void clear_all_cpu();
  static const int kAllCpuFieldNumber = 3;
  inline const ::collect::SystemInfo_Cpu& all_cpu() const;
  inline ::collect::SystemInfo_Cpu* mutable_all_cpu();
  inline ::collect::SystemInfo_Cpu* release_all_cpu();
  inline void set_allocated_all_cpu(::collect::SystemInfo_Cpu* all_cpu);

  // repeated .collect.SystemInfo.Cpu cpus = 4;
  inline int cpus_size() const;
  inline void clear_cpus();
  static const int kCpusFieldNumber = 4;
  inline const ::collect::SystemInfo_Cpu& cpus(int index) const;
  inline ::collect::SystemInfo_Cpu* mutable_cpus(int index);
  inline ::collect::SystemInfo_Cpu* add_cpus();
  inline const ::google::protobuf::RepeatedPtrField< ::collect::SystemInfo_Cpu >&
      cpus() const;
  inline ::google::protobuf::RepeatedPtrField< ::collect::SystemInfo_Cpu >*
      mutable_cpus();

  // optional fixed64 muduo_timestamp = 5;
  inline bool has_muduo_timestamp() const;
  inline void clear_muduo_timestamp();
  static const int kMuduoTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 muduo_timestamp() const;
  inline void set_muduo_timestamp(::google::protobuf::uint64 value);

  // optional .collect.SystemInfo.Memory memory = 8;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 8;
  inline const ::collect::SystemInfo_Memory& memory() const;
  inline ::collect::SystemInfo_Memory* mutable_memory();
  inline ::collect::SystemInfo_Memory* release_memory();
  inline void set_allocated_memory(::collect::SystemInfo_Memory* memory);

  // repeated .collect.ProcessInfo processes = 14;
  inline int processes_size() const;
  inline void clear_processes();
  static const int kProcessesFieldNumber = 14;
  inline const ::collect::ProcessInfo& processes(int index) const;
  inline ::collect::ProcessInfo* mutable_processes(int index);
  inline ::collect::ProcessInfo* add_processes();
  inline const ::google::protobuf::RepeatedPtrField< ::collect::ProcessInfo >&
      processes() const;
  inline ::google::protobuf::RepeatedPtrField< ::collect::ProcessInfo >*
      mutable_processes();

  // optional int64 user_cpu_ms = 6;
  inline bool has_user_cpu_ms() const;
  inline void clear_user_cpu_ms();
  static const int kUserCpuMsFieldNumber = 6;
  inline ::google::protobuf::int64 user_cpu_ms() const;
  inline void set_user_cpu_ms(::google::protobuf::int64 value);

  // optional int64 sys_cpu_ms = 7;
  inline bool has_sys_cpu_ms() const;
  inline void clear_sys_cpu_ms();
  static const int kSysCpuMsFieldNumber = 7;
  inline ::google::protobuf::int64 sys_cpu_ms() const;
  inline void set_sys_cpu_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:collect.SystemInfo)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_performance();
  inline void clear_has_performance();
  inline void set_has_all_cpu();
  inline void clear_has_all_cpu();
  inline void set_has_muduo_timestamp();
  inline void clear_has_muduo_timestamp();
  inline void set_has_memory();
  inline void clear_has_memory();
  inline void set_has_user_cpu_ms();
  inline void clear_has_user_cpu_ms();
  inline void set_has_sys_cpu_ms();
  inline void clear_has_sys_cpu_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::collect::SystemInfo_Basic* basic_;
  ::collect::SystemInfo_Performance* performance_;
  ::collect::SystemInfo_Cpu* all_cpu_;
  ::google::protobuf::RepeatedPtrField< ::collect::SystemInfo_Cpu > cpus_;
  ::google::protobuf::uint64 muduo_timestamp_;
  ::collect::SystemInfo_Memory* memory_;
  ::google::protobuf::RepeatedPtrField< ::collect::ProcessInfo > processes_;
  ::google::protobuf::int64 user_cpu_ms_;
  ::google::protobuf::int64 sys_cpu_ms_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static SystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class SnapshotRequest : public ::google::protobuf::Message {
 public:
  SnapshotRequest();
  virtual ~SnapshotRequest();

  SnapshotRequest(const SnapshotRequest& from);

  inline SnapshotRequest& operator=(const SnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotRequest& default_instance();

  void Swap(SnapshotRequest* other);

  // implements Message ----------------------------------------------

  SnapshotRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotRequest& from);
  void MergeFrom(const SnapshotRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SnapshotRequest_Level Level;
  static const Level kSystemInfoOnly = SnapshotRequest_Level_kSystemInfoOnly;
  static const Level kSystemInfoAndProcesses = SnapshotRequest_Level_kSystemInfoAndProcesses;
  static const Level kSystemInfoAndThreads = SnapshotRequest_Level_kSystemInfoAndThreads;
  static const Level kSystemInfoInitialSnapshot = SnapshotRequest_Level_kSystemInfoInitialSnapshot;
  static inline bool Level_IsValid(int value) {
    return SnapshotRequest_Level_IsValid(value);
  }
  static const Level Level_MIN =
    SnapshotRequest_Level_Level_MIN;
  static const Level Level_MAX =
    SnapshotRequest_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    SnapshotRequest_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return SnapshotRequest_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return SnapshotRequest_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return SnapshotRequest_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .collect.SnapshotRequest.Level level = 1 [default = kSystemInfoOnly];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::collect::SnapshotRequest_Level level() const;
  inline void set_level(::collect::SnapshotRequest_Level value);

  // @@protoc_insertion_point(class_scope:collect.SnapshotRequest)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int level_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static SnapshotRequest* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool succeed = 1;
  inline bool has_succeed() const;
  inline void clear_succeed();
  static const int kSucceedFieldNumber = 1;
  inline bool succeed() const;
  inline void set_succeed(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:collect.Result)
 private:
  inline void set_has_succeed();
  inline void clear_has_succeed();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  bool succeed_;
  friend void  protobuf_AddDesc_collect_2eproto();
  friend void protobuf_AssignDesc_collect_2eproto();
  friend void protobuf_ShutdownFile_collect_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// ThreadInfo

// optional int32 tid = 1;
inline bool ThreadInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThreadInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThreadInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThreadInfo::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 ThreadInfo::tid() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.tid)
  return tid_;
}
inline void ThreadInfo::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.tid)
}

// optional int64 user_cpu_ms = 3;
inline bool ThreadInfo::has_user_cpu_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThreadInfo::set_has_user_cpu_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThreadInfo::clear_has_user_cpu_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThreadInfo::clear_user_cpu_ms() {
  user_cpu_ms_ = GOOGLE_LONGLONG(0);
  clear_has_user_cpu_ms();
}
inline ::google::protobuf::int64 ThreadInfo::user_cpu_ms() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.user_cpu_ms)
  return user_cpu_ms_;
}
inline void ThreadInfo::set_user_cpu_ms(::google::protobuf::int64 value) {
  set_has_user_cpu_ms();
  user_cpu_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.user_cpu_ms)
}

// optional int64 sys_cpu_ms = 4;
inline bool ThreadInfo::has_sys_cpu_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThreadInfo::set_has_sys_cpu_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThreadInfo::clear_has_sys_cpu_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThreadInfo::clear_sys_cpu_ms() {
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  clear_has_sys_cpu_ms();
}
inline ::google::protobuf::int64 ThreadInfo::sys_cpu_ms() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.sys_cpu_ms)
  return sys_cpu_ms_;
}
inline void ThreadInfo::set_sys_cpu_ms(::google::protobuf::int64 value) {
  set_has_sys_cpu_ms();
  sys_cpu_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.sys_cpu_ms)
}

// optional int32 last_processor = 5;
inline bool ThreadInfo::has_last_processor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThreadInfo::set_has_last_processor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThreadInfo::clear_has_last_processor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThreadInfo::clear_last_processor() {
  last_processor_ = 0;
  clear_has_last_processor();
}
inline ::google::protobuf::int32 ThreadInfo::last_processor() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.last_processor)
  return last_processor_;
}
inline void ThreadInfo::set_last_processor(::google::protobuf::int32 value) {
  set_has_last_processor();
  last_processor_ = value;
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.last_processor)
}

// optional int64 wait_channel = 6;
inline bool ThreadInfo::has_wait_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThreadInfo::set_has_wait_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThreadInfo::clear_has_wait_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThreadInfo::clear_wait_channel() {
  wait_channel_ = GOOGLE_LONGLONG(0);
  clear_has_wait_channel();
}
inline ::google::protobuf::int64 ThreadInfo::wait_channel() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.wait_channel)
  return wait_channel_;
}
inline void ThreadInfo::set_wait_channel(::google::protobuf::int64 value) {
  set_has_wait_channel();
  wait_channel_ = value;
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.wait_channel)
}

// optional string name = 7;
inline bool ThreadInfo::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThreadInfo::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThreadInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThreadInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ThreadInfo::name() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.name)
  return *name_;
}
inline void ThreadInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.name)
}
inline void ThreadInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.ThreadInfo.name)
}
inline void ThreadInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.ThreadInfo.name)
}
inline ::std::string* ThreadInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.ThreadInfo.name)
  return name_;
}
inline ::std::string* ThreadInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ThreadInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.ThreadInfo.name)
}

// optional int64 starttime = 8;
inline bool ThreadInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ThreadInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ThreadInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ThreadInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 ThreadInfo::starttime() const {
  // @@protoc_insertion_point(field_get:collect.ThreadInfo.starttime)
  return starttime_;
}
inline void ThreadInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:collect.ThreadInfo.starttime)
}

// -------------------------------------------------------------------

// ProcessInfo_Basic

// optional int32 uid = 1;
inline bool ProcessInfo_Basic::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessInfo_Basic::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessInfo_Basic::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessInfo_Basic::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ProcessInfo_Basic::uid() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.uid)
  return uid_;
}
inline void ProcessInfo_Basic::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.uid)
}

// optional int32 euid = 2;
inline bool ProcessInfo_Basic::has_euid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessInfo_Basic::set_has_euid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessInfo_Basic::clear_has_euid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessInfo_Basic::clear_euid() {
  euid_ = 0;
  clear_has_euid();
}
inline ::google::protobuf::int32 ProcessInfo_Basic::euid() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.euid)
  return euid_;
}
inline void ProcessInfo_Basic::set_euid(::google::protobuf::int32 value) {
  set_has_euid();
  euid_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.euid)
}

// optional int32 ppid = 3;
inline bool ProcessInfo_Basic::has_ppid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessInfo_Basic::set_has_ppid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessInfo_Basic::clear_has_ppid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessInfo_Basic::clear_ppid() {
  ppid_ = 0;
  clear_has_ppid();
}
inline ::google::protobuf::int32 ProcessInfo_Basic::ppid() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.ppid)
  return ppid_;
}
inline void ProcessInfo_Basic::set_ppid(::google::protobuf::int32 value) {
  set_has_ppid();
  ppid_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.ppid)
}

// optional int64 starttime = 4;
inline bool ProcessInfo_Basic::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessInfo_Basic::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessInfo_Basic::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessInfo_Basic::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 ProcessInfo_Basic::starttime() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.starttime)
  return starttime_;
}
inline void ProcessInfo_Basic::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.starttime)
}

// optional string name = 5;
inline bool ProcessInfo_Basic::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessInfo_Basic::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProcessInfo_Basic::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProcessInfo_Basic::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProcessInfo_Basic::name() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.name)
  return *name_;
}
inline void ProcessInfo_Basic::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.name)
}
inline void ProcessInfo_Basic::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.ProcessInfo.Basic.name)
}
inline void ProcessInfo_Basic::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.ProcessInfo.Basic.name)
}
inline ::std::string* ProcessInfo_Basic::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.ProcessInfo.Basic.name)
  return name_;
}
inline ::std::string* ProcessInfo_Basic::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProcessInfo_Basic::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.ProcessInfo.Basic.name)
}

// repeated string cmdline = 6;
inline int ProcessInfo_Basic::cmdline_size() const {
  return cmdline_.size();
}
inline void ProcessInfo_Basic::clear_cmdline() {
  cmdline_.Clear();
}
inline const ::std::string& ProcessInfo_Basic::cmdline(int index) const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.cmdline)
  return cmdline_.Get(index);
}
inline ::std::string* ProcessInfo_Basic::mutable_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:collect.ProcessInfo.Basic.cmdline)
  return cmdline_.Mutable(index);
}
inline void ProcessInfo_Basic::set_cmdline(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.cmdline)
  cmdline_.Mutable(index)->assign(value);
}
inline void ProcessInfo_Basic::set_cmdline(int index, const char* value) {
  cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.ProcessInfo.Basic.cmdline)
}
inline void ProcessInfo_Basic::set_cmdline(int index, const char* value, size_t size) {
  cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.ProcessInfo.Basic.cmdline)
}
inline ::std::string* ProcessInfo_Basic::add_cmdline() {
  return cmdline_.Add();
}
inline void ProcessInfo_Basic::add_cmdline(const ::std::string& value) {
  cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:collect.ProcessInfo.Basic.cmdline)
}
inline void ProcessInfo_Basic::add_cmdline(const char* value) {
  cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:collect.ProcessInfo.Basic.cmdline)
}
inline void ProcessInfo_Basic::add_cmdline(const char* value, size_t size) {
  cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:collect.ProcessInfo.Basic.cmdline)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessInfo_Basic::cmdline() const {
  // @@protoc_insertion_point(field_list:collect.ProcessInfo.Basic.cmdline)
  return cmdline_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessInfo_Basic::mutable_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:collect.ProcessInfo.Basic.cmdline)
  return &cmdline_;
}

// optional string executable = 7;
inline bool ProcessInfo_Basic::has_executable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessInfo_Basic::set_has_executable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProcessInfo_Basic::clear_has_executable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProcessInfo_Basic::clear_executable() {
  if (executable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executable_->clear();
  }
  clear_has_executable();
}
inline const ::std::string& ProcessInfo_Basic::executable() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.Basic.executable)
  return *executable_;
}
inline void ProcessInfo_Basic::set_executable(const ::std::string& value) {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executable_ = new ::std::string;
  }
  executable_->assign(value);
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.Basic.executable)
}
inline void ProcessInfo_Basic::set_executable(const char* value) {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executable_ = new ::std::string;
  }
  executable_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.ProcessInfo.Basic.executable)
}
inline void ProcessInfo_Basic::set_executable(const char* value, size_t size) {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executable_ = new ::std::string;
  }
  executable_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.ProcessInfo.Basic.executable)
}
inline ::std::string* ProcessInfo_Basic::mutable_executable() {
  set_has_executable();
  if (executable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executable_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.ProcessInfo.Basic.executable)
  return executable_;
}
inline ::std::string* ProcessInfo_Basic::release_executable() {
  clear_has_executable();
  if (executable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = executable_;
    executable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProcessInfo_Basic::set_allocated_executable(::std::string* executable) {
  if (executable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete executable_;
  }
  if (executable) {
    set_has_executable();
    executable_ = executable;
  } else {
    clear_has_executable();
    executable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.ProcessInfo.Basic.executable)
}

// -------------------------------------------------------------------

// ProcessInfo

// optional int32 pid = 1;
inline bool ProcessInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 ProcessInfo::pid() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.pid)
  return pid_;
}
inline void ProcessInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.pid)
}

// optional .collect.ProcessInfo.Basic basic = 2;
inline bool ProcessInfo::has_basic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessInfo::set_has_basic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessInfo::clear_has_basic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessInfo::clear_basic() {
  if (basic_ != NULL) basic_->::collect::ProcessInfo_Basic::Clear();
  clear_has_basic();
}
inline const ::collect::ProcessInfo_Basic& ProcessInfo::basic() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.basic)
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
inline ::collect::ProcessInfo_Basic* ProcessInfo::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::collect::ProcessInfo_Basic;
  // @@protoc_insertion_point(field_mutable:collect.ProcessInfo.basic)
  return basic_;
}
inline ::collect::ProcessInfo_Basic* ProcessInfo::release_basic() {
  clear_has_basic();
  ::collect::ProcessInfo_Basic* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void ProcessInfo::set_allocated_basic(::collect::ProcessInfo_Basic* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
  // @@protoc_insertion_point(field_set_allocated:collect.ProcessInfo.basic)
}

// optional int64 user_cpu_ms = 3;
inline bool ProcessInfo::has_user_cpu_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessInfo::set_has_user_cpu_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessInfo::clear_has_user_cpu_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessInfo::clear_user_cpu_ms() {
  user_cpu_ms_ = GOOGLE_LONGLONG(0);
  clear_has_user_cpu_ms();
}
inline ::google::protobuf::int64 ProcessInfo::user_cpu_ms() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.user_cpu_ms)
  return user_cpu_ms_;
}
inline void ProcessInfo::set_user_cpu_ms(::google::protobuf::int64 value) {
  set_has_user_cpu_ms();
  user_cpu_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.user_cpu_ms)
}

// optional int64 sys_cpu_ms = 4;
inline bool ProcessInfo::has_sys_cpu_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessInfo::set_has_sys_cpu_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessInfo::clear_has_sys_cpu_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessInfo::clear_sys_cpu_ms() {
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  clear_has_sys_cpu_ms();
}
inline ::google::protobuf::int64 ProcessInfo::sys_cpu_ms() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.sys_cpu_ms)
  return sys_cpu_ms_;
}
inline void ProcessInfo::set_sys_cpu_ms(::google::protobuf::int64 value) {
  set_has_sys_cpu_ms();
  sys_cpu_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.sys_cpu_ms)
}

// optional int32 last_processor = 5;
inline bool ProcessInfo::has_last_processor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessInfo::set_has_last_processor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProcessInfo::clear_has_last_processor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProcessInfo::clear_last_processor() {
  last_processor_ = 0;
  clear_has_last_processor();
}
inline ::google::protobuf::int32 ProcessInfo::last_processor() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.last_processor)
  return last_processor_;
}
inline void ProcessInfo::set_last_processor(::google::protobuf::int32 value) {
  set_has_last_processor();
  last_processor_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.last_processor)
}

// optional int32 wait_channel = 6;
inline bool ProcessInfo::has_wait_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessInfo::set_has_wait_channel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProcessInfo::clear_has_wait_channel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProcessInfo::clear_wait_channel() {
  wait_channel_ = 0;
  clear_has_wait_channel();
}
inline ::google::protobuf::int32 ProcessInfo::wait_channel() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.wait_channel)
  return wait_channel_;
}
inline void ProcessInfo::set_wait_channel(::google::protobuf::int32 value) {
  set_has_wait_channel();
  wait_channel_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.wait_channel)
}

// optional int64 vsize_kb = 7;
inline bool ProcessInfo::has_vsize_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessInfo::set_has_vsize_kb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProcessInfo::clear_has_vsize_kb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProcessInfo::clear_vsize_kb() {
  vsize_kb_ = GOOGLE_LONGLONG(0);
  clear_has_vsize_kb();
}
inline ::google::protobuf::int64 ProcessInfo::vsize_kb() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.vsize_kb)
  return vsize_kb_;
}
inline void ProcessInfo::set_vsize_kb(::google::protobuf::int64 value) {
  set_has_vsize_kb();
  vsize_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.vsize_kb)
}

// optional int64 rss_kb = 8;
inline bool ProcessInfo::has_rss_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProcessInfo::set_has_rss_kb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProcessInfo::clear_has_rss_kb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProcessInfo::clear_rss_kb() {
  rss_kb_ = GOOGLE_LONGLONG(0);
  clear_has_rss_kb();
}
inline ::google::protobuf::int64 ProcessInfo::rss_kb() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.rss_kb)
  return rss_kb_;
}
inline void ProcessInfo::set_rss_kb(::google::protobuf::int64 value) {
  set_has_rss_kb();
  rss_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.rss_kb)
}

// optional int32 state = 9;
inline bool ProcessInfo::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessInfo::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProcessInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProcessInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ProcessInfo::state() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.state)
  return state_;
}
inline void ProcessInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.state)
}

// optional int64 minor_page_faults = 10;
inline bool ProcessInfo::has_minor_page_faults() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProcessInfo::set_has_minor_page_faults() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProcessInfo::clear_has_minor_page_faults() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProcessInfo::clear_minor_page_faults() {
  minor_page_faults_ = GOOGLE_LONGLONG(0);
  clear_has_minor_page_faults();
}
inline ::google::protobuf::int64 ProcessInfo::minor_page_faults() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.minor_page_faults)
  return minor_page_faults_;
}
inline void ProcessInfo::set_minor_page_faults(::google::protobuf::int64 value) {
  set_has_minor_page_faults();
  minor_page_faults_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.minor_page_faults)
}

// optional int64 major_page_faults = 11;
inline bool ProcessInfo::has_major_page_faults() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProcessInfo::set_has_major_page_faults() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProcessInfo::clear_has_major_page_faults() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProcessInfo::clear_major_page_faults() {
  major_page_faults_ = GOOGLE_LONGLONG(0);
  clear_has_major_page_faults();
}
inline ::google::protobuf::int64 ProcessInfo::major_page_faults() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.major_page_faults)
  return major_page_faults_;
}
inline void ProcessInfo::set_major_page_faults(::google::protobuf::int64 value) {
  set_has_major_page_faults();
  major_page_faults_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.major_page_faults)
}

// optional int32 num_threads = 12;
inline bool ProcessInfo::has_num_threads() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProcessInfo::set_has_num_threads() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProcessInfo::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProcessInfo::clear_num_threads() {
  num_threads_ = 0;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 ProcessInfo::num_threads() const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.num_threads)
  return num_threads_;
}
inline void ProcessInfo::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
  // @@protoc_insertion_point(field_set:collect.ProcessInfo.num_threads)
}

// repeated .collect.ThreadInfo threads = 13;
inline int ProcessInfo::threads_size() const {
  return threads_.size();
}
inline void ProcessInfo::clear_threads() {
  threads_.Clear();
}
inline const ::collect::ThreadInfo& ProcessInfo::threads(int index) const {
  // @@protoc_insertion_point(field_get:collect.ProcessInfo.threads)
  return threads_.Get(index);
}
inline ::collect::ThreadInfo* ProcessInfo::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:collect.ProcessInfo.threads)
  return threads_.Mutable(index);
}
inline ::collect::ThreadInfo* ProcessInfo::add_threads() {
  // @@protoc_insertion_point(field_add:collect.ProcessInfo.threads)
  return threads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::collect::ThreadInfo >&
ProcessInfo::threads() const {
  // @@protoc_insertion_point(field_list:collect.ProcessInfo.threads)
  return threads_;
}
inline ::google::protobuf::RepeatedPtrField< ::collect::ThreadInfo >*
ProcessInfo::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:collect.ProcessInfo.threads)
  return &threads_;
}

// -------------------------------------------------------------------

// SystemInfo_Basic

// optional string kernel_version = 1;
inline bool SystemInfo_Basic::has_kernel_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo_Basic::set_has_kernel_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo_Basic::clear_has_kernel_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo_Basic::clear_kernel_version() {
  if (kernel_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_version_->clear();
  }
  clear_has_kernel_version();
}
inline const ::std::string& SystemInfo_Basic::kernel_version() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Basic.kernel_version)
  return *kernel_version_;
}
inline void SystemInfo_Basic::set_kernel_version(const ::std::string& value) {
  set_has_kernel_version();
  if (kernel_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_version_ = new ::std::string;
  }
  kernel_version_->assign(value);
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Basic.kernel_version)
}
inline void SystemInfo_Basic::set_kernel_version(const char* value) {
  set_has_kernel_version();
  if (kernel_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_version_ = new ::std::string;
  }
  kernel_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.SystemInfo.Basic.kernel_version)
}
inline void SystemInfo_Basic::set_kernel_version(const char* value, size_t size) {
  set_has_kernel_version();
  if (kernel_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_version_ = new ::std::string;
  }
  kernel_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.SystemInfo.Basic.kernel_version)
}
inline ::std::string* SystemInfo_Basic::mutable_kernel_version() {
  set_has_kernel_version();
  if (kernel_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.Basic.kernel_version)
  return kernel_version_;
}
inline ::std::string* SystemInfo_Basic::release_kernel_version() {
  clear_has_kernel_version();
  if (kernel_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kernel_version_;
    kernel_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SystemInfo_Basic::set_allocated_kernel_version(::std::string* kernel_version) {
  if (kernel_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kernel_version_;
  }
  if (kernel_version) {
    set_has_kernel_version();
    kernel_version_ = kernel_version;
  } else {
    clear_has_kernel_version();
    kernel_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.Basic.kernel_version)
}

// optional string kernel_cmdline = 2;
inline bool SystemInfo_Basic::has_kernel_cmdline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo_Basic::set_has_kernel_cmdline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo_Basic::clear_has_kernel_cmdline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo_Basic::clear_kernel_cmdline() {
  if (kernel_cmdline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_cmdline_->clear();
  }
  clear_has_kernel_cmdline();
}
inline const ::std::string& SystemInfo_Basic::kernel_cmdline() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Basic.kernel_cmdline)
  return *kernel_cmdline_;
}
inline void SystemInfo_Basic::set_kernel_cmdline(const ::std::string& value) {
  set_has_kernel_cmdline();
  if (kernel_cmdline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_cmdline_ = new ::std::string;
  }
  kernel_cmdline_->assign(value);
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Basic.kernel_cmdline)
}
inline void SystemInfo_Basic::set_kernel_cmdline(const char* value) {
  set_has_kernel_cmdline();
  if (kernel_cmdline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_cmdline_ = new ::std::string;
  }
  kernel_cmdline_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.SystemInfo.Basic.kernel_cmdline)
}
inline void SystemInfo_Basic::set_kernel_cmdline(const char* value, size_t size) {
  set_has_kernel_cmdline();
  if (kernel_cmdline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_cmdline_ = new ::std::string;
  }
  kernel_cmdline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.SystemInfo.Basic.kernel_cmdline)
}
inline ::std::string* SystemInfo_Basic::mutable_kernel_cmdline() {
  set_has_kernel_cmdline();
  if (kernel_cmdline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    kernel_cmdline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.Basic.kernel_cmdline)
  return kernel_cmdline_;
}
inline ::std::string* SystemInfo_Basic::release_kernel_cmdline() {
  clear_has_kernel_cmdline();
  if (kernel_cmdline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = kernel_cmdline_;
    kernel_cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SystemInfo_Basic::set_allocated_kernel_cmdline(::std::string* kernel_cmdline) {
  if (kernel_cmdline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kernel_cmdline_;
  }
  if (kernel_cmdline) {
    set_has_kernel_cmdline();
    kernel_cmdline_ = kernel_cmdline;
  } else {
    clear_has_kernel_cmdline();
    kernel_cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.Basic.kernel_cmdline)
}

// optional string cpuinfo = 3;
inline bool SystemInfo_Basic::has_cpuinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo_Basic::set_has_cpuinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo_Basic::clear_has_cpuinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo_Basic::clear_cpuinfo() {
  if (cpuinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cpuinfo_->clear();
  }
  clear_has_cpuinfo();
}
inline const ::std::string& SystemInfo_Basic::cpuinfo() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Basic.cpuinfo)
  return *cpuinfo_;
}
inline void SystemInfo_Basic::set_cpuinfo(const ::std::string& value) {
  set_has_cpuinfo();
  if (cpuinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cpuinfo_ = new ::std::string;
  }
  cpuinfo_->assign(value);
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Basic.cpuinfo)
}
inline void SystemInfo_Basic::set_cpuinfo(const char* value) {
  set_has_cpuinfo();
  if (cpuinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cpuinfo_ = new ::std::string;
  }
  cpuinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.SystemInfo.Basic.cpuinfo)
}
inline void SystemInfo_Basic::set_cpuinfo(const char* value, size_t size) {
  set_has_cpuinfo();
  if (cpuinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cpuinfo_ = new ::std::string;
  }
  cpuinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.SystemInfo.Basic.cpuinfo)
}
inline ::std::string* SystemInfo_Basic::mutable_cpuinfo() {
  set_has_cpuinfo();
  if (cpuinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cpuinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.Basic.cpuinfo)
  return cpuinfo_;
}
inline ::std::string* SystemInfo_Basic::release_cpuinfo() {
  clear_has_cpuinfo();
  if (cpuinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cpuinfo_;
    cpuinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SystemInfo_Basic::set_allocated_cpuinfo(::std::string* cpuinfo) {
  if (cpuinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cpuinfo_;
  }
  if (cpuinfo) {
    set_has_cpuinfo();
    cpuinfo_ = cpuinfo;
  } else {
    clear_has_cpuinfo();
    cpuinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.Basic.cpuinfo)
}

// -------------------------------------------------------------------

// SystemInfo_Performance

// optional int32 loadavg_1m_milli = 2;
inline bool SystemInfo_Performance::has_loadavg_1m_milli() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo_Performance::set_has_loadavg_1m_milli() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo_Performance::clear_has_loadavg_1m_milli() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo_Performance::clear_loadavg_1m_milli() {
  loadavg_1m_milli_ = 0;
  clear_has_loadavg_1m_milli();
}
inline ::google::protobuf::int32 SystemInfo_Performance::loadavg_1m_milli() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.loadavg_1m_milli)
  return loadavg_1m_milli_;
}
inline void SystemInfo_Performance::set_loadavg_1m_milli(::google::protobuf::int32 value) {
  set_has_loadavg_1m_milli();
  loadavg_1m_milli_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.loadavg_1m_milli)
}

// optional int32 loadavg_5m_milli = 3;
inline bool SystemInfo_Performance::has_loadavg_5m_milli() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo_Performance::set_has_loadavg_5m_milli() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo_Performance::clear_has_loadavg_5m_milli() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo_Performance::clear_loadavg_5m_milli() {
  loadavg_5m_milli_ = 0;
  clear_has_loadavg_5m_milli();
}
inline ::google::protobuf::int32 SystemInfo_Performance::loadavg_5m_milli() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.loadavg_5m_milli)
  return loadavg_5m_milli_;
}
inline void SystemInfo_Performance::set_loadavg_5m_milli(::google::protobuf::int32 value) {
  set_has_loadavg_5m_milli();
  loadavg_5m_milli_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.loadavg_5m_milli)
}

// optional int32 loadavg_15m_milli = 4;
inline bool SystemInfo_Performance::has_loadavg_15m_milli() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo_Performance::set_has_loadavg_15m_milli() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo_Performance::clear_has_loadavg_15m_milli() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo_Performance::clear_loadavg_15m_milli() {
  loadavg_15m_milli_ = 0;
  clear_has_loadavg_15m_milli();
}
inline ::google::protobuf::int32 SystemInfo_Performance::loadavg_15m_milli() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.loadavg_15m_milli)
  return loadavg_15m_milli_;
}
inline void SystemInfo_Performance::set_loadavg_15m_milli(::google::protobuf::int32 value) {
  set_has_loadavg_15m_milli();
  loadavg_15m_milli_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.loadavg_15m_milli)
}

// optional int32 running_tasks = 5;
inline bool SystemInfo_Performance::has_running_tasks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemInfo_Performance::set_has_running_tasks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemInfo_Performance::clear_has_running_tasks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemInfo_Performance::clear_running_tasks() {
  running_tasks_ = 0;
  clear_has_running_tasks();
}
inline ::google::protobuf::int32 SystemInfo_Performance::running_tasks() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.running_tasks)
  return running_tasks_;
}
inline void SystemInfo_Performance::set_running_tasks(::google::protobuf::int32 value) {
  set_has_running_tasks();
  running_tasks_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.running_tasks)
}

// optional int32 total_tasks = 6;
inline bool SystemInfo_Performance::has_total_tasks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemInfo_Performance::set_has_total_tasks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemInfo_Performance::clear_has_total_tasks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemInfo_Performance::clear_total_tasks() {
  total_tasks_ = 0;
  clear_has_total_tasks();
}
inline ::google::protobuf::int32 SystemInfo_Performance::total_tasks() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.total_tasks)
  return total_tasks_;
}
inline void SystemInfo_Performance::set_total_tasks(::google::protobuf::int32 value) {
  set_has_total_tasks();
  total_tasks_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.total_tasks)
}

// optional int32 last_pid = 7;
inline bool SystemInfo_Performance::has_last_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemInfo_Performance::set_has_last_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemInfo_Performance::clear_has_last_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemInfo_Performance::clear_last_pid() {
  last_pid_ = 0;
  clear_has_last_pid();
}
inline ::google::protobuf::int32 SystemInfo_Performance::last_pid() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.last_pid)
  return last_pid_;
}
inline void SystemInfo_Performance::set_last_pid(::google::protobuf::int32 value) {
  set_has_last_pid();
  last_pid_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.last_pid)
}

// optional int64 boot_time = 9;
inline bool SystemInfo_Performance::has_boot_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemInfo_Performance::set_has_boot_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemInfo_Performance::clear_has_boot_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemInfo_Performance::clear_boot_time() {
  boot_time_ = GOOGLE_LONGLONG(0);
  clear_has_boot_time();
}
inline ::google::protobuf::int64 SystemInfo_Performance::boot_time() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.boot_time)
  return boot_time_;
}
inline void SystemInfo_Performance::set_boot_time(::google::protobuf::int64 value) {
  set_has_boot_time();
  boot_time_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.boot_time)
}

// optional int64 context_switches = 10;
inline bool SystemInfo_Performance::has_context_switches() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemInfo_Performance::set_has_context_switches() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SystemInfo_Performance::clear_has_context_switches() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SystemInfo_Performance::clear_context_switches() {
  context_switches_ = GOOGLE_LONGLONG(0);
  clear_has_context_switches();
}
inline ::google::protobuf::int64 SystemInfo_Performance::context_switches() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.context_switches)
  return context_switches_;
}
inline void SystemInfo_Performance::set_context_switches(::google::protobuf::int64 value) {
  set_has_context_switches();
  context_switches_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.context_switches)
}

// optional int64 processes_created = 11;
inline bool SystemInfo_Performance::has_processes_created() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemInfo_Performance::set_has_processes_created() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SystemInfo_Performance::clear_has_processes_created() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SystemInfo_Performance::clear_processes_created() {
  processes_created_ = GOOGLE_LONGLONG(0);
  clear_has_processes_created();
}
inline ::google::protobuf::int64 SystemInfo_Performance::processes_created() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.processes_created)
  return processes_created_;
}
inline void SystemInfo_Performance::set_processes_created(::google::protobuf::int64 value) {
  set_has_processes_created();
  processes_created_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.processes_created)
}

// optional int32 processes_running = 12;
inline bool SystemInfo_Performance::has_processes_running() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemInfo_Performance::set_has_processes_running() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SystemInfo_Performance::clear_has_processes_running() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SystemInfo_Performance::clear_processes_running() {
  processes_running_ = 0;
  clear_has_processes_running();
}
inline ::google::protobuf::int32 SystemInfo_Performance::processes_running() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.processes_running)
  return processes_running_;
}
inline void SystemInfo_Performance::set_processes_running(::google::protobuf::int32 value) {
  set_has_processes_running();
  processes_running_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.processes_running)
}

// optional int32 processes_blocked = 13;
inline bool SystemInfo_Performance::has_processes_blocked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemInfo_Performance::set_has_processes_blocked() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SystemInfo_Performance::clear_has_processes_blocked() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SystemInfo_Performance::clear_processes_blocked() {
  processes_blocked_ = 0;
  clear_has_processes_blocked();
}
inline ::google::protobuf::int32 SystemInfo_Performance::processes_blocked() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Performance.processes_blocked)
  return processes_blocked_;
}
inline void SystemInfo_Performance::set_processes_blocked(::google::protobuf::int32 value) {
  set_has_processes_blocked();
  processes_blocked_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Performance.processes_blocked)
}

// -------------------------------------------------------------------

// SystemInfo_Cpu

// optional int64 user_ms = 1;
inline bool SystemInfo_Cpu::has_user_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo_Cpu::set_has_user_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo_Cpu::clear_has_user_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo_Cpu::clear_user_ms() {
  user_ms_ = GOOGLE_LONGLONG(0);
  clear_has_user_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::user_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.user_ms)
  return user_ms_;
}
inline void SystemInfo_Cpu::set_user_ms(::google::protobuf::int64 value) {
  set_has_user_ms();
  user_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.user_ms)
}

// optional int64 nice_ms = 2;
inline bool SystemInfo_Cpu::has_nice_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo_Cpu::set_has_nice_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo_Cpu::clear_has_nice_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo_Cpu::clear_nice_ms() {
  nice_ms_ = GOOGLE_LONGLONG(0);
  clear_has_nice_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::nice_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.nice_ms)
  return nice_ms_;
}
inline void SystemInfo_Cpu::set_nice_ms(::google::protobuf::int64 value) {
  set_has_nice_ms();
  nice_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.nice_ms)
}

// optional int64 sys_ms = 3;
inline bool SystemInfo_Cpu::has_sys_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo_Cpu::set_has_sys_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo_Cpu::clear_has_sys_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo_Cpu::clear_sys_ms() {
  sys_ms_ = GOOGLE_LONGLONG(0);
  clear_has_sys_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::sys_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.sys_ms)
  return sys_ms_;
}
inline void SystemInfo_Cpu::set_sys_ms(::google::protobuf::int64 value) {
  set_has_sys_ms();
  sys_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.sys_ms)
}

// optional int64 idle_ms = 4;
inline bool SystemInfo_Cpu::has_idle_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemInfo_Cpu::set_has_idle_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemInfo_Cpu::clear_has_idle_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemInfo_Cpu::clear_idle_ms() {
  idle_ms_ = GOOGLE_LONGLONG(0);
  clear_has_idle_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::idle_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.idle_ms)
  return idle_ms_;
}
inline void SystemInfo_Cpu::set_idle_ms(::google::protobuf::int64 value) {
  set_has_idle_ms();
  idle_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.idle_ms)
}

// optional int64 iowait_ms = 5;
inline bool SystemInfo_Cpu::has_iowait_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemInfo_Cpu::set_has_iowait_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemInfo_Cpu::clear_has_iowait_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemInfo_Cpu::clear_iowait_ms() {
  iowait_ms_ = GOOGLE_LONGLONG(0);
  clear_has_iowait_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::iowait_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.iowait_ms)
  return iowait_ms_;
}
inline void SystemInfo_Cpu::set_iowait_ms(::google::protobuf::int64 value) {
  set_has_iowait_ms();
  iowait_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.iowait_ms)
}

// optional int64 irq_ms = 6;
inline bool SystemInfo_Cpu::has_irq_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemInfo_Cpu::set_has_irq_ms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemInfo_Cpu::clear_has_irq_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemInfo_Cpu::clear_irq_ms() {
  irq_ms_ = GOOGLE_LONGLONG(0);
  clear_has_irq_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::irq_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.irq_ms)
  return irq_ms_;
}
inline void SystemInfo_Cpu::set_irq_ms(::google::protobuf::int64 value) {
  set_has_irq_ms();
  irq_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.irq_ms)
}

// optional int64 softirq_ms = 7;
inline bool SystemInfo_Cpu::has_softirq_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemInfo_Cpu::set_has_softirq_ms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemInfo_Cpu::clear_has_softirq_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemInfo_Cpu::clear_softirq_ms() {
  softirq_ms_ = GOOGLE_LONGLONG(0);
  clear_has_softirq_ms();
}
inline ::google::protobuf::int64 SystemInfo_Cpu::softirq_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Cpu.softirq_ms)
  return softirq_ms_;
}
inline void SystemInfo_Cpu::set_softirq_ms(::google::protobuf::int64 value) {
  set_has_softirq_ms();
  softirq_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Cpu.softirq_ms)
}

// -------------------------------------------------------------------

// SystemInfo_Memory

// optional int64 total_kb = 1;
inline bool SystemInfo_Memory::has_total_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo_Memory::set_has_total_kb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo_Memory::clear_has_total_kb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo_Memory::clear_total_kb() {
  total_kb_ = GOOGLE_LONGLONG(0);
  clear_has_total_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::total_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.total_kb)
  return total_kb_;
}
inline void SystemInfo_Memory::set_total_kb(::google::protobuf::int64 value) {
  set_has_total_kb();
  total_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.total_kb)
}

// optional int64 free_kb = 2;
inline bool SystemInfo_Memory::has_free_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo_Memory::set_has_free_kb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo_Memory::clear_has_free_kb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo_Memory::clear_free_kb() {
  free_kb_ = GOOGLE_LONGLONG(0);
  clear_has_free_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::free_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.free_kb)
  return free_kb_;
}
inline void SystemInfo_Memory::set_free_kb(::google::protobuf::int64 value) {
  set_has_free_kb();
  free_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.free_kb)
}

// optional int64 buffers_kb = 3;
inline bool SystemInfo_Memory::has_buffers_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo_Memory::set_has_buffers_kb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo_Memory::clear_has_buffers_kb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo_Memory::clear_buffers_kb() {
  buffers_kb_ = GOOGLE_LONGLONG(0);
  clear_has_buffers_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::buffers_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.buffers_kb)
  return buffers_kb_;
}
inline void SystemInfo_Memory::set_buffers_kb(::google::protobuf::int64 value) {
  set_has_buffers_kb();
  buffers_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.buffers_kb)
}

// optional int64 cached_kb = 4;
inline bool SystemInfo_Memory::has_cached_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemInfo_Memory::set_has_cached_kb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemInfo_Memory::clear_has_cached_kb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemInfo_Memory::clear_cached_kb() {
  cached_kb_ = GOOGLE_LONGLONG(0);
  clear_has_cached_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::cached_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.cached_kb)
  return cached_kb_;
}
inline void SystemInfo_Memory::set_cached_kb(::google::protobuf::int64 value) {
  set_has_cached_kb();
  cached_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.cached_kb)
}

// optional int64 swap_total_kb = 5;
inline bool SystemInfo_Memory::has_swap_total_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemInfo_Memory::set_has_swap_total_kb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemInfo_Memory::clear_has_swap_total_kb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemInfo_Memory::clear_swap_total_kb() {
  swap_total_kb_ = GOOGLE_LONGLONG(0);
  clear_has_swap_total_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::swap_total_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.swap_total_kb)
  return swap_total_kb_;
}
inline void SystemInfo_Memory::set_swap_total_kb(::google::protobuf::int64 value) {
  set_has_swap_total_kb();
  swap_total_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.swap_total_kb)
}

// optional int64 swap_free_kb = 6;
inline bool SystemInfo_Memory::has_swap_free_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemInfo_Memory::set_has_swap_free_kb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemInfo_Memory::clear_has_swap_free_kb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemInfo_Memory::clear_swap_free_kb() {
  swap_free_kb_ = GOOGLE_LONGLONG(0);
  clear_has_swap_free_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::swap_free_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.swap_free_kb)
  return swap_free_kb_;
}
inline void SystemInfo_Memory::set_swap_free_kb(::google::protobuf::int64 value) {
  set_has_swap_free_kb();
  swap_free_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.swap_free_kb)
}

// optional int64 swap_cached_kb = 7;
inline bool SystemInfo_Memory::has_swap_cached_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemInfo_Memory::set_has_swap_cached_kb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemInfo_Memory::clear_has_swap_cached_kb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemInfo_Memory::clear_swap_cached_kb() {
  swap_cached_kb_ = GOOGLE_LONGLONG(0);
  clear_has_swap_cached_kb();
}
inline ::google::protobuf::int64 SystemInfo_Memory::swap_cached_kb() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.Memory.swap_cached_kb)
  return swap_cached_kb_;
}
inline void SystemInfo_Memory::set_swap_cached_kb(::google::protobuf::int64 value) {
  set_has_swap_cached_kb();
  swap_cached_kb_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.Memory.swap_cached_kb)
}

// -------------------------------------------------------------------

// SystemInfo

// optional .collect.SystemInfo.Basic basic = 1;
inline bool SystemInfo::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo::clear_basic() {
  if (basic_ != NULL) basic_->::collect::SystemInfo_Basic::Clear();
  clear_has_basic();
}
inline const ::collect::SystemInfo_Basic& SystemInfo::basic() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.basic)
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
inline ::collect::SystemInfo_Basic* SystemInfo::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::collect::SystemInfo_Basic;
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.basic)
  return basic_;
}
inline ::collect::SystemInfo_Basic* SystemInfo::release_basic() {
  clear_has_basic();
  ::collect::SystemInfo_Basic* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void SystemInfo::set_allocated_basic(::collect::SystemInfo_Basic* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.basic)
}

// optional .collect.SystemInfo.Performance performance = 2;
inline bool SystemInfo::has_performance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo::set_has_performance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo::clear_has_performance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo::clear_performance() {
  if (performance_ != NULL) performance_->::collect::SystemInfo_Performance::Clear();
  clear_has_performance();
}
inline const ::collect::SystemInfo_Performance& SystemInfo::performance() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.performance)
  return performance_ != NULL ? *performance_ : *default_instance_->performance_;
}
inline ::collect::SystemInfo_Performance* SystemInfo::mutable_performance() {
  set_has_performance();
  if (performance_ == NULL) performance_ = new ::collect::SystemInfo_Performance;
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.performance)
  return performance_;
}
inline ::collect::SystemInfo_Performance* SystemInfo::release_performance() {
  clear_has_performance();
  ::collect::SystemInfo_Performance* temp = performance_;
  performance_ = NULL;
  return temp;
}
inline void SystemInfo::set_allocated_performance(::collect::SystemInfo_Performance* performance) {
  delete performance_;
  performance_ = performance;
  if (performance) {
    set_has_performance();
  } else {
    clear_has_performance();
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.performance)
}

// optional .collect.SystemInfo.Cpu all_cpu = 3;
inline bool SystemInfo::has_all_cpu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo::set_has_all_cpu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo::clear_has_all_cpu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo::clear_all_cpu() {
  if (all_cpu_ != NULL) all_cpu_->::collect::SystemInfo_Cpu::Clear();
  clear_has_all_cpu();
}
inline const ::collect::SystemInfo_Cpu& SystemInfo::all_cpu() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.all_cpu)
  return all_cpu_ != NULL ? *all_cpu_ : *default_instance_->all_cpu_;
}
inline ::collect::SystemInfo_Cpu* SystemInfo::mutable_all_cpu() {
  set_has_all_cpu();
  if (all_cpu_ == NULL) all_cpu_ = new ::collect::SystemInfo_Cpu;
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.all_cpu)
  return all_cpu_;
}
inline ::collect::SystemInfo_Cpu* SystemInfo::release_all_cpu() {
  clear_has_all_cpu();
  ::collect::SystemInfo_Cpu* temp = all_cpu_;
  all_cpu_ = NULL;
  return temp;
}
inline void SystemInfo::set_allocated_all_cpu(::collect::SystemInfo_Cpu* all_cpu) {
  delete all_cpu_;
  all_cpu_ = all_cpu;
  if (all_cpu) {
    set_has_all_cpu();
  } else {
    clear_has_all_cpu();
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.all_cpu)
}

// repeated .collect.SystemInfo.Cpu cpus = 4;
inline int SystemInfo::cpus_size() const {
  return cpus_.size();
}
inline void SystemInfo::clear_cpus() {
  cpus_.Clear();
}
inline const ::collect::SystemInfo_Cpu& SystemInfo::cpus(int index) const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.cpus)
  return cpus_.Get(index);
}
inline ::collect::SystemInfo_Cpu* SystemInfo::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.cpus)
  return cpus_.Mutable(index);
}
inline ::collect::SystemInfo_Cpu* SystemInfo::add_cpus() {
  // @@protoc_insertion_point(field_add:collect.SystemInfo.cpus)
  return cpus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::collect::SystemInfo_Cpu >&
SystemInfo::cpus() const {
  // @@protoc_insertion_point(field_list:collect.SystemInfo.cpus)
  return cpus_;
}
inline ::google::protobuf::RepeatedPtrField< ::collect::SystemInfo_Cpu >*
SystemInfo::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:collect.SystemInfo.cpus)
  return &cpus_;
}

// optional fixed64 muduo_timestamp = 5;
inline bool SystemInfo::has_muduo_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemInfo::set_has_muduo_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemInfo::clear_has_muduo_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemInfo::clear_muduo_timestamp() {
  muduo_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_muduo_timestamp();
}
inline ::google::protobuf::uint64 SystemInfo::muduo_timestamp() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.muduo_timestamp)
  return muduo_timestamp_;
}
inline void SystemInfo::set_muduo_timestamp(::google::protobuf::uint64 value) {
  set_has_muduo_timestamp();
  muduo_timestamp_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.muduo_timestamp)
}

// optional .collect.SystemInfo.Memory memory = 8;
inline bool SystemInfo::has_memory() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemInfo::set_has_memory() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemInfo::clear_has_memory() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemInfo::clear_memory() {
  if (memory_ != NULL) memory_->::collect::SystemInfo_Memory::Clear();
  clear_has_memory();
}
inline const ::collect::SystemInfo_Memory& SystemInfo::memory() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.memory)
  return memory_ != NULL ? *memory_ : *default_instance_->memory_;
}
inline ::collect::SystemInfo_Memory* SystemInfo::mutable_memory() {
  set_has_memory();
  if (memory_ == NULL) memory_ = new ::collect::SystemInfo_Memory;
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.memory)
  return memory_;
}
inline ::collect::SystemInfo_Memory* SystemInfo::release_memory() {
  clear_has_memory();
  ::collect::SystemInfo_Memory* temp = memory_;
  memory_ = NULL;
  return temp;
}
inline void SystemInfo::set_allocated_memory(::collect::SystemInfo_Memory* memory) {
  delete memory_;
  memory_ = memory;
  if (memory) {
    set_has_memory();
  } else {
    clear_has_memory();
  }
  // @@protoc_insertion_point(field_set_allocated:collect.SystemInfo.memory)
}

// repeated .collect.ProcessInfo processes = 14;
inline int SystemInfo::processes_size() const {
  return processes_.size();
}
inline void SystemInfo::clear_processes() {
  processes_.Clear();
}
inline const ::collect::ProcessInfo& SystemInfo::processes(int index) const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.processes)
  return processes_.Get(index);
}
inline ::collect::ProcessInfo* SystemInfo::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:collect.SystemInfo.processes)
  return processes_.Mutable(index);
}
inline ::collect::ProcessInfo* SystemInfo::add_processes() {
  // @@protoc_insertion_point(field_add:collect.SystemInfo.processes)
  return processes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::collect::ProcessInfo >&
SystemInfo::processes() const {
  // @@protoc_insertion_point(field_list:collect.SystemInfo.processes)
  return processes_;
}
inline ::google::protobuf::RepeatedPtrField< ::collect::ProcessInfo >*
SystemInfo::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:collect.SystemInfo.processes)
  return &processes_;
}

// optional int64 user_cpu_ms = 6;
inline bool SystemInfo::has_user_cpu_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemInfo::set_has_user_cpu_ms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SystemInfo::clear_has_user_cpu_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SystemInfo::clear_user_cpu_ms() {
  user_cpu_ms_ = GOOGLE_LONGLONG(0);
  clear_has_user_cpu_ms();
}
inline ::google::protobuf::int64 SystemInfo::user_cpu_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.user_cpu_ms)
  return user_cpu_ms_;
}
inline void SystemInfo::set_user_cpu_ms(::google::protobuf::int64 value) {
  set_has_user_cpu_ms();
  user_cpu_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.user_cpu_ms)
}

// optional int64 sys_cpu_ms = 7;
inline bool SystemInfo::has_sys_cpu_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemInfo::set_has_sys_cpu_ms() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SystemInfo::clear_has_sys_cpu_ms() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SystemInfo::clear_sys_cpu_ms() {
  sys_cpu_ms_ = GOOGLE_LONGLONG(0);
  clear_has_sys_cpu_ms();
}
inline ::google::protobuf::int64 SystemInfo::sys_cpu_ms() const {
  // @@protoc_insertion_point(field_get:collect.SystemInfo.sys_cpu_ms)
  return sys_cpu_ms_;
}
inline void SystemInfo::set_sys_cpu_ms(::google::protobuf::int64 value) {
  set_has_sys_cpu_ms();
  sys_cpu_ms_ = value;
  // @@protoc_insertion_point(field_set:collect.SystemInfo.sys_cpu_ms)
}

// -------------------------------------------------------------------

// SnapshotRequest

// optional .collect.SnapshotRequest.Level level = 1 [default = kSystemInfoOnly];
inline bool SnapshotRequest::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRequest::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotRequest::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotRequest::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::collect::SnapshotRequest_Level SnapshotRequest::level() const {
  // @@protoc_insertion_point(field_get:collect.SnapshotRequest.level)
  return static_cast< ::collect::SnapshotRequest_Level >(level_);
}
inline void SnapshotRequest::set_level(::collect::SnapshotRequest_Level value) {
  assert(::collect::SnapshotRequest_Level_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:collect.SnapshotRequest.level)
}

// -------------------------------------------------------------------

// Result

// required bool succeed = 1;
inline bool Result::has_succeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_succeed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_succeed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_succeed() {
  succeed_ = false;
  clear_has_succeed();
}
inline bool Result::succeed() const {
  // @@protoc_insertion_point(field_get:collect.Result.succeed)
  return succeed_;
}
inline void Result::set_succeed(bool value) {
  set_has_succeed();
  succeed_ = value;
  // @@protoc_insertion_point(field_set:collect.Result.succeed)
}

// optional string message = 2;
inline bool Result::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:collect.Result.message)
  return *message_;
}
inline void Result::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:collect.Result.message)
}
inline void Result::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:collect.Result.message)
}
inline void Result::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:collect.Result.message)
}
inline ::std::string* Result::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:collect.Result.message)
  return message_;
}
inline ::std::string* Result::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:collect.Result.message)
}



// ===================================================================

typedef ::std::shared_ptr<ThreadInfo> ThreadInfoPtr;
typedef ::std::shared_ptr<ProcessInfo> ProcessInfoPtr;
typedef ::std::shared_ptr<SystemInfo> SystemInfoPtr;
typedef ::std::shared_ptr<SnapshotRequest> SnapshotRequestPtr;
typedef ::std::shared_ptr<Result> ResultPtr;

// -------------------------------------------------------------------

class CollectService_Stub;

class CollectService : public ::muduo::net::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CollectService() {};
 public:
  virtual ~CollectService();

  typedef CollectService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void getSnapshot(const ::collect::SnapshotRequestPtr& request,
                       const ::collect::SystemInfo* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void flushFile(const ::rpc2::EmptyPtr& request,
                       const ::rpc2::Empty* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void rollFile(const ::rpc2::EmptyPtr& request,
                       const ::collect::Result* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void version(const ::rpc2::EmptyPtr& request,
                       const ::collect::Result* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void quit(const ::rpc2::EmptyPtr& request,
                       const ::collect::Result* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void restart(const ::rpc2::EmptyPtr& request,
                       const ::collect::Result* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::MessagePtr& request,
                  const ::google::protobuf::Message* responsePrototype,
                  const ::muduo::net::RpcDoneCallback& done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CollectService);
};

class CollectService_Stub : public CollectService {
 public:
  CollectService_Stub(::muduo::net::RpcChannel* channel);
  ~CollectService_Stub();

  inline ::muduo::net::RpcChannel* channel() { return channel_; }

  // implements CollectService ------------------------------------------

  using CollectService::getSnapshot;
  virtual void getSnapshot(const ::collect::SnapshotRequest& request,
                       const ::std::function<void(const ::collect::SystemInfoPtr&)>& done);
  using CollectService::flushFile;
  virtual void flushFile(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::rpc2::EmptyPtr&)>& done);
  using CollectService::rollFile;
  virtual void rollFile(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::collect::ResultPtr&)>& done);
  using CollectService::version;
  virtual void version(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::collect::ResultPtr&)>& done);
  using CollectService::quit;
  virtual void quit(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::collect::ResultPtr&)>& done);
  using CollectService::restart;
  virtual void restart(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::collect::ResultPtr&)>& done);
 private:
  ::muduo::net::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CollectService_Stub);
};

// @@protoc_insertion_point(namespace_scope)

}  // namespace collect

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::collect::SnapshotRequest_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::collect::SnapshotRequest_Level>() {
  return ::collect::SnapshotRequest_Level_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_collect_2eproto__INCLUDED
