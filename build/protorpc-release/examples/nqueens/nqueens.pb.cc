// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nqueens.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nqueens.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nqueens {

namespace {

const ::google::protobuf::Descriptor* SubProblemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubProblemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubProblemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubProblemResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nqueens_2eproto() {
  protobuf_AddDesc_nqueens_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nqueens.proto");
  GOOGLE_CHECK(file != NULL);
  SubProblemRequest_descriptor_ = file->message_type(0);
  static const int SubProblemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemRequest, nqueens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemRequest, first_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemRequest, second_row_),
  };
  SubProblemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubProblemRequest_descriptor_,
      SubProblemRequest::default_instance_,
      SubProblemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubProblemRequest));
  SubProblemResponse_descriptor_ = file->message_type(1);
  static const int SubProblemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemResponse, seconds_),
  };
  SubProblemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubProblemResponse_descriptor_,
      SubProblemResponse::default_instance_,
      SubProblemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubProblemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubProblemResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nqueens_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubProblemRequest_descriptor_, &SubProblemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubProblemResponse_descriptor_, &SubProblemResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nqueens_2eproto() {
  delete SubProblemRequest::default_instance_;
  delete SubProblemRequest_reflection_;
  delete SubProblemResponse::default_instance_;
  delete SubProblemResponse_reflection_;
}

void protobuf_AddDesc_nqueens_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc2::protobuf_AddDesc_muduo_2fprotorpc2_2frpc2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnqueens.proto\022\007nqueens\032\032muduo/protorpc"
    "2/rpc2.proto\"O\n\021SubProblemRequest\022\017\n\007nqu"
    "eens\030\001 \002(\005\022\021\n\tfirst_row\030\002 \002(\005\022\026\n\nsecond_"
    "row\030\003 \001(\005:\002-1\"4\n\022SubProblemResponse\022\r\n\005c"
    "ount\030\001 \002(\003\022\017\n\007seconds\030\002 \002(\0012R\n\016NQueensSe"
    "rvice\022@\n\005Solve\022\032.nqueens.SubProblemReque"
    "st\032\033.nqueens.SubProblemResponseB\006\210\001\001\220\001\001", 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nqueens.proto", &protobuf_RegisterTypes);
  SubProblemRequest::default_instance_ = new SubProblemRequest();
  SubProblemResponse::default_instance_ = new SubProblemResponse();
  SubProblemRequest::default_instance_->InitAsDefaultInstance();
  SubProblemResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nqueens_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nqueens_2eproto {
  StaticDescriptorInitializer_nqueens_2eproto() {
    protobuf_AddDesc_nqueens_2eproto();
  }
} static_descriptor_initializer_nqueens_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubProblemRequest::kNqueensFieldNumber;
const int SubProblemRequest::kFirstRowFieldNumber;
const int SubProblemRequest::kSecondRowFieldNumber;
#endif  // !_MSC_VER

SubProblemRequest::SubProblemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nqueens.SubProblemRequest)
}

void SubProblemRequest::InitAsDefaultInstance() {
}

SubProblemRequest::SubProblemRequest(const SubProblemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nqueens.SubProblemRequest)
}

void SubProblemRequest::SharedCtor() {
  _cached_size_ = 0;
  nqueens_ = 0;
  first_row_ = 0;
  second_row_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubProblemRequest::~SubProblemRequest() {
  // @@protoc_insertion_point(destructor:nqueens.SubProblemRequest)
  SharedDtor();
}

void SubProblemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubProblemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubProblemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubProblemRequest_descriptor_;
}

const SubProblemRequest& SubProblemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nqueens_2eproto();
  return *default_instance_;
}

SubProblemRequest* SubProblemRequest::default_instance_ = NULL;

SubProblemRequest* SubProblemRequest::New() const {
  return new SubProblemRequest;
}

void SubProblemRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubProblemRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(nqueens_, first_row_);
    second_row_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubProblemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nqueens.SubProblemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nqueens = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nqueens_)));
          set_has_nqueens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_row;
        break;
      }

      // required int32 first_row = 2;
      case 2: {
        if (tag == 16) {
         parse_first_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_row_)));
          set_has_first_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_second_row;
        break;
      }

      // optional int32 second_row = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_second_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_row_)));
          set_has_second_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nqueens.SubProblemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nqueens.SubProblemRequest)
  return false;
#undef DO_
}

void SubProblemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nqueens.SubProblemRequest)
  // required int32 nqueens = 1;
  if (has_nqueens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nqueens(), output);
  }

  // required int32 first_row = 2;
  if (has_first_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_row(), output);
  }

  // optional int32 second_row = 3 [default = -1];
  if (has_second_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second_row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nqueens.SubProblemRequest)
}

::google::protobuf::uint8* SubProblemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nqueens.SubProblemRequest)
  // required int32 nqueens = 1;
  if (has_nqueens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nqueens(), target);
  }

  // required int32 first_row = 2;
  if (has_first_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_row(), target);
  }

  // optional int32 second_row = 3 [default = -1];
  if (has_second_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second_row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nqueens.SubProblemRequest)
  return target;
}

int SubProblemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nqueens = 1;
    if (has_nqueens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nqueens());
    }

    // required int32 first_row = 2;
    if (has_first_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_row());
    }

    // optional int32 second_row = 3 [default = -1];
    if (has_second_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubProblemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubProblemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubProblemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubProblemRequest::MergeFrom(const SubProblemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nqueens()) {
      set_nqueens(from.nqueens());
    }
    if (from.has_first_row()) {
      set_first_row(from.first_row());
    }
    if (from.has_second_row()) {
      set_second_row(from.second_row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubProblemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubProblemRequest::CopyFrom(const SubProblemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubProblemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubProblemRequest::Swap(SubProblemRequest* other) {
  if (other != this) {
    std::swap(nqueens_, other->nqueens_);
    std::swap(first_row_, other->first_row_);
    std::swap(second_row_, other->second_row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubProblemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubProblemRequest_descriptor_;
  metadata.reflection = SubProblemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubProblemResponse::kCountFieldNumber;
const int SubProblemResponse::kSecondsFieldNumber;
#endif  // !_MSC_VER

SubProblemResponse::SubProblemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nqueens.SubProblemResponse)
}

void SubProblemResponse::InitAsDefaultInstance() {
}

SubProblemResponse::SubProblemResponse(const SubProblemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nqueens.SubProblemResponse)
}

void SubProblemResponse::SharedCtor() {
  _cached_size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubProblemResponse::~SubProblemResponse() {
  // @@protoc_insertion_point(destructor:nqueens.SubProblemResponse)
  SharedDtor();
}

void SubProblemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubProblemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubProblemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubProblemResponse_descriptor_;
}

const SubProblemResponse& SubProblemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nqueens_2eproto();
  return *default_instance_;
}

SubProblemResponse* SubProblemResponse::default_instance_ = NULL;

SubProblemResponse* SubProblemResponse::New() const {
  return new SubProblemResponse;
}

void SubProblemResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubProblemResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, seconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubProblemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nqueens.SubProblemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_seconds;
        break;
      }

      // required double seconds = 2;
      case 2: {
        if (tag == 17) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nqueens.SubProblemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nqueens.SubProblemResponse)
  return false;
#undef DO_
}

void SubProblemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nqueens.SubProblemResponse)
  // required int64 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // required double seconds = 2;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nqueens.SubProblemResponse)
}

::google::protobuf::uint8* SubProblemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nqueens.SubProblemResponse)
  // required int64 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // required double seconds = 2;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nqueens.SubProblemResponse)
  return target;
}

int SubProblemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // required double seconds = 2;
    if (has_seconds()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubProblemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubProblemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubProblemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubProblemResponse::MergeFrom(const SubProblemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubProblemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubProblemResponse::CopyFrom(const SubProblemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubProblemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubProblemResponse::Swap(SubProblemResponse* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubProblemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubProblemResponse_descriptor_;
  metadata.reflection = SubProblemResponse_reflection_;
  return metadata;
}


// ===================================================================

NQueensService::~NQueensService() {}

static const ::google::protobuf::ServiceDescriptor* NQueensService_descriptor_ = NULL;

const ::google::protobuf::ServiceDescriptor* NQueensService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  if (NQueensService_descriptor_ == NULL)
    NQueensService_descriptor_ = ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
        "nqueens.proto")->service(0);
  return NQueensService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* NQueensService::GetDescriptor() {
  return descriptor();
}

void NQueensService::Solve(const ::nqueens::SubProblemRequestPtr&,
                         const ::nqueens::SubProblemResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void NQueensService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::MessagePtr& request,
                             const ::google::protobuf::Message* responsePrototype,
                             const ::muduo::net::RpcDoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), NQueensService_descriptor_);
  switch(method->index()) {
    case 0:
      Solve(::google::protobuf::down_pointer_cast< ::nqueens::SubProblemRequest>(request),
             ::google::protobuf::down_cast<const ::nqueens::SubProblemResponse*>(responsePrototype),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& NQueensService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::nqueens::SubProblemRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& NQueensService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::nqueens::SubProblemResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

NQueensService_Stub::NQueensService_Stub(::muduo::net::RpcChannel* channel__)
  : channel_(channel__), owns_channel_(false) {}
NQueensService_Stub::~NQueensService_Stub() {
}

void NQueensService_Stub::Solve(const ::nqueens::SubProblemRequest& request,
                              const ::std::function<void(const ::nqueens::SubProblemResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(0),
                       request, &::nqueens::SubProblemResponse::default_instance(), done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace nqueens

// @@protoc_insertion_point(global_scope)
