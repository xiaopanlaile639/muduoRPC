// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wordfreq.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wordfreq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wordfreq {

namespace {

const ::google::protobuf::Descriptor* GetInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHistogramRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHistogramRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHistogramResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHistogramResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShuffleKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShuffleKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShuffleKeyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShuffleKeyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortKeyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortKeyResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wordfreq_2eproto() {
  protobuf_AddDesc_wordfreq_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wordfreq.proto");
  GOOGLE_CHECK(file != NULL);
  GetInfoResponse_descriptor_ = file->message_type(0);
  static const int GetInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, maxkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, keycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, peers_),
  };
  GetInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInfoResponse_descriptor_,
      GetInfoResponse::default_instance_,
      GetInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInfoResponse));
  GetHistogramRequest_descriptor_ = file->message_type(1);
  static const int GetHistogramRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistogramRequest, pivots_),
  };
  GetHistogramRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHistogramRequest_descriptor_,
      GetHistogramRequest::default_instance_,
      GetHistogramRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistogramRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistogramRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHistogramRequest));
  GetHistogramResponse_descriptor_ = file->message_type(2);
  static const int GetHistogramResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistogramResponse, counts_),
  };
  GetHistogramResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHistogramResponse_descriptor_,
      GetHistogramResponse::default_instance_,
      GetHistogramResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistogramResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistogramResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHistogramResponse));
  ShuffleKeyRequest_descriptor_ = file->message_type(3);
  static const int ShuffleKeyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyRequest, pivots_),
  };
  ShuffleKeyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShuffleKeyRequest_descriptor_,
      ShuffleKeyRequest::default_instance_,
      ShuffleKeyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShuffleKeyRequest));
  ShuffleKeyResponse_descriptor_ = file->message_type(4);
  static const int ShuffleKeyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyResponse, elapsed_),
  };
  ShuffleKeyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShuffleKeyResponse_descriptor_,
      ShuffleKeyResponse::default_instance_,
      ShuffleKeyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShuffleKeyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShuffleKeyResponse));
  ShardKeyRequest_descriptor_ = file->message_type(5);
  static const int ShardKeyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardKeyRequest, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardKeyRequest, keys_),
  };
  ShardKeyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShardKeyRequest_descriptor_,
      ShardKeyRequest::default_instance_,
      ShardKeyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardKeyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardKeyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShardKeyRequest));
  SortKeyResponse_descriptor_ = file->message_type(6);
  static const int SortKeyResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortKeyResponse, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortKeyResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortKeyResponse, minkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortKeyResponse, maxkey_),
  };
  SortKeyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortKeyResponse_descriptor_,
      SortKeyResponse::default_instance_,
      SortKeyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortKeyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortKeyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortKeyResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wordfreq_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInfoResponse_descriptor_, &GetInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHistogramRequest_descriptor_, &GetHistogramRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHistogramResponse_descriptor_, &GetHistogramResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShuffleKeyRequest_descriptor_, &ShuffleKeyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShuffleKeyResponse_descriptor_, &ShuffleKeyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShardKeyRequest_descriptor_, &ShardKeyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortKeyResponse_descriptor_, &SortKeyResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wordfreq_2eproto() {
  delete GetInfoResponse::default_instance_;
  delete GetInfoResponse_reflection_;
  delete GetHistogramRequest::default_instance_;
  delete GetHistogramRequest_reflection_;
  delete GetHistogramResponse::default_instance_;
  delete GetHistogramResponse_reflection_;
  delete ShuffleKeyRequest::default_instance_;
  delete ShuffleKeyRequest_reflection_;
  delete ShuffleKeyResponse::default_instance_;
  delete ShuffleKeyResponse_reflection_;
  delete ShardKeyRequest::default_instance_;
  delete ShardKeyRequest_reflection_;
  delete SortKeyResponse::default_instance_;
  delete SortKeyResponse_reflection_;
}

void protobuf_AddDesc_wordfreq_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc2::protobuf_AddDesc_muduo_2fprotorpc2_2frpc2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016wordfreq.proto\022\010wordfreq\032\032muduo/protor"
    "pc2/rpc2.proto\"Q\n\017GetInfoResponse\022\r\n\005rea"
    "dy\030\001 \002(\010\022\016\n\006maxKey\030\002 \002(\003\022\020\n\010keyCount\030\003 \002"
    "(\003\022\r\n\005peers\030\004 \003(\t\"%\n\023GetHistogramRequest"
    "\022\016\n\006pivots\030\001 \003(\003\"&\n\024GetHistogramResponse"
    "\022\016\n\006counts\030\001 \003(\003\"#\n\021ShuffleKeyRequest\022\016\n"
    "\006pivots\030\001 \003(\003\"4\n\022ShuffleKeyResponse\022\r\n\005e"
    "rror\030\001 \001(\t\022\017\n\007elapsed\030\002 \001(\001\"2\n\017ShardKeyR"
    "equest\022\021\n\tpartition\030\001 \002(\005\022\014\n\004keys\030\002 \003(\003\""
    "S\n\017SortKeyResponse\022\021\n\tpartition\030\001 \002(\005\022\r\n"
    "\005count\030\002 \002(\003\022\016\n\006minKey\030\003 \001(\003\022\016\n\006maxKey\030\004"
    " \001(\0032\352\002\n\024WordFrequencyService\0221\n\007GetInfo"
    "\022\013.rpc2.Empty\032\031.wordfreq.GetInfoResponse"
    "\022 \n\004Quit\022\013.rpc2.Empty\032\013.rpc2.Empty\022M\n\014Ge"
    "tHistogram\022\035.wordfreq.GetHistogramReques"
    "t\032\036.wordfreq.GetHistogramResponse\022G\n\nShu"
    "ffleKey\022\033.wordfreq.ShuffleKeyRequest\032\034.w"
    "ordfreq.ShuffleKeyResponse\0222\n\010ShardKey\022\031"
    ".wordfreq.ShardKeyRequest\032\013.rpc2.Empty\0221"
    "\n\007SortKey\022\013.rpc2.Empty\032\031.wordfreq.SortKe"
    "yResponseB\006\210\001\001\220\001\001", 817);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wordfreq.proto", &protobuf_RegisterTypes);
  GetInfoResponse::default_instance_ = new GetInfoResponse();
  GetHistogramRequest::default_instance_ = new GetHistogramRequest();
  GetHistogramResponse::default_instance_ = new GetHistogramResponse();
  ShuffleKeyRequest::default_instance_ = new ShuffleKeyRequest();
  ShuffleKeyResponse::default_instance_ = new ShuffleKeyResponse();
  ShardKeyRequest::default_instance_ = new ShardKeyRequest();
  SortKeyResponse::default_instance_ = new SortKeyResponse();
  GetInfoResponse::default_instance_->InitAsDefaultInstance();
  GetHistogramRequest::default_instance_->InitAsDefaultInstance();
  GetHistogramResponse::default_instance_->InitAsDefaultInstance();
  ShuffleKeyRequest::default_instance_->InitAsDefaultInstance();
  ShuffleKeyResponse::default_instance_->InitAsDefaultInstance();
  ShardKeyRequest::default_instance_->InitAsDefaultInstance();
  SortKeyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wordfreq_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wordfreq_2eproto {
  StaticDescriptorInitializer_wordfreq_2eproto() {
    protobuf_AddDesc_wordfreq_2eproto();
  }
} static_descriptor_initializer_wordfreq_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetInfoResponse::kReadyFieldNumber;
const int GetInfoResponse::kMaxKeyFieldNumber;
const int GetInfoResponse::kKeyCountFieldNumber;
const int GetInfoResponse::kPeersFieldNumber;
#endif  // !_MSC_VER

GetInfoResponse::GetInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.GetInfoResponse)
}

void GetInfoResponse::InitAsDefaultInstance() {
}

GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ready_ = false;
  maxkey_ = GOOGLE_LONGLONG(0);
  keycount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:wordfreq.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfoResponse_descriptor_;
}

const GetInfoResponse& GetInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

GetInfoResponse* GetInfoResponse::default_instance_ = NULL;

GetInfoResponse* GetInfoResponse::New() const {
  return new GetInfoResponse;
}

void GetInfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetInfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(maxkey_, keycount_);
    ready_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  peers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.GetInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ready = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxKey;
        break;
      }

      // required int64 maxKey = 2;
      case 2: {
        if (tag == 16) {
         parse_maxKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxkey_)));
          set_has_maxkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_keyCount;
        break;
      }

      // required int64 keyCount = 3;
      case 3: {
        if (tag == 24) {
         parse_keyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keycount_)));
          set_has_keycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_peers;
        break;
      }

      // repeated string peers = 4;
      case 4: {
        if (tag == 34) {
         parse_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peers(this->peers_size() - 1).data(),
            this->peers(this->peers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_peers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.GetInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.GetInfoResponse)
  return false;
#undef DO_
}

void GetInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.GetInfoResponse)
  // required bool ready = 1;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // required int64 maxKey = 2;
  if (has_maxkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxkey(), output);
  }

  // required int64 keyCount = 3;
  if (has_keycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->keycount(), output);
  }

  // repeated string peers = 4;
  for (int i = 0; i < this->peers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->peers(i).data(), this->peers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->peers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.GetInfoResponse)
}

::google::protobuf::uint8* GetInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.GetInfoResponse)
  // required bool ready = 1;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ready(), target);
  }

  // required int64 maxKey = 2;
  if (has_maxkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxkey(), target);
  }

  // required int64 keyCount = 3;
  if (has_keycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->keycount(), target);
  }

  // repeated string peers = 4;
  for (int i = 0; i < this->peers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peers(i).data(), this->peers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->peers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.GetInfoResponse)
  return target;
}

int GetInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ready = 1;
    if (has_ready()) {
      total_size += 1 + 1;
    }

    // required int64 maxKey = 2;
    if (has_maxkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxkey());
    }

    // required int64 keyCount = 3;
    if (has_keycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keycount());
    }

  }
  // repeated string peers = 4;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  peers_.MergeFrom(from.peers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_maxkey()) {
      set_maxkey(from.maxkey());
    }
    if (from.has_keycount()) {
      set_keycount(from.keycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetInfoResponse::Swap(GetInfoResponse* other) {
  if (other != this) {
    std::swap(ready_, other->ready_);
    std::swap(maxkey_, other->maxkey_);
    std::swap(keycount_, other->keycount_);
    peers_.Swap(&other->peers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfoResponse_descriptor_;
  metadata.reflection = GetInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHistogramRequest::kPivotsFieldNumber;
#endif  // !_MSC_VER

GetHistogramRequest::GetHistogramRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.GetHistogramRequest)
}

void GetHistogramRequest::InitAsDefaultInstance() {
}

GetHistogramRequest::GetHistogramRequest(const GetHistogramRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.GetHistogramRequest)
}

void GetHistogramRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHistogramRequest::~GetHistogramRequest() {
  // @@protoc_insertion_point(destructor:wordfreq.GetHistogramRequest)
  SharedDtor();
}

void GetHistogramRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetHistogramRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHistogramRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistogramRequest_descriptor_;
}

const GetHistogramRequest& GetHistogramRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

GetHistogramRequest* GetHistogramRequest::default_instance_ = NULL;

GetHistogramRequest* GetHistogramRequest::New() const {
  return new GetHistogramRequest;
}

void GetHistogramRequest::Clear() {
  pivots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHistogramRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.GetHistogramRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 pivots = 1;
      case 1: {
        if (tag == 8) {
         parse_pivots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_pivots())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_pivots())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_pivots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.GetHistogramRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.GetHistogramRequest)
  return false;
#undef DO_
}

void GetHistogramRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.GetHistogramRequest)
  // repeated int64 pivots = 1;
  for (int i = 0; i < this->pivots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->pivots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.GetHistogramRequest)
}

::google::protobuf::uint8* GetHistogramRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.GetHistogramRequest)
  // repeated int64 pivots = 1;
  for (int i = 0; i < this->pivots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->pivots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.GetHistogramRequest)
  return target;
}

int GetHistogramRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 pivots = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pivots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->pivots(i));
    }
    total_size += 1 * this->pivots_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistogramRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHistogramRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHistogramRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHistogramRequest::MergeFrom(const GetHistogramRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pivots_.MergeFrom(from.pivots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHistogramRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistogramRequest::CopyFrom(const GetHistogramRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistogramRequest::IsInitialized() const {

  return true;
}

void GetHistogramRequest::Swap(GetHistogramRequest* other) {
  if (other != this) {
    pivots_.Swap(&other->pivots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHistogramRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHistogramRequest_descriptor_;
  metadata.reflection = GetHistogramRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHistogramResponse::kCountsFieldNumber;
#endif  // !_MSC_VER

GetHistogramResponse::GetHistogramResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.GetHistogramResponse)
}

void GetHistogramResponse::InitAsDefaultInstance() {
}

GetHistogramResponse::GetHistogramResponse(const GetHistogramResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.GetHistogramResponse)
}

void GetHistogramResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHistogramResponse::~GetHistogramResponse() {
  // @@protoc_insertion_point(destructor:wordfreq.GetHistogramResponse)
  SharedDtor();
}

void GetHistogramResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetHistogramResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHistogramResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistogramResponse_descriptor_;
}

const GetHistogramResponse& GetHistogramResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

GetHistogramResponse* GetHistogramResponse::default_instance_ = NULL;

GetHistogramResponse* GetHistogramResponse::New() const {
  return new GetHistogramResponse;
}

void GetHistogramResponse::Clear() {
  counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHistogramResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.GetHistogramResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 counts = 1;
      case 1: {
        if (tag == 8) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_counts())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_counts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.GetHistogramResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.GetHistogramResponse)
  return false;
#undef DO_
}

void GetHistogramResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.GetHistogramResponse)
  // repeated int64 counts = 1;
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->counts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.GetHistogramResponse)
}

::google::protobuf::uint8* GetHistogramResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.GetHistogramResponse)
  // repeated int64 counts = 1;
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->counts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.GetHistogramResponse)
  return target;
}

int GetHistogramResponse::ByteSize() const {
  int total_size = 0;

  // repeated int64 counts = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->counts(i));
    }
    total_size += 1 * this->counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistogramResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHistogramResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHistogramResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHistogramResponse::MergeFrom(const GetHistogramResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  counts_.MergeFrom(from.counts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHistogramResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistogramResponse::CopyFrom(const GetHistogramResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistogramResponse::IsInitialized() const {

  return true;
}

void GetHistogramResponse::Swap(GetHistogramResponse* other) {
  if (other != this) {
    counts_.Swap(&other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHistogramResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHistogramResponse_descriptor_;
  metadata.reflection = GetHistogramResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShuffleKeyRequest::kPivotsFieldNumber;
#endif  // !_MSC_VER

ShuffleKeyRequest::ShuffleKeyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.ShuffleKeyRequest)
}

void ShuffleKeyRequest::InitAsDefaultInstance() {
}

ShuffleKeyRequest::ShuffleKeyRequest(const ShuffleKeyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.ShuffleKeyRequest)
}

void ShuffleKeyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShuffleKeyRequest::~ShuffleKeyRequest() {
  // @@protoc_insertion_point(destructor:wordfreq.ShuffleKeyRequest)
  SharedDtor();
}

void ShuffleKeyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShuffleKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShuffleKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShuffleKeyRequest_descriptor_;
}

const ShuffleKeyRequest& ShuffleKeyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

ShuffleKeyRequest* ShuffleKeyRequest::default_instance_ = NULL;

ShuffleKeyRequest* ShuffleKeyRequest::New() const {
  return new ShuffleKeyRequest;
}

void ShuffleKeyRequest::Clear() {
  pivots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShuffleKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.ShuffleKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 pivots = 1;
      case 1: {
        if (tag == 8) {
         parse_pivots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_pivots())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_pivots())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_pivots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.ShuffleKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.ShuffleKeyRequest)
  return false;
#undef DO_
}

void ShuffleKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.ShuffleKeyRequest)
  // repeated int64 pivots = 1;
  for (int i = 0; i < this->pivots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->pivots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.ShuffleKeyRequest)
}

::google::protobuf::uint8* ShuffleKeyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.ShuffleKeyRequest)
  // repeated int64 pivots = 1;
  for (int i = 0; i < this->pivots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->pivots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.ShuffleKeyRequest)
  return target;
}

int ShuffleKeyRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 pivots = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pivots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->pivots(i));
    }
    total_size += 1 * this->pivots_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShuffleKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShuffleKeyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShuffleKeyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShuffleKeyRequest::MergeFrom(const ShuffleKeyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pivots_.MergeFrom(from.pivots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShuffleKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShuffleKeyRequest::CopyFrom(const ShuffleKeyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleKeyRequest::IsInitialized() const {

  return true;
}

void ShuffleKeyRequest::Swap(ShuffleKeyRequest* other) {
  if (other != this) {
    pivots_.Swap(&other->pivots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShuffleKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShuffleKeyRequest_descriptor_;
  metadata.reflection = ShuffleKeyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShuffleKeyResponse::kErrorFieldNumber;
const int ShuffleKeyResponse::kElapsedFieldNumber;
#endif  // !_MSC_VER

ShuffleKeyResponse::ShuffleKeyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.ShuffleKeyResponse)
}

void ShuffleKeyResponse::InitAsDefaultInstance() {
}

ShuffleKeyResponse::ShuffleKeyResponse(const ShuffleKeyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.ShuffleKeyResponse)
}

void ShuffleKeyResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elapsed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShuffleKeyResponse::~ShuffleKeyResponse() {
  // @@protoc_insertion_point(destructor:wordfreq.ShuffleKeyResponse)
  SharedDtor();
}

void ShuffleKeyResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ShuffleKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShuffleKeyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShuffleKeyResponse_descriptor_;
}

const ShuffleKeyResponse& ShuffleKeyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

ShuffleKeyResponse* ShuffleKeyResponse::default_instance_ = NULL;

ShuffleKeyResponse* ShuffleKeyResponse::New() const {
  return new ShuffleKeyResponse;
}

void ShuffleKeyResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    elapsed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShuffleKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.ShuffleKeyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_elapsed;
        break;
      }

      // optional double elapsed = 2;
      case 2: {
        if (tag == 17) {
         parse_elapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elapsed_)));
          set_has_elapsed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.ShuffleKeyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.ShuffleKeyResponse)
  return false;
#undef DO_
}

void ShuffleKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.ShuffleKeyResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // optional double elapsed = 2;
  if (has_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->elapsed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.ShuffleKeyResponse)
}

::google::protobuf::uint8* ShuffleKeyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.ShuffleKeyResponse)
  // optional string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // optional double elapsed = 2;
  if (has_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->elapsed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.ShuffleKeyResponse)
  return target;
}

int ShuffleKeyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional double elapsed = 2;
    if (has_elapsed()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShuffleKeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShuffleKeyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShuffleKeyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShuffleKeyResponse::MergeFrom(const ShuffleKeyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_elapsed()) {
      set_elapsed(from.elapsed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShuffleKeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShuffleKeyResponse::CopyFrom(const ShuffleKeyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleKeyResponse::IsInitialized() const {

  return true;
}

void ShuffleKeyResponse::Swap(ShuffleKeyResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(elapsed_, other->elapsed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShuffleKeyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShuffleKeyResponse_descriptor_;
  metadata.reflection = ShuffleKeyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShardKeyRequest::kPartitionFieldNumber;
const int ShardKeyRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

ShardKeyRequest::ShardKeyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.ShardKeyRequest)
}

void ShardKeyRequest::InitAsDefaultInstance() {
}

ShardKeyRequest::ShardKeyRequest(const ShardKeyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.ShardKeyRequest)
}

void ShardKeyRequest::SharedCtor() {
  _cached_size_ = 0;
  partition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardKeyRequest::~ShardKeyRequest() {
  // @@protoc_insertion_point(destructor:wordfreq.ShardKeyRequest)
  SharedDtor();
}

void ShardKeyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardKeyRequest_descriptor_;
}

const ShardKeyRequest& ShardKeyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

ShardKeyRequest* ShardKeyRequest::default_instance_ = NULL;

ShardKeyRequest* ShardKeyRequest::New() const {
  return new ShardKeyRequest;
}

void ShardKeyRequest::Clear() {
  partition_ = 0;
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShardKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.ShardKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keys;
        break;
      }

      // repeated int64 keys = 2;
      case 2: {
        if (tag == 16) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_keys())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.ShardKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.ShardKeyRequest)
  return false;
#undef DO_
}

void ShardKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.ShardKeyRequest)
  // required int32 partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition(), output);
  }

  // repeated int64 keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.ShardKeyRequest)
}

::google::protobuf::uint8* ShardKeyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.ShardKeyRequest)
  // required int32 partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition(), target);
  }

  // repeated int64 keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.ShardKeyRequest)
  return target;
}

int ShardKeyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partition = 1;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition());
    }

  }
  // repeated int64 keys = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->keys(i));
    }
    total_size += 1 * this->keys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShardKeyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShardKeyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShardKeyRequest::MergeFrom(const ShardKeyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition()) {
      set_partition(from.partition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShardKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardKeyRequest::CopyFrom(const ShardKeyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardKeyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShardKeyRequest::Swap(ShardKeyRequest* other) {
  if (other != this) {
    std::swap(partition_, other->partition_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShardKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardKeyRequest_descriptor_;
  metadata.reflection = ShardKeyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortKeyResponse::kPartitionFieldNumber;
const int SortKeyResponse::kCountFieldNumber;
const int SortKeyResponse::kMinKeyFieldNumber;
const int SortKeyResponse::kMaxKeyFieldNumber;
#endif  // !_MSC_VER

SortKeyResponse::SortKeyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wordfreq.SortKeyResponse)
}

void SortKeyResponse::InitAsDefaultInstance() {
}

SortKeyResponse::SortKeyResponse(const SortKeyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wordfreq.SortKeyResponse)
}

void SortKeyResponse::SharedCtor() {
  _cached_size_ = 0;
  partition_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  minkey_ = GOOGLE_LONGLONG(0);
  maxkey_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortKeyResponse::~SortKeyResponse() {
  // @@protoc_insertion_point(destructor:wordfreq.SortKeyResponse)
  SharedDtor();
}

void SortKeyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SortKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortKeyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortKeyResponse_descriptor_;
}

const SortKeyResponse& SortKeyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wordfreq_2eproto();
  return *default_instance_;
}

SortKeyResponse* SortKeyResponse::default_instance_ = NULL;

SortKeyResponse* SortKeyResponse::New() const {
  return new SortKeyResponse;
}

void SortKeyResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SortKeyResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, partition_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wordfreq.SortKeyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minKey;
        break;
      }

      // optional int64 minKey = 3;
      case 3: {
        if (tag == 24) {
         parse_minKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minkey_)));
          set_has_minkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxKey;
        break;
      }

      // optional int64 maxKey = 4;
      case 4: {
        if (tag == 32) {
         parse_maxKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxkey_)));
          set_has_maxkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wordfreq.SortKeyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wordfreq.SortKeyResponse)
  return false;
#undef DO_
}

void SortKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wordfreq.SortKeyResponse)
  // required int32 partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition(), output);
  }

  // required int64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // optional int64 minKey = 3;
  if (has_minkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minkey(), output);
  }

  // optional int64 maxKey = 4;
  if (has_maxkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wordfreq.SortKeyResponse)
}

::google::protobuf::uint8* SortKeyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wordfreq.SortKeyResponse)
  // required int32 partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition(), target);
  }

  // required int64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  // optional int64 minKey = 3;
  if (has_minkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minkey(), target);
  }

  // optional int64 maxKey = 4;
  if (has_maxkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wordfreq.SortKeyResponse)
  return target;
}

int SortKeyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partition = 1;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition());
    }

    // required int64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // optional int64 minKey = 3;
    if (has_minkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minkey());
    }

    // optional int64 maxKey = 4;
    if (has_maxkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortKeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortKeyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortKeyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortKeyResponse::MergeFrom(const SortKeyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_minkey()) {
      set_minkey(from.minkey());
    }
    if (from.has_maxkey()) {
      set_maxkey(from.maxkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortKeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortKeyResponse::CopyFrom(const SortKeyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortKeyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SortKeyResponse::Swap(SortKeyResponse* other) {
  if (other != this) {
    std::swap(partition_, other->partition_);
    std::swap(count_, other->count_);
    std::swap(minkey_, other->minkey_);
    std::swap(maxkey_, other->maxkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortKeyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortKeyResponse_descriptor_;
  metadata.reflection = SortKeyResponse_reflection_;
  return metadata;
}


// ===================================================================

WordFrequencyService::~WordFrequencyService() {}

static const ::google::protobuf::ServiceDescriptor* WordFrequencyService_descriptor_ = NULL;

const ::google::protobuf::ServiceDescriptor* WordFrequencyService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  if (WordFrequencyService_descriptor_ == NULL)
    WordFrequencyService_descriptor_ = ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
        "wordfreq.proto")->service(0);
  return WordFrequencyService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* WordFrequencyService::GetDescriptor() {
  return descriptor();
}

void WordFrequencyService::GetInfo(const ::rpc2::EmptyPtr&,
                         const ::wordfreq::GetInfoResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void WordFrequencyService::Quit(const ::rpc2::EmptyPtr&,
                         const ::rpc2::Empty*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void WordFrequencyService::GetHistogram(const ::wordfreq::GetHistogramRequestPtr&,
                         const ::wordfreq::GetHistogramResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void WordFrequencyService::ShuffleKey(const ::wordfreq::ShuffleKeyRequestPtr&,
                         const ::wordfreq::ShuffleKeyResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void WordFrequencyService::ShardKey(const ::wordfreq::ShardKeyRequestPtr&,
                         const ::rpc2::Empty*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void WordFrequencyService::SortKey(const ::rpc2::EmptyPtr&,
                         const ::wordfreq::SortKeyResponse*,
                         const ::muduo::net::RpcDoneCallback& done) {
  assert(0);
  done(NULL);
}

void WordFrequencyService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::MessagePtr& request,
                             const ::google::protobuf::Message* responsePrototype,
                             const ::muduo::net::RpcDoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), WordFrequencyService_descriptor_);
  switch(method->index()) {
    case 0:
      GetInfo(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::wordfreq::GetInfoResponse*>(responsePrototype),
             done);
      break;
    case 1:
      Quit(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::rpc2::Empty*>(responsePrototype),
             done);
      break;
    case 2:
      GetHistogram(::google::protobuf::down_pointer_cast< ::wordfreq::GetHistogramRequest>(request),
             ::google::protobuf::down_cast<const ::wordfreq::GetHistogramResponse*>(responsePrototype),
             done);
      break;
    case 3:
      ShuffleKey(::google::protobuf::down_pointer_cast< ::wordfreq::ShuffleKeyRequest>(request),
             ::google::protobuf::down_cast<const ::wordfreq::ShuffleKeyResponse*>(responsePrototype),
             done);
      break;
    case 4:
      ShardKey(::google::protobuf::down_pointer_cast< ::wordfreq::ShardKeyRequest>(request),
             ::google::protobuf::down_cast<const ::rpc2::Empty*>(responsePrototype),
             done);
      break;
    case 5:
      SortKey(::google::protobuf::down_pointer_cast< ::rpc2::Empty>(request),
             ::google::protobuf::down_cast<const ::wordfreq::SortKeyResponse*>(responsePrototype),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& WordFrequencyService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rpc2::Empty::default_instance();
    case 1:
      return ::rpc2::Empty::default_instance();
    case 2:
      return ::wordfreq::GetHistogramRequest::default_instance();
    case 3:
      return ::wordfreq::ShuffleKeyRequest::default_instance();
    case 4:
      return ::wordfreq::ShardKeyRequest::default_instance();
    case 5:
      return ::rpc2::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& WordFrequencyService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::wordfreq::GetInfoResponse::default_instance();
    case 1:
      return ::rpc2::Empty::default_instance();
    case 2:
      return ::wordfreq::GetHistogramResponse::default_instance();
    case 3:
      return ::wordfreq::ShuffleKeyResponse::default_instance();
    case 4:
      return ::rpc2::Empty::default_instance();
    case 5:
      return ::wordfreq::SortKeyResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

WordFrequencyService_Stub::WordFrequencyService_Stub(::muduo::net::RpcChannel* channel__)
  : channel_(channel__), owns_channel_(false) {}
WordFrequencyService_Stub::~WordFrequencyService_Stub() {
}

void WordFrequencyService_Stub::GetInfo(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::wordfreq::GetInfoResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(0),
                       request, &::wordfreq::GetInfoResponse::default_instance(), done);
}
void WordFrequencyService_Stub::Quit(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::rpc2::EmptyPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(1),
                       request, &::rpc2::Empty::default_instance(), done);
}
void WordFrequencyService_Stub::GetHistogram(const ::wordfreq::GetHistogramRequest& request,
                              const ::std::function<void(const ::wordfreq::GetHistogramResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(2),
                       request, &::wordfreq::GetHistogramResponse::default_instance(), done);
}
void WordFrequencyService_Stub::ShuffleKey(const ::wordfreq::ShuffleKeyRequest& request,
                              const ::std::function<void(const ::wordfreq::ShuffleKeyResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(3),
                       request, &::wordfreq::ShuffleKeyResponse::default_instance(), done);
}
void WordFrequencyService_Stub::ShardKey(const ::wordfreq::ShardKeyRequest& request,
                              const ::std::function<void(const ::rpc2::EmptyPtr&)>& done) {
  channel_->CallMethod(descriptor()->method(4),
                       request, &::rpc2::Empty::default_instance(), done);
}
void WordFrequencyService_Stub::SortKey(const ::rpc2::Empty& request,
                              const ::std::function<void(const ::wordfreq::SortKeyResponsePtr&)>& done) {
  channel_->CallMethod(descriptor()->method(5),
                       request, &::wordfreq::SortKeyResponse::default_instance(), done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace wordfreq

// @@protoc_insertion_point(global_scope)
