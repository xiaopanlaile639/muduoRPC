// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wordfreq.proto

#ifndef PROTOBUF_wordfreq_2eproto__INCLUDED
#define PROTOBUF_wordfreq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "muduo/protorpc2/rpc2.pb.h"
#include <muduo/protorpc2/service.h>
#include <memory>
// @@protoc_insertion_point(includes)

namespace wordfreq {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wordfreq_2eproto();
void protobuf_AssignDesc_wordfreq_2eproto();
void protobuf_ShutdownFile_wordfreq_2eproto();

class GetInfoResponse;
class GetHistogramRequest;
class GetHistogramResponse;
class ShuffleKeyRequest;
class ShuffleKeyResponse;
class ShardKeyRequest;
class SortKeyResponse;

// ===================================================================

class GetInfoResponse : public ::google::protobuf::Message {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoResponse& default_instance();

  void Swap(GetInfoResponse* other);

  // implements Message ----------------------------------------------

  GetInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ready = 1;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline bool ready() const;
  inline void set_ready(bool value);

  // required int64 maxKey = 2;
  inline bool has_maxkey() const;
  inline void clear_maxkey();
  static const int kMaxKeyFieldNumber = 2;
  inline ::google::protobuf::int64 maxkey() const;
  inline void set_maxkey(::google::protobuf::int64 value);

  // required int64 keyCount = 3;
  inline bool has_keycount() const;
  inline void clear_keycount();
  static const int kKeyCountFieldNumber = 3;
  inline ::google::protobuf::int64 keycount() const;
  inline void set_keycount(::google::protobuf::int64 value);

  // repeated string peers = 4;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 4;
  inline const ::std::string& peers(int index) const;
  inline ::std::string* mutable_peers(int index);
  inline void set_peers(int index, const ::std::string& value);
  inline void set_peers(int index, const char* value);
  inline void set_peers(int index, const char* value, size_t size);
  inline ::std::string* add_peers();
  inline void add_peers(const ::std::string& value);
  inline void add_peers(const char* value);
  inline void add_peers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();

  // @@protoc_insertion_point(class_scope:wordfreq.GetInfoResponse)
 private:
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_maxkey();
  inline void clear_has_maxkey();
  inline void set_has_keycount();
  inline void clear_has_keycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 maxkey_;
  ::google::protobuf::int64 keycount_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  bool ready_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static GetInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetHistogramRequest : public ::google::protobuf::Message {
 public:
  GetHistogramRequest();
  virtual ~GetHistogramRequest();

  GetHistogramRequest(const GetHistogramRequest& from);

  inline GetHistogramRequest& operator=(const GetHistogramRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHistogramRequest& default_instance();

  void Swap(GetHistogramRequest* other);

  // implements Message ----------------------------------------------

  GetHistogramRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHistogramRequest& from);
  void MergeFrom(const GetHistogramRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 pivots = 1;
  inline int pivots_size() const;
  inline void clear_pivots();
  static const int kPivotsFieldNumber = 1;
  inline ::google::protobuf::int64 pivots(int index) const;
  inline void set_pivots(int index, ::google::protobuf::int64 value);
  inline void add_pivots(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      pivots() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_pivots();

  // @@protoc_insertion_point(class_scope:wordfreq.GetHistogramRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > pivots_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static GetHistogramRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetHistogramResponse : public ::google::protobuf::Message {
 public:
  GetHistogramResponse();
  virtual ~GetHistogramResponse();

  GetHistogramResponse(const GetHistogramResponse& from);

  inline GetHistogramResponse& operator=(const GetHistogramResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHistogramResponse& default_instance();

  void Swap(GetHistogramResponse* other);

  // implements Message ----------------------------------------------

  GetHistogramResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHistogramResponse& from);
  void MergeFrom(const GetHistogramResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 counts = 1;
  inline int counts_size() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 1;
  inline ::google::protobuf::int64 counts(int index) const;
  inline void set_counts(int index, ::google::protobuf::int64 value);
  inline void add_counts(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_counts();

  // @@protoc_insertion_point(class_scope:wordfreq.GetHistogramResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > counts_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static GetHistogramResponse* default_instance_;
};
// -------------------------------------------------------------------

class ShuffleKeyRequest : public ::google::protobuf::Message {
 public:
  ShuffleKeyRequest();
  virtual ~ShuffleKeyRequest();

  ShuffleKeyRequest(const ShuffleKeyRequest& from);

  inline ShuffleKeyRequest& operator=(const ShuffleKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShuffleKeyRequest& default_instance();

  void Swap(ShuffleKeyRequest* other);

  // implements Message ----------------------------------------------

  ShuffleKeyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShuffleKeyRequest& from);
  void MergeFrom(const ShuffleKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 pivots = 1;
  inline int pivots_size() const;
  inline void clear_pivots();
  static const int kPivotsFieldNumber = 1;
  inline ::google::protobuf::int64 pivots(int index) const;
  inline void set_pivots(int index, ::google::protobuf::int64 value);
  inline void add_pivots(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      pivots() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_pivots();

  // @@protoc_insertion_point(class_scope:wordfreq.ShuffleKeyRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > pivots_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static ShuffleKeyRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShuffleKeyResponse : public ::google::protobuf::Message {
 public:
  ShuffleKeyResponse();
  virtual ~ShuffleKeyResponse();

  ShuffleKeyResponse(const ShuffleKeyResponse& from);

  inline ShuffleKeyResponse& operator=(const ShuffleKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShuffleKeyResponse& default_instance();

  void Swap(ShuffleKeyResponse* other);

  // implements Message ----------------------------------------------

  ShuffleKeyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShuffleKeyResponse& from);
  void MergeFrom(const ShuffleKeyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // optional double elapsed = 2;
  inline bool has_elapsed() const;
  inline void clear_elapsed();
  static const int kElapsedFieldNumber = 2;
  inline double elapsed() const;
  inline void set_elapsed(double value);

  // @@protoc_insertion_point(class_scope:wordfreq.ShuffleKeyResponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_elapsed();
  inline void clear_has_elapsed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_;
  double elapsed_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static ShuffleKeyResponse* default_instance_;
};
// -------------------------------------------------------------------

class ShardKeyRequest : public ::google::protobuf::Message {
 public:
  ShardKeyRequest();
  virtual ~ShardKeyRequest();

  ShardKeyRequest(const ShardKeyRequest& from);

  inline ShardKeyRequest& operator=(const ShardKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShardKeyRequest& default_instance();

  void Swap(ShardKeyRequest* other);

  // implements Message ----------------------------------------------

  ShardKeyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShardKeyRequest& from);
  void MergeFrom(const ShardKeyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 partition = 1;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 1;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // repeated int64 keys = 2;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline ::google::protobuf::int64 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::int64 value);
  inline void add_keys(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_keys();

  // @@protoc_insertion_point(class_scope:wordfreq.ShardKeyRequest)
 private:
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > keys_;
  ::google::protobuf::int32 partition_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static ShardKeyRequest* default_instance_;
};
// -------------------------------------------------------------------

class SortKeyResponse : public ::google::protobuf::Message {
 public:
  SortKeyResponse();
  virtual ~SortKeyResponse();

  SortKeyResponse(const SortKeyResponse& from);

  inline SortKeyResponse& operator=(const SortKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SortKeyResponse& default_instance();

  void Swap(SortKeyResponse* other);

  // implements Message ----------------------------------------------

  SortKeyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SortKeyResponse& from);
  void MergeFrom(const SortKeyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 partition = 1;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 1;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // required int64 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int64 count() const;
  inline void set_count(::google::protobuf::int64 value);

  // optional int64 minKey = 3;
  inline bool has_minkey() const;
  inline void clear_minkey();
  static const int kMinKeyFieldNumber = 3;
  inline ::google::protobuf::int64 minkey() const;
  inline void set_minkey(::google::protobuf::int64 value);

  // optional int64 maxKey = 4;
  inline bool has_maxkey() const;
  inline void clear_maxkey();
  static const int kMaxKeyFieldNumber = 4;
  inline ::google::protobuf::int64 maxkey() const;
  inline void set_maxkey(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:wordfreq.SortKeyResponse)
 private:
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_minkey();
  inline void clear_has_minkey();
  inline void set_has_maxkey();
  inline void clear_has_maxkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::int64 minkey_;
  ::google::protobuf::int64 maxkey_;
  ::google::protobuf::int32 partition_;
  friend void  protobuf_AddDesc_wordfreq_2eproto();
  friend void protobuf_AssignDesc_wordfreq_2eproto();
  friend void protobuf_ShutdownFile_wordfreq_2eproto();

  void InitAsDefaultInstance();
  static SortKeyResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetInfoResponse

// required bool ready = 1;
inline bool GetInfoResponse::has_ready() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetInfoResponse::set_has_ready() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetInfoResponse::clear_has_ready() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetInfoResponse::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool GetInfoResponse::ready() const {
  // @@protoc_insertion_point(field_get:wordfreq.GetInfoResponse.ready)
  return ready_;
}
inline void GetInfoResponse::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.GetInfoResponse.ready)
}

// required int64 maxKey = 2;
inline bool GetInfoResponse::has_maxkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetInfoResponse::set_has_maxkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetInfoResponse::clear_has_maxkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetInfoResponse::clear_maxkey() {
  maxkey_ = GOOGLE_LONGLONG(0);
  clear_has_maxkey();
}
inline ::google::protobuf::int64 GetInfoResponse::maxkey() const {
  // @@protoc_insertion_point(field_get:wordfreq.GetInfoResponse.maxKey)
  return maxkey_;
}
inline void GetInfoResponse::set_maxkey(::google::protobuf::int64 value) {
  set_has_maxkey();
  maxkey_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.GetInfoResponse.maxKey)
}

// required int64 keyCount = 3;
inline bool GetInfoResponse::has_keycount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetInfoResponse::set_has_keycount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetInfoResponse::clear_has_keycount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetInfoResponse::clear_keycount() {
  keycount_ = GOOGLE_LONGLONG(0);
  clear_has_keycount();
}
inline ::google::protobuf::int64 GetInfoResponse::keycount() const {
  // @@protoc_insertion_point(field_get:wordfreq.GetInfoResponse.keyCount)
  return keycount_;
}
inline void GetInfoResponse::set_keycount(::google::protobuf::int64 value) {
  set_has_keycount();
  keycount_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.GetInfoResponse.keyCount)
}

// repeated string peers = 4;
inline int GetInfoResponse::peers_size() const {
  return peers_.size();
}
inline void GetInfoResponse::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& GetInfoResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:wordfreq.GetInfoResponse.peers)
  return peers_.Get(index);
}
inline ::std::string* GetInfoResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:wordfreq.GetInfoResponse.peers)
  return peers_.Mutable(index);
}
inline void GetInfoResponse::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wordfreq.GetInfoResponse.peers)
  peers_.Mutable(index)->assign(value);
}
inline void GetInfoResponse::set_peers(int index, const char* value) {
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wordfreq.GetInfoResponse.peers)
}
inline void GetInfoResponse::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wordfreq.GetInfoResponse.peers)
}
inline ::std::string* GetInfoResponse::add_peers() {
  return peers_.Add();
}
inline void GetInfoResponse::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wordfreq.GetInfoResponse.peers)
}
inline void GetInfoResponse::add_peers(const char* value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wordfreq.GetInfoResponse.peers)
}
inline void GetInfoResponse::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wordfreq.GetInfoResponse.peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetInfoResponse::peers() const {
  // @@protoc_insertion_point(field_list:wordfreq.GetInfoResponse.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetInfoResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:wordfreq.GetInfoResponse.peers)
  return &peers_;
}

// -------------------------------------------------------------------

// GetHistogramRequest

// repeated int64 pivots = 1;
inline int GetHistogramRequest::pivots_size() const {
  return pivots_.size();
}
inline void GetHistogramRequest::clear_pivots() {
  pivots_.Clear();
}
inline ::google::protobuf::int64 GetHistogramRequest::pivots(int index) const {
  // @@protoc_insertion_point(field_get:wordfreq.GetHistogramRequest.pivots)
  return pivots_.Get(index);
}
inline void GetHistogramRequest::set_pivots(int index, ::google::protobuf::int64 value) {
  pivots_.Set(index, value);
  // @@protoc_insertion_point(field_set:wordfreq.GetHistogramRequest.pivots)
}
inline void GetHistogramRequest::add_pivots(::google::protobuf::int64 value) {
  pivots_.Add(value);
  // @@protoc_insertion_point(field_add:wordfreq.GetHistogramRequest.pivots)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetHistogramRequest::pivots() const {
  // @@protoc_insertion_point(field_list:wordfreq.GetHistogramRequest.pivots)
  return pivots_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetHistogramRequest::mutable_pivots() {
  // @@protoc_insertion_point(field_mutable_list:wordfreq.GetHistogramRequest.pivots)
  return &pivots_;
}

// -------------------------------------------------------------------

// GetHistogramResponse

// repeated int64 counts = 1;
inline int GetHistogramResponse::counts_size() const {
  return counts_.size();
}
inline void GetHistogramResponse::clear_counts() {
  counts_.Clear();
}
inline ::google::protobuf::int64 GetHistogramResponse::counts(int index) const {
  // @@protoc_insertion_point(field_get:wordfreq.GetHistogramResponse.counts)
  return counts_.Get(index);
}
inline void GetHistogramResponse::set_counts(int index, ::google::protobuf::int64 value) {
  counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:wordfreq.GetHistogramResponse.counts)
}
inline void GetHistogramResponse::add_counts(::google::protobuf::int64 value) {
  counts_.Add(value);
  // @@protoc_insertion_point(field_add:wordfreq.GetHistogramResponse.counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GetHistogramResponse::counts() const {
  // @@protoc_insertion_point(field_list:wordfreq.GetHistogramResponse.counts)
  return counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GetHistogramResponse::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:wordfreq.GetHistogramResponse.counts)
  return &counts_;
}

// -------------------------------------------------------------------

// ShuffleKeyRequest

// repeated int64 pivots = 1;
inline int ShuffleKeyRequest::pivots_size() const {
  return pivots_.size();
}
inline void ShuffleKeyRequest::clear_pivots() {
  pivots_.Clear();
}
inline ::google::protobuf::int64 ShuffleKeyRequest::pivots(int index) const {
  // @@protoc_insertion_point(field_get:wordfreq.ShuffleKeyRequest.pivots)
  return pivots_.Get(index);
}
inline void ShuffleKeyRequest::set_pivots(int index, ::google::protobuf::int64 value) {
  pivots_.Set(index, value);
  // @@protoc_insertion_point(field_set:wordfreq.ShuffleKeyRequest.pivots)
}
inline void ShuffleKeyRequest::add_pivots(::google::protobuf::int64 value) {
  pivots_.Add(value);
  // @@protoc_insertion_point(field_add:wordfreq.ShuffleKeyRequest.pivots)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ShuffleKeyRequest::pivots() const {
  // @@protoc_insertion_point(field_list:wordfreq.ShuffleKeyRequest.pivots)
  return pivots_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ShuffleKeyRequest::mutable_pivots() {
  // @@protoc_insertion_point(field_mutable_list:wordfreq.ShuffleKeyRequest.pivots)
  return &pivots_;
}

// -------------------------------------------------------------------

// ShuffleKeyResponse

// optional string error = 1;
inline bool ShuffleKeyResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShuffleKeyResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShuffleKeyResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShuffleKeyResponse::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& ShuffleKeyResponse::error() const {
  // @@protoc_insertion_point(field_get:wordfreq.ShuffleKeyResponse.error)
  return *error_;
}
inline void ShuffleKeyResponse::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:wordfreq.ShuffleKeyResponse.error)
}
inline void ShuffleKeyResponse::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:wordfreq.ShuffleKeyResponse.error)
}
inline void ShuffleKeyResponse::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wordfreq.ShuffleKeyResponse.error)
}
inline ::std::string* ShuffleKeyResponse::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wordfreq.ShuffleKeyResponse.error)
  return error_;
}
inline ::std::string* ShuffleKeyResponse::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShuffleKeyResponse::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wordfreq.ShuffleKeyResponse.error)
}

// optional double elapsed = 2;
inline bool ShuffleKeyResponse::has_elapsed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShuffleKeyResponse::set_has_elapsed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShuffleKeyResponse::clear_has_elapsed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShuffleKeyResponse::clear_elapsed() {
  elapsed_ = 0;
  clear_has_elapsed();
}
inline double ShuffleKeyResponse::elapsed() const {
  // @@protoc_insertion_point(field_get:wordfreq.ShuffleKeyResponse.elapsed)
  return elapsed_;
}
inline void ShuffleKeyResponse::set_elapsed(double value) {
  set_has_elapsed();
  elapsed_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.ShuffleKeyResponse.elapsed)
}

// -------------------------------------------------------------------

// ShardKeyRequest

// required int32 partition = 1;
inline bool ShardKeyRequest::has_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShardKeyRequest::set_has_partition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShardKeyRequest::clear_has_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShardKeyRequest::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 ShardKeyRequest::partition() const {
  // @@protoc_insertion_point(field_get:wordfreq.ShardKeyRequest.partition)
  return partition_;
}
inline void ShardKeyRequest::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.ShardKeyRequest.partition)
}

// repeated int64 keys = 2;
inline int ShardKeyRequest::keys_size() const {
  return keys_.size();
}
inline void ShardKeyRequest::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::int64 ShardKeyRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:wordfreq.ShardKeyRequest.keys)
  return keys_.Get(index);
}
inline void ShardKeyRequest::set_keys(int index, ::google::protobuf::int64 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:wordfreq.ShardKeyRequest.keys)
}
inline void ShardKeyRequest::add_keys(::google::protobuf::int64 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:wordfreq.ShardKeyRequest.keys)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ShardKeyRequest::keys() const {
  // @@protoc_insertion_point(field_list:wordfreq.ShardKeyRequest.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ShardKeyRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:wordfreq.ShardKeyRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// SortKeyResponse

// required int32 partition = 1;
inline bool SortKeyResponse::has_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SortKeyResponse::set_has_partition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SortKeyResponse::clear_has_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SortKeyResponse::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 SortKeyResponse::partition() const {
  // @@protoc_insertion_point(field_get:wordfreq.SortKeyResponse.partition)
  return partition_;
}
inline void SortKeyResponse::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.SortKeyResponse.partition)
}

// required int64 count = 2;
inline bool SortKeyResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SortKeyResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SortKeyResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SortKeyResponse::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 SortKeyResponse::count() const {
  // @@protoc_insertion_point(field_get:wordfreq.SortKeyResponse.count)
  return count_;
}
inline void SortKeyResponse::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.SortKeyResponse.count)
}

// optional int64 minKey = 3;
inline bool SortKeyResponse::has_minkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SortKeyResponse::set_has_minkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SortKeyResponse::clear_has_minkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SortKeyResponse::clear_minkey() {
  minkey_ = GOOGLE_LONGLONG(0);
  clear_has_minkey();
}
inline ::google::protobuf::int64 SortKeyResponse::minkey() const {
  // @@protoc_insertion_point(field_get:wordfreq.SortKeyResponse.minKey)
  return minkey_;
}
inline void SortKeyResponse::set_minkey(::google::protobuf::int64 value) {
  set_has_minkey();
  minkey_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.SortKeyResponse.minKey)
}

// optional int64 maxKey = 4;
inline bool SortKeyResponse::has_maxkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SortKeyResponse::set_has_maxkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SortKeyResponse::clear_has_maxkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SortKeyResponse::clear_maxkey() {
  maxkey_ = GOOGLE_LONGLONG(0);
  clear_has_maxkey();
}
inline ::google::protobuf::int64 SortKeyResponse::maxkey() const {
  // @@protoc_insertion_point(field_get:wordfreq.SortKeyResponse.maxKey)
  return maxkey_;
}
inline void SortKeyResponse::set_maxkey(::google::protobuf::int64 value) {
  set_has_maxkey();
  maxkey_ = value;
  // @@protoc_insertion_point(field_set:wordfreq.SortKeyResponse.maxKey)
}



// ===================================================================

typedef ::std::shared_ptr<GetInfoResponse> GetInfoResponsePtr;
typedef ::std::shared_ptr<GetHistogramRequest> GetHistogramRequestPtr;
typedef ::std::shared_ptr<GetHistogramResponse> GetHistogramResponsePtr;
typedef ::std::shared_ptr<ShuffleKeyRequest> ShuffleKeyRequestPtr;
typedef ::std::shared_ptr<ShuffleKeyResponse> ShuffleKeyResponsePtr;
typedef ::std::shared_ptr<ShardKeyRequest> ShardKeyRequestPtr;
typedef ::std::shared_ptr<SortKeyResponse> SortKeyResponsePtr;

// -------------------------------------------------------------------

class WordFrequencyService_Stub;

class WordFrequencyService : public ::muduo::net::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline WordFrequencyService() {};
 public:
  virtual ~WordFrequencyService();

  typedef WordFrequencyService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetInfo(const ::rpc2::EmptyPtr& request,
                       const ::wordfreq::GetInfoResponse* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void Quit(const ::rpc2::EmptyPtr& request,
                       const ::rpc2::Empty* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void GetHistogram(const ::wordfreq::GetHistogramRequestPtr& request,
                       const ::wordfreq::GetHistogramResponse* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void ShuffleKey(const ::wordfreq::ShuffleKeyRequestPtr& request,
                       const ::wordfreq::ShuffleKeyResponse* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void ShardKey(const ::wordfreq::ShardKeyRequestPtr& request,
                       const ::rpc2::Empty* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);
  virtual void SortKey(const ::rpc2::EmptyPtr& request,
                       const ::wordfreq::SortKeyResponse* responsePrototype,
                       const ::muduo::net::RpcDoneCallback& done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  const ::google::protobuf::MessagePtr& request,
                  const ::google::protobuf::Message* responsePrototype,
                  const ::muduo::net::RpcDoneCallback& done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WordFrequencyService);
};

class WordFrequencyService_Stub : public WordFrequencyService {
 public:
  WordFrequencyService_Stub(::muduo::net::RpcChannel* channel);
  ~WordFrequencyService_Stub();

  inline ::muduo::net::RpcChannel* channel() { return channel_; }

  // implements WordFrequencyService ------------------------------------------

  using WordFrequencyService::GetInfo;
  virtual void GetInfo(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::wordfreq::GetInfoResponsePtr&)>& done);
  using WordFrequencyService::Quit;
  virtual void Quit(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::rpc2::EmptyPtr&)>& done);
  using WordFrequencyService::GetHistogram;
  virtual void GetHistogram(const ::wordfreq::GetHistogramRequest& request,
                       const ::std::function<void(const ::wordfreq::GetHistogramResponsePtr&)>& done);
  using WordFrequencyService::ShuffleKey;
  virtual void ShuffleKey(const ::wordfreq::ShuffleKeyRequest& request,
                       const ::std::function<void(const ::wordfreq::ShuffleKeyResponsePtr&)>& done);
  using WordFrequencyService::ShardKey;
  virtual void ShardKey(const ::wordfreq::ShardKeyRequest& request,
                       const ::std::function<void(const ::rpc2::EmptyPtr&)>& done);
  using WordFrequencyService::SortKey;
  virtual void SortKey(const ::rpc2::Empty& request,
                       const ::std::function<void(const ::wordfreq::SortKeyResponsePtr&)>& done);
 private:
  ::muduo::net::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(WordFrequencyService_Stub);
};

// @@protoc_insertion_point(namespace_scope)

}  // namespace wordfreq

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wordfreq_2eproto__INCLUDED
